(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{119:function(A,I,g){"use strict";(function(A){Object.defineProperty(I,"__esModule",{value:!0}),I.Wallet=void 0;const B=g(16),Q=g(7),C=g(21),i=g(57);class E extends Q.EventEmitter{constructor(A,I,g){super(),this.paymail=A,this.keyPair=I,this.timeouts=new Map,this.blockchain=g.blockchain,this.ownerPair=B.KeyPair.fromPrivKey(B.PrivKey.fromString(g.owner.privkey)),this.pursePair=B.KeyPair.fromPrivKey(B.PrivKey.fromString(g.purse.privkey)),this.pubkey=I.pubKey.toHex(),this.purse=g.purse.address,this.address=g.owner.address,this.balance=g.purse.balance.bind(g.purse),this.load=g.load.bind(g),this.createTransaction=()=>new i.Transaction,this.loadTransaction=A=>g.import(A),this.getTxPayload=A=>g.payload(A),console.log("PAYMAIL: "+A),console.log("PUBKEY: "+I.pubKey.toString()),console.log("ADDRESS: "+this.address),console.log("PURSE: "+this.purse)}get now(){return Date.now()}async loadJigIndex(){return this.blockchain.jigIndex(this.address)}async loadJig(A){return await this.load(A).catch(I=>{if(!I.message.match(/not a/i))throw console.error("Load error:",A,I.message),I})}async loadJigs(){const A=await this.loadJigIndex(),I=await Promise.all(A.map(A=>this.loadJig(A.location)));return console.log("JIGS:",I.length),I}buildMessage(A,I=!0){A.ts=Date.now(),A.from=this.keyPair.pubKey.toString();const g=new C.SignedMessage(A);return I&&g.sign(this.keyPair),g}async signTx(I){return Promise.all(I.txIns.map(async(g,Q)=>{const C=A.from(g.txHashBuf).reverse().toString("hex"),i=B.Tx.fromHex(await this.blockchain.fetch(C)).txOuts[g.txOutNum];if(i.script.isPubKeyHashOut()){const A=B.Address.fromTxOutScript(i.script).toString();if(A===this.purse){const A=await I.asyncSign(this.pursePair,void 0,Q,i.script,i.valueBn);g.setScript((new B.Script).writeBuffer(A.toTxFormat()).writeBuffer(this.pursePair.pubKey.toBuffer()))}else if(A===this.address){const A=await I.asyncSign(this.ownerPair,void 0,Q,i.script,i.valueBn);g.setScript((new B.Script).writeBuffer(A.toTxFormat()).writeBuffer(this.ownerPair.pubKey.toBuffer()))}}return i}))}async encrypt(A){}async decrypt(A){}async verifySig(I,g,Q){const C=await B.Hash.asyncSha256(A.from(g)),i=B.Ecdsa.verify(C,B.Sig.fromString(I),B.PubKey.fromString(Q));return console.log("SIG:",i,I,g,Q),i}randomInt(A){return Math.floor(Math.random()*(A||Number.MAX_SAFE_INTEGER))}randomBytes(A){return B.Random.getRandomBuffer(A).toString("hex")}setTimeout(A,I){const g=Date.now();return this.timeouts.set(g,setTimeout(async()=>A().catch(A=>console.error("Timeout Error",A)),I)),g}clearTimeout(A){this.timeouts.has(A)&&clearTimeout(this.timeouts.get(A))}}I.Wallet=E}).call(this,g(3).Buffer)},120:function(A,I,g){"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RestBlockchain=void 0;const B=g(58),Q=g(21),C=g(59),i=g(29);I.RestBlockchain=class{constructor(A,I,g=new B.LRUCache(1e7),Q=!1){this.apiUrl=A,this.network=I,this.cache=g,this.debug=Q,this.requests=new Map}get bsvNetwork(){switch(this.network){case"stn":return"stn";case"main":return"mainnet";default:return"testnet"}}async broadcast(A){this.debug&&console.log("BROADCAST:",A);const I=await i(this.apiUrl+"/broadcast",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({rawtx:A})});if(!I.ok)throw C(I.status,await I.text());const g=await I.text();return this.debug&&console.log("Broadcast:",g),await this.cache.set("tx://"+g,A),g}async populateInputs(A){await Promise.all(A.inputs.map(async A=>{const I=await this.fetch(A.prevTxId.toString("hex"));A.output=I.outputs[A.outputIndex]}))}async fetch(A){this.debug&&console.log("FETCH:",A);let I=await this.cache.get("tx://"+A);if(I)return I;if(!this.requests.has(A)){const g=Promise.resolve().then(async()=>{const g=await i(`${this.apiUrl}/tx/${A}`);if(!g.ok)throw C(g.status,await g.text());return I=await g.text(),await this.cache.set("tx://"+A,I),this.requests.delete(A),I});this.requests.set(A,g)}return this.requests.get(A)}async time(A){return Date.now()}async spends(A,I){this.debug&&console.log("SPENDS:",A,I);const g=`spend://${A}_${I}`;let B=await this.cache.get(g);if(B)return B;if(!this.requests.has(g)){const Q=(async()=>{const Q=await i(`${this.apiUrl}/spends/${A}_o${I}`);if(!Q.ok)throw C(Q.status,await Q.text());return B=await Q.text()||null,B&&await this.cache.set(g,B),this.requests.delete(g),B})();this.requests.set(g,Q)}return this.requests.get(g)}async utxos(A){this.debug&&console.log("UTXOS:",A);const I=await i(`${this.apiUrl}/utxos/${A}`);if(!I.ok)throw new Error(await I.text());return I.json()}async jigIndex(A){const I=await i(`${this.apiUrl}/jigs/address/${A}`);if(!I.ok)throw new Error(`${I.status} ${I.statusText}`);return I.json()}async getJigData(A){const I=await i(`${this.apiUrl}/jigs/${A}`);if(!I.ok)throw new Error(`${I.status} ${I.statusText}`);return I.json()}async kindHistory(A,I){const g=await i(`${this.apiUrl}/jigs/kind/${A}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(I)});if(!g.ok)throw C(g.status,await g.text());return g.json()}async originHistory(A,I){const g=await i(`${this.apiUrl}/jigs/origin/${A}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(I)});if(!g.ok)throw C(g.status,await g.text());return g.json()}async fund(A,I){const g=await i(`${this.apiUrl}/fund/${A}${I?"?satoshis="+I:""}`);if(!g.ok)throw C(g.status,await g.text());return g.text()}async loadMessage(A){const I=await i(`${this.apiUrl}/messages/${A}`);if(!I.ok)throw C(I.status,await I.text());return new Q.SignedMessage(await I.json())}async sendMessage(A,I){const g=I||this.apiUrl+"/messages";console.log("Post TO:",g);const B=await i(g,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(A)});if(!B.ok)throw C(B.status,await B.text());return B.json()}}},127:function(A,I,g){"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.RestStateCache=void 0;const B=g(58),Q=g(59),C=g(29);I.RestStateCache=class{constructor(A,I=new B.LRUCache(1e7),g=!1){this.apiUrl=A,this.cache=I,this.debug=g,this.requests=new Map}async get(A){this.debug&&console.log("State:",A);let I=await this.cache.get(A);if(I)return this.debug&&console.log("Cache Hit:",A),I;if(!this.requests.has(A)){const g=(async()=>{const g=await C(`${this.apiUrl}/state/${encodeURIComponent(A)}`);if(!g.ok){if(404===g.status)return void(this.debug&&console.log("Remote Miss:",A));throw Q(g.status,g.statusText)}return this.debug&&console.log("Remote Hit:",A),I=await g.json(),await this.cache.set(A,I),this.requests.delete(A),I})();this.requests.set(A,g)}return this.requests.get(A)}async set(A,I){await this.cache.set(A,I)}}},128:function(A,I,g){"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.IORedisMock=void 0;I.IORedisMock=class{constructor(){this.store=new Map,this.expires=new Map}_expire(A){const I=this.expires.get(A);I&&I<Date.now()&&(this.store.delete(A),this.expires.delete(A))}get(A){return this._expire(A),this.store.get(A)}set(A,I){this.expires.delete(A),this.store.set(A,I)}del(A){this.expires.delete(A),this.store.delete(A)}hget(A,I){this._expire(A);const g=this.store.get(A);if(g)return g[I]}hset(A,I,g){this._expire(A),this.expires.delete(A);let B=this.store.get(A);B||(B={}),B[I]=g,this.store.set(A,B)}hmset(A,I){this._expire(A),this.expires.delete(A);const g=Object.assign(this.store.get(A)||{},I);this.store.set(A,g)}hdel(A,I){this._expire(A),this.expires.delete(A);const g=this.store.get(A);delete g[I],this.store.set(A,g)}hgetall(A){this._expire(A);return{...this.store.get(A)||{}}}lindex(A,I){this._expire(A);const g=this.store.get(A);if(g)return g[I]}lrange(A,I,g){this._expire(A);return(this.store.get(A)||[]).slice(I,g+1)}lset(A,I,g){this._expire(A),this.expires.delete(A);let B=this.store.get(A)||[];B[I]=g,this.store.set(A,B)}rpush(A,...I){this._expire(A),this.expires.delete(A);let g=this.store.get(A)||[];g.push(...I),this.store.set(A,g)}exists(A){return this._expire(A),this.store.has(A)}expire(A,I){this.expires.set(A,1e3*I+Date.now())}ttl(A){if(this._expire(A),!this.store.has(A))return-2;const I=this.expires.get(A);return I?Math.floor((I-Date.now())/1e3):-1}}},129:function(A,I,g){"use strict";(function(A){Object.defineProperty(I,"__esModule",{value:!0}),I.KronoAuth=void 0;const B=g(130),Q=g(16),C=g(21),i=g(29);I.KronoAuth=class{constructor(A,I,g){this.apiUrl=A,this.domain=I,this.network=g}async createKey(I,g){const C=await Q.Hash.asyncSha256(A.from(`${this.domain}|${I}`)),i=await Q.Hash.asyncSha256(A.from(g.normalize("NFKC"))),{hash:E}=await B.hash({pass:i,salt:C,time:100,mem:1024,hashLen:32});return A.from(E)}async register(I,g,B){I=I.toLowerCase().normalize("NFKC");const C=await this.createKey(I,g),E="main"===this.network?Q.Constants.Mainnet.PrivKey.versionByteNum:Q.Constants.Testnet.PrivKey.versionByteNum,t=A.concat([A.from([E]),C,A.from([1])]),e=(new Q.PrivKey).fromBuffer(t),o=Q.KeyPair.fromPrivKey(e),s=Q.PubKey.fromPrivKey(e),n=Q.Bip32.fromRandom(),a=await Q.Ecies.asyncBitcoreEncrypt(A.from(n.toString()),s,o),r={pubkey:s.toString(),xpub:n.toPublic().toString(),recovery:a.toString("base64"),email:B},c=A.from(`${this.domain}|${I}|${r.xpub}|${r.recovery}|${B}`),h=await Q.Hash.asyncSha256(c),D=Q.Ecdsa.sign(h,o);r.sig=D.toString();const y=await i(`${this.apiUrl}/api/accounts/${I}@${this.domain}`,{method:"POST",headers:{"Content-type":"application/json"},body:JSON.stringify(r)});if(!y.ok)throw console.error(y.status,y.statusText),new Error("Registration Failed");return o}async login(I,g){I=I.toLowerCase().normalize("NFKC");const B=await this.createKey(I,g),C="main"===this.network?Q.Constants.Mainnet.PrivKey.versionByteNum:Q.Constants.Testnet.PrivKey.versionByteNum,i=A.concat([A.from([C]),B,A.from([1])]),E=(new Q.PrivKey).fromBuffer(i);return Q.KeyPair.fromPrivKey(E)}async recover(I,g){const B=new C.SignedMessage({from:g.pubKey.toString()});B.sign(g);const E=await i(`${this.apiUrl}/api/accounts/${encodeURIComponent(I)}/recover`,{method:"POST",headers:{"Content-type":"application/json"},body:JSON.stringify(B)});if(!E.ok)throw new Error(`${E.status} - ${E.statusText}`);const t=await E.json();return Q.Ecies.bitcoreDecrypt(A.from(t,"base64"),g.privKey).toString()}async isHandleAvailable(A){A=A.toLowerCase();const I=`${this.apiUrl}/api/bsvalias/id/${encodeURIComponent(A)}@${this.domain}`;console.log("Requesting:",I);try{return 404===(await i(I)).status}catch(A){return console.error("Error Fetching",A.message),!1}}}}).call(this,g(3).Buffer)},130:function(A,I,g){(function(B){var Q,C,i;"undefined"!=typeof self&&self,C=[],void 0===(i="function"==typeof(Q=function(){const A="undefined"!=typeof self?self:this,I={Argon2d:0,Argon2i:1,Argon2id:2};function Q(I){if(Q._promise)return Q._promise;if(Q._module)return Promise.resolve(Q._module);let B;return B=A.process&&A.process.versions&&A.process.versions.node?C().then(A=>new Promise(I=>{A.postRun=()=>I(A)})):(A.loadArgon2WasmBinary?A.loadArgon2WasmBinary():Promise.resolve(g(132)).then(A=>function(A){const I=atob(A),g=new Uint8Array(new ArrayBuffer(I.length));for(let A=0;A<I.length;A++)g[A]=I.charCodeAt(A);return g}(A))).then(g=>function(I,g){return new Promise(B=>(A.Module={wasmBinary:I,wasmMemory:g,postRun(){B(Module)}},C()))}(g,I?function(A){const I=Math.min(Math.max(Math.ceil(1024*A/65536),256)+256,32767);return new WebAssembly.Memory({initial:I,maximum:32767})}(I):void 0)),Q._promise=B,B.then(A=>(Q._module=A,delete Q._promise,A))}function C(){return A.loadArgon2WasmModule?A.loadArgon2WasmModule():Promise.resolve(g(60))}function i(A,I){return A.allocate(I,"i8",A.ALLOC_NORMAL)}function E(A,I){return i(A,new Uint8Array([...I,0]))}function t(A){if("string"!=typeof A)return A;if("function"==typeof TextEncoder)return(new TextEncoder).encode(A);if("function"==typeof B)return B.from(A);throw new Error("Don't know how to encode UTF8")}return{ArgonType:I,hash:function(A){const g=A.mem||1024;return Q(g).then(B=>{const Q=A.time||1,C=A.parallelism||1,e=t(A.pass),o=E(B,e),s=e.length,n=t(A.salt),a=E(B,n),r=n.length,c=B.allocate(new Array(A.hashLen||24),"i8",B.ALLOC_NORMAL),h=A.secret?i(B,A.secret):0,D=A.secret?A.secret.byteLength:0,y=A.ad?i(B,A.ad):0,w=A.ad?A.ad.byteLength:0,F=A.hashLen||24,f=B.allocate(new Array(512),"i8",B.ALLOC_NORMAL),u=A.type||I.Argon2d;let N,G,l;try{G=B._argon2_hash_ext(Q,g,C,o,s,a,r,c,F,f,512,u,h,D,y,w,19)}catch(A){N=A}if(0!==G||N){try{N||(N=B.UTF8ToString(B._argon2_error_message(G)))}catch(A){}l={message:N,code:G}}else{let A="";const I=new Uint8Array(F);for(let g=0;g<F;g++){const Q=B.HEAP8[c+g];I[g]=Q,A+=("0"+(255&Q).toString(16)).slice(-2)}l={hash:I,hashHex:A,encoded:B.UTF8ToString(f)}}try{B._free(o),B._free(a),B._free(c),B._free(f),y&&B._free(y),h&&B._free(h)}catch(A){}if(N)throw l;return l})},verify:function(A){return Q().then(g=>{const B=t(A.pass),Q=E(g,B),C=B.length,i=E(g,t(A.encoded));let e,o,s,n=A.type;if(void 0===n){let g=A.encoded.split("$")[1];g&&(g=g.replace("a","A"),n=I[g]||I.Argon2d)}try{o=g._argon2_verify(i,Q,C,n)}catch(A){e=A}if(o||e){try{e||(e=g.UTF8ToString(g._argon2_error_message(o)))}catch(A){}s={message:e,code:o}}try{g._free(Q),g._free(i)}catch(A){}if(e)throw s;return s})},unloadRuntime:function(){Q._module&&(Q._module.unloadRuntime(),delete Q._promise,delete Q._module)}}})?Q.apply(I,C):Q)||(A.exports=i)}).call(this,g(3).Buffer)},132:function(A,I){A.exports=""},133:function(A,I,g){"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.WSClient=void 0;const B=g(7);class Q extends B.EventEmitter{constructor(A,I,g=[]){super(),this.client=A,this.url=I,this.lastIds=new Map,this.channels=new Set(g),this.socket=this.connect()}connect(){const A=new this.client(this.url);return A.onopen=()=>{A.onmessage=A=>{const{id:I,channel:g,event:B,data:Q}=JSON.parse(A.data);I>(this.lastIds.get(g)||0)&&this.lastIds.set(g,I),this.emit(B,Q,g)},Array.from(this.channels).forEach(A=>this.subscribe(A))},A.onerror=console.error,A.onclose=()=>{this.socket=this.connect()},A}subscribe(A,I){this.channels.add(A),this.socket&&1===this.socket.readyState&&this.socket.send(JSON.stringify({action:"subscribe",channelId:A,lastId:I||this.lastIds.get(A)||null}))}unsubscribe(A){this.channels.delete(A),this.socket&&1===this.socket.readyState&&this.socket.send(JSON.stringify({action:"unsubscribe",channelId:A}))}close(){this.socket.close()}}I.WSClient=Q},21:function(A,I,g){"use strict";(function(A){Object.defineProperty(I,"__esModule",{value:!0}),I.SignedMessage=void 0;const B=g(16),Q=A.from("Bitcoin Signed Message:\n"),C=B.Bw.varIntBufNum(Q.length);I.SignedMessage=class{constructor(A){this.from="",this.to=[],this.reply="",this.subject="",this.context=[],this.payload="",this.ts=Date.now(),Object.assign(this,A)}get hash(){const I=A.concat([A.from(this.to.join(":")),A.from(this.reply||""),A.from(this.subject),A.from(this.context.join(":")),B.Bw.varIntBufNum(this.ts),A.from(this.payload||"")]),g=A.concat([C,Q,B.Bw.varIntBufNum(I.length),I]);return B.Hash.sha256Sha256(g)}get id(){return this.hash.toString("hex")}get payloadObj(){return this.payload&&JSON.parse(this.payload)}sign(A){this.sig=B.Ecdsa.sign(this.hash,A).toString()}async verify(){return B.Ecdsa.asyncVerify(this.hash,B.Sig.fromString(this.sig),B.PubKey.fromString(this.from))}}}).call(this,g(3).Buffer)},22:function(A,I){function g(A){var I,g,B;this._tables[0][0][0]||this._precompute();var Q=this._tables[0][4],C=this._tables[1],i=A.length,E=1;if(4!==i&&6!==i&&8!==i)throw new Error("invalid aes key size");this._key=[g=A.slice(0),B=[]];for(var t=i;t<4*i+28;t++)I=g[t-1],(t%i==0||8===i&&t%i==4)&&(I=Q[I>>>24]<<24^Q[I>>16&255]<<16^Q[I>>8&255]<<8^Q[255&I],t%i==0&&(I=I<<8^I>>>24^E<<24,E=E<<1^283*(E>>7))),g[t]=g[t-i]^I;for(var e=0;t;e++,t--)I=g[3&e?t:t-4],B[e]=t<=4||e<4?I:C[0][Q[I>>>24]]^C[1][Q[I>>16&255]]^C[2][Q[I>>8&255]]^C[3][Q[255&I]]}A.exports=g,g.prototype={encrypt:function(A){return this._crypt(A,0)},decrypt:function(A){return this._crypt(A,1)},_tables:[[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)]],_precompute:function(){var A,I,g,B,Q,C,i,E,t=this._tables[0],e=this._tables[1],o=t[4],s=e[4],n=new Uint8Array(256),a=new Uint8Array(256);for(A=0;A<256;A++)a[(n[A]=A<<1^283*(A>>7))^A]=A;for(I=g=0;!o[I];I^=B||1,g=a[g]||1)for(C=(C=g^g<<1^g<<2^g<<3^g<<4)>>8^255&C^99,o[I]=C,s[C]=I,E=16843009*n[Q=n[B=n[I]]]^65537*Q^257*B^16843008*I,i=257*n[C]^16843008*C,A=0;A<4;A++)t[A][I]=i=i<<24^i>>>8,e[A][C]=E=E<<24^E>>>8},_crypt:function(A,I){if(4!==A.length)throw new Error("invalid aes block size");var g,B,Q,C,i=this._key[I],E=A[0]^i[0],t=A[I?3:1]^i[1],e=A[2]^i[2],o=A[I?1:3]^i[3],s=i.length/4-2,n=4,a=new Uint32Array(4),r=this._tables[I],c=r[0],h=r[1],D=r[2],y=r[3],w=r[4];for(C=0;C<s;C++)g=c[E>>>24]^h[t>>16&255]^D[e>>8&255]^y[255&o]^i[n],B=c[t>>>24]^h[e>>16&255]^D[o>>8&255]^y[255&E]^i[n+1],Q=c[e>>>24]^h[o>>16&255]^D[E>>8&255]^y[255&t]^i[n+2],o=c[o>>>24]^h[E>>16&255]^D[t>>8&255]^y[255&e]^i[n+3],n+=4,E=g,t=B,e=Q;for(C=0;C<4;C++)a[I?3&-C:C]=w[E>>>24]<<24^w[t>>16&255]<<16^w[e>>8&255]<<8^w[255&o]^i[n++],g=E,E=t,t=e,e=o,o=g;return a}}},58:function(A,I,g){"use strict";Object.defineProperty(I,"__esModule",{value:!0}),I.LRUCache=void 0;I.LRUCache=class{constructor(A,I){this.maxBytes=A,this.maxEntries=I,this.cache=new Map,this.bytes=0}async set(A,I){let g;if("number"==typeof I)g={bytes:8,value:I};else if("string"==typeof I||I instanceof Uint8Array)g={bytes:I.length,value:I};else{const A=JSON.stringify(I);g={json:!0,bytes:A.length,value:A}}this.bytes+=g.bytes,this.cache.set(A,g);for(const A of Array.from(this.cache.keys())){if((!this.maxEntries||this.cache.size<=this.maxEntries)&&(!this.maxBytes||this.bytes<=this.maxBytes))break;const I=this.cache.get(A);this.bytes-=(null==I?void 0:I.bytes)||0,this.cache.delete(A)}}get(A){if(this.cache.has(A)){const I=this.cache.get(A);this.cache.delete(A),this.cache.set(A,I);return I.json?JSON.parse(I.value):I.value}}async delete(A){const I=this.cache.get(A);this.bytes-=(null==I?void 0:I.bytes)||0,this.cache.delete(A)}}},60:function(A,I,g){(function(I){var B,Q="undefined"!=typeof self&&void 0!==self.Module?self.Module:{},C=Q,i={};for(B in Q)Q.hasOwnProperty(B)&&(i[B]=Q[B]);var E=[],t=!1,e=!1,o=!1,s=!1;t="object"==typeof window,e="function"==typeof importScripts,o="object"==typeof I&&"object"==typeof I.versions&&"string"==typeof I.versions.node,s=!t&&!o&&!e;var n,a,r,c,h="";function D(A){return Q.locateFile?Q.locateFile(A,h):h+A}o?(h=e?g(61).dirname(h)+"/":__dirname+"/",n=function(A,I){return r||(r=g(131)),c||(c=g(61)),A=c.normalize(A),r.readFileSync(A,I?null:"utf8")},a=function(A){var I=n(A,!0);return I.buffer||(I=new Uint8Array(I)),l(I.buffer),I},I.argv.length>1&&I.argv[1].replace(/\\/g,"/"),E=I.argv.slice(2),A.exports=Q,I.on("uncaughtException",(function(A){if(!(A instanceof pA))throw A})),I.on("unhandledRejection",tA),function(A){I.exit(A)},Q.inspect=function(){return"[Emscripten Module object]"}):s?("undefined"!=typeof read&&(n=function(A){return read(A)}),a=function(A){var I;return"function"==typeof readbuffer?new Uint8Array(readbuffer(A)):(l("object"==typeof(I=read(A,"binary"))),I)},"undefined"!=typeof scriptArgs?E=scriptArgs:void 0!==arguments&&(E=arguments),"function"==typeof quit&&function(A){quit(A)},"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(t||e)&&(e?h=self.location.href:document.currentScript&&(h=document.currentScript.src),h=0!==h.indexOf("blob:")?h.substr(0,h.lastIndexOf("/")+1):"",n=function(A){var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText},e&&(a=function(A){var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}),function(A,I,g){var B=new XMLHttpRequest;B.open("GET",A,!0),B.responseType="arraybuffer",B.onload=function(){200==B.status||0==B.status&&B.response?I(B.response):g()},B.onerror=g,B.send(null)});Q.print||console.log.bind(console);var y,w,F=Q.printErr||console.warn.bind(console);for(B in i)i.hasOwnProperty(B)&&(Q[B]=i[B]);function f(A){switch(A){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:if("*"===A[A.length-1])return 4;if("i"===A[0]){var I=Number(A.substr(1));return l(I%8==0,"getNativeTypeSize invalid bits "+I+", type "+A),I/8}return 0}}function u(A,I,g,B){switch("*"===(g=g||"i8").charAt(g.length-1)&&(g="i32"),g){case"i1":case"i8":Y[A>>0]=I;break;case"i16":J[A>>1]=I;break;case"i32":m[A>>2]=I;break;case"i64":cA=[I>>>0,(rA=I,+$(rA)>=1?rA>0?(0|gA(+IA(rA/4294967296),4294967295))>>>0:~~+AA((rA-+(~~rA>>>0))/4294967296)>>>0:0)],m[A>>2]=cA[0],m[A+4>>2]=cA[1];break;case"float":L[A>>2]=I;break;case"double":b[A>>3]=I;break;default:tA("invalid type for setValue: "+g)}}i=null,Q.arguments&&(E=Q.arguments),Q.thisProgram&&Q.thisProgram,Q.quit&&Q.quit,Q.wasmBinary&&(y=Q.wasmBinary),Q.noExitRuntime&&Q.noExitRuntime,"object"!=typeof WebAssembly&&tA("no native wasm support detected");var N=new WebAssembly.Table({initial:3,maximum:3,element:"anyfunc"}),G=!1;function l(A,I){A||tA("Assertion failed: "+I)}var d=0,R=2;function S(A,I,g,B){var Q,C;"number"==typeof A?(Q=!0,C=A):(Q=!1,C=A.length);var i,E="string"==typeof I?I:null;if(i=g==R?B:[UA,MA][g](Math.max(C,E?1:I.length)),Q){var t;for(B=i,l(0==(3&i)),t=i+(-4&C);B<t;B+=4)m[B>>2]=0;for(t=i+C;B<t;)Y[B++>>0]=0;return i}if("i8"===E)return A.subarray||A.slice?H.set(A,i):H.set(new Uint8Array(A),i),i;for(var e,o,s,n=0;n<C;){var a=A[n];0!==(e=E||I[n])?("i64"==e&&(e="i32"),u(i+n,a,e),s!==e&&(o=f(e),s=e),n+=o):n++}return i}var U="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function M(A,I,g){for(var B=I+g,Q=I;A[Q]&&!(Q>=B);)++Q;if(Q-I>16&&A.subarray&&U)return U.decode(A.subarray(I,Q));for(var C="";I<Q;){var i=A[I++];if(128&i){var E=63&A[I++];if(192!=(224&i)){var t=63&A[I++];if((i=224==(240&i)?(15&i)<<12|E<<6|t:(7&i)<<18|E<<12|t<<6|63&A[I++])<65536)C+=String.fromCharCode(i);else{var e=i-65536;C+=String.fromCharCode(55296|e>>10,56320|1023&e)}}else C+=String.fromCharCode((31&i)<<6|E)}else C+=String.fromCharCode(i)}return C}function p(A,I){return A?M(H,A,I):""}var k,Y,H,J,m,L,b,K=65536;function x(A,I){return A%I>0&&(A+=I-A%I),A}function q(A){k=A,Q.HEAP8=Y=new Int8Array(A),Q.HEAP16=J=new Int16Array(A),Q.HEAP32=m=new Int32Array(A),Q.HEAPU8=H=new Uint8Array(A),Q.HEAPU16=new Uint16Array(A),Q.HEAPU32=new Uint32Array(A),Q.HEAPF32=L=new Float32Array(A),Q.HEAPF64=b=new Float64Array(A)}var v=Q.INITIAL_MEMORY||16777216;(w=Q.wasmMemory?Q.wasmMemory:new WebAssembly.Memory({initial:v/K,maximum:2147418112/K}))&&(k=w.buffer),v=k.byteLength,q(k);var T=[],X=[],W=[],P=[];function j(){if(Q.preRun)for("function"==typeof Q.preRun&&(Q.preRun=[Q.preRun]);Q.preRun.length;)_(Q.preRun.shift());FA(T)}function Z(){!0,FA(X)}function V(){FA(W)}function O(){if(Q.postRun)for("function"==typeof Q.postRun&&(Q.postRun=[Q.postRun]);Q.postRun.length;)z(Q.postRun.shift());FA(P)}function _(A){T.unshift(A)}function z(A){P.unshift(A)}var $=Math.abs,AA=Math.ceil,IA=Math.floor,gA=Math.min,BA=0,QA=null,CA=null;function iA(A){BA++,Q.monitorRunDependencies&&Q.monitorRunDependencies(BA)}function EA(A){if(BA--,Q.monitorRunDependencies&&Q.monitorRunDependencies(BA),0==BA&&(null!==QA&&(clearInterval(QA),QA=null),CA)){var I=CA;CA=null,I()}}function tA(A){throw Q.onAbort&&Q.onAbort(A),F(A+=""),G=!0,1,A="abort("+A+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(A)}function eA(A,I){return String.prototype.startsWith?A.startsWith(I):0===A.indexOf(I)}Q.preloadedImages={},Q.preloadedAudios={};var oA="data:application/octet-stream;base64,";function sA(A){return eA(A,oA)}var nA="file://";function aA(A){return eA(A,nA)}var rA,cA,hA="argon2.wasm";function DA(){try{if(y)return new Uint8Array(y);if(a)return a(hA);throw"both async and sync fetching of the wasm failed"}catch(A){tA(A)}}function yA(){return y||!t&&!e||"function"!=typeof fetch||aA(hA)?Promise.resolve().then(DA):fetch(hA,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw"failed to load wasm binary file at '"+hA+"'";return A.arrayBuffer()})).catch((function(){return DA()}))}function wA(){var A={a:RA};function I(A,I){var g=A.exports;Q.asm=g,EA()}function g(A){Q=C,"undefined"!=typeof self&&(self.Module=Q),I(A.instance)}function B(I){return yA().then((function(I){return WebAssembly.instantiate(I,A)})).then(I,(function(A){F("failed to asynchronously prepare wasm: "+A),tA(A)}))}if(iA(),Q.instantiateWasm)try{return Q.instantiateWasm(A,I)}catch(A){return F("Module.instantiateWasm callback failed with error: "+A),!1}return function(){if(y||"function"!=typeof WebAssembly.instantiateStreaming||sA(hA)||aA(hA)||"function"!=typeof fetch)return B(g);fetch(hA,{credentials:"same-origin"}).then((function(I){return WebAssembly.instantiateStreaming(I,A).then(g,(function(A){return F("wasm streaming compile failed: "+A),F("falling back to ArrayBuffer instantiation"),B(g)}))}))}(),{}}function FA(A){for(;A.length>0;){var I=A.shift();if("function"!=typeof I){var g=I.func;"number"==typeof g?void 0===I.arg?N.get(g)():N.get(g)(I.arg):g(void 0===I.arg?null:I.arg)}else I(Q)}}function fA(A,I,g){H.copyWithin(A,I,I+g)}function uA(){return H.length}function NA(A){try{return w.grow(A-k.byteLength+65535>>>16),q(w.buffer),1}catch(A){}}function GA(A){A>>>=0;var I=uA();if(A>2147418112)return!1;for(var g=1;g<=4;g*=2){var B=I*(1+.2/g);if(B=Math.min(B,A+100663296),NA(Math.min(2147418112,x(Math.max(16777216,A,B),65536))))return!0}return!1}function lA(){}sA(hA)||(hA=D(hA)),X.push({func:function(){SA()}});var dA,RA={b:N,c:fA,d:GA,a:w,e:lA},SA=(wA(),Q.___wasm_call_ctors=function(){return(SA=Q.___wasm_call_ctors=Q.asm.f).apply(null,arguments)}),UA=(Q._argon2_hash=function(){return(Q._argon2_hash=Q.asm.g).apply(null,arguments)},Q._malloc=function(){return(UA=Q._malloc=Q.asm.h).apply(null,arguments)}),MA=(Q._free=function(){return(Q._free=Q.asm.i).apply(null,arguments)},Q._argon2_verify=function(){return(Q._argon2_verify=Q.asm.j).apply(null,arguments)},Q._argon2_error_message=function(){return(Q._argon2_error_message=Q.asm.k).apply(null,arguments)},Q._argon2_hash_ext=function(){return(Q._argon2_hash_ext=Q.asm.l).apply(null,arguments)},Q.stackAlloc=function(){return(MA=Q.stackAlloc=Q.asm.m).apply(null,arguments)});function pA(A){this.name="ExitStatus",this.message="Program terminated with exit("+A+")",this.status=A}function kA(A){function I(){dA||(dA=!0,Q.calledRun=!0,G||(Z(),V(),Q.onRuntimeInitialized&&Q.onRuntimeInitialized(),O()))}A=A||E,BA>0||(j(),BA>0||(Q.setStatus?(Q.setStatus("Running..."),setTimeout((function(){setTimeout((function(){Q.setStatus("")}),1),I()}),1)):I()))}if(Q.allocate=S,Q.UTF8ToString=p,Q.ALLOC_NORMAL=d,CA=function A(){dA||kA(),dA||(CA=A)},Q.run=kA,Q.preInit)for("function"==typeof Q.preInit&&(Q.preInit=[Q.preInit]);Q.preInit.length>0;)Q.preInit.pop()();kA(),A.exports=Q,Q.unloadRuntime=function(){"undefined"!=typeof self&&delete self.Module,Q=C=w=N=k=Y=H=J=m=L=b=void 0,delete A.exports}}).call(this,g(4))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,