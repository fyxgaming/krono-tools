!function(e){function t(t){for(var o,a,r=t[0],l=t[1],c=t[2],g=0,d=[];g<r.length;g++)a=r[g],Object.prototype.hasOwnProperty.call(i,a)&&i[a]&&d.push(i[a][0]),i[a]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(e[o]=l[o]);for(h&&h(t);d.length;)d.shift()();return s.push.apply(s,c||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],o=!0,r=1;r<n.length;r++){var l=n[r];0!==i[l]&&(o=!1)}o&&(s.splice(t--,1),e=a(a.s=n[0]))}return e}var o={},i={0:0},s=[];function a(t){if(o[t])return o[t].exports;var n=o[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=o,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)a.d(n,o,function(t){return e[t]}.bind(null,o));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="/wallet";var r=window.webpackJsonp=window.webpackJsonp||[],l=r.push.bind(r);r.push=t,r=r.slice();for(var c=0;c<r.length;c++)t(r[c]);var h=l;s.push([63,1,4,2,3,5]),n()}({101:function(e,t){},103:function(e,t){},29:function(e,t){e.exports=fetch},57:function(e,t){e.exports=Run},63:function(e,t,n){e.exports=n(64)},64:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(65);function i(){Array.from(document.getElementsByClassName("panel")).forEach(e=>e.style.display="none")}document.addEventListener("DOMContentLoaded",async e=>{var t,n;console.log("LOADED");const s=new o.WalletService;s.on("show",e=>{console.log("SHOW:",e),function(e){i();const t=document.getElementById(e);t&&(t.style.display="block")}(e)}),s.on("hide",e=>{i()});try{await s.init()}catch(e){console.log(e)}null===(t=document.getElementById("login-btn"))||void 0===t||t.addEventListener("click",e=>{var t,n;const o=null===(t=document.getElementById("l-handle"))||void 0===t?void 0:t.value,i=null===(n=document.getElementById("l-password"))||void 0===n?void 0:n.value;s.login(o,i)}),null===(n=document.getElementById("register-btn"))||void 0===n||n.addEventListener("click",e=>{var t,n,o;const i=null===(t=document.getElementById("r-handle"))||void 0===t?void 0:t.value,a=null===(n=document.getElementById("r-email"))||void 0===n?void 0:n.value,r=null===(o=document.getElementById("r-password"))||void 0===o?void 0:o.value;s.register(i,r,a)});const a=document.createElement("h1");document.body.appendChild(a)})},65:function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.WalletService=void 0;const o=n(16),i=n(115),s=n(116),a=n(119),r=n(120),l=n(127),c=n(128),h=n(21),g=n(129),d=n(7),u=n(133),f=n(57);let p={};const m=window.location.href.split("?");if(m[1]){const[e]=m[1].split("#");p=s.decode(e)}o.Constants.Default="main"===i.config.network?o.Constants.Mainnet:o.Constants.Testnet;const y=n(16);y.Constants.Default=o.Constants.Default,console.log("LOAD");class w extends d.EventEmitter{constructor(){super(),this.printLog=console.log.bind(console),this.printError=console.error.bind(console),this.logId=0,this.logs=[],this.sessionId=`${Date.now()}-${Math.random()*Number.MAX_SAFE_INTEGER}`,this.timeLabels={},this.apiUrl=p.apiUrl||i.config.apiUrl,this.domain=document.location.hash.slice(1).split("@")[1],this.overrideConsole(),this.auth=new g.KronoAuth(this.apiUrl,this.domain,i.config.network)}get channel(){const e=window.vuplex;return e||window}get channelScope(){const e=document.referrer;return e&&!this.isInUnity?e.match(/^.+:\/\/[^\/]+/)[0]:null}get isInUnity(){return!!window.vuplex}get handle(){return window.localStorage.getItem("HANDLE")||""}set handle(e){window.localStorage.setItem("HANDLE",e)}get keyPair(){const e=window.localStorage.getItem("WIF");return e?o.KeyPair.fromPrivKey(o.PrivKey.fromString(e)):null}set keyPair(e){window.localStorage.setItem("WIF",e.privKey.toString())}get agentId(){return document.location.hash.slice(1).split("@")[0]}get paymail(){return`${this.handle}@${this.domain}`}async init(){console.log("INIT");let e=!1;for(;i.config.ephemeral&&!e;){await new Promise(e=>setTimeout(()=>e(),5e3));const t=await fetch(this.apiUrl+"/initialize");e=t.ok&&await t.json()}this.clientEmit("WALLET_READY"),this.channel.addEventListener("message",this.onClientEvent.bind(this)),console.log("BLOCKCHAIN:",this.apiUrl);const t=`${this.apiUrl}/agents/${this.domain}/${this.agentId}`;console.log("fetching:",t);const n=await fetch(t);if(!n.ok)throw new Error(`${n.status} - ${n.statusText}`);if(this.agentDef=await n.json(),!this.agentDef)throw new Error("AGENT MISSING");if(i.config.errorLog&&setInterval(async()=>{const e=this.logs;if(this.logs=[],!e.length)return;const t=await fetch(i.config.errorLog,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`${t.status} - ${t.statusText}`)},5e3),this.agentDef.anonymous)return this.initializeWallet();if(!i.config.ephemeral&&!this.keyPair)return this.clientEmit("NO_KEYS");try{await this.initializeUser()}catch(e){console.error("Login Error:",e.message),this.clientEmit("NO_KEYS")}}async initializeWallet(t,n){const o=new f.LocalCache({maxSizeMB:100}),s=new r.RestBlockchain(this.apiUrl,i.config.network,o),g=new f({network:i.config.network,owner:t,blockchain:s,purse:n,cache:new l.RestStateCache(this.apiUrl,o),app:i.config.app||"kronoverse",trust:"*",timeout:6e4,logger:{error:console.error}}),d=this.wallet=new a.Wallet(this.paymail,this.keyPair,g),p=new c.IORedisMock,m=[this.keyPair.pubKey.toString()];let w;i.config.ephemeral&&m.push(g.owner.address),i.config.sockets&&(console.log("Sockets:",i.config.sockets),w=new u.WSClient(WebSocket,i.config.sockets,m)),console.log("DOMAIN:",this.domain),console.log("AGENT_ID:",this.agentId),console.log("LOC:",this.agentDef.location);const v=await g.load(this.agentDef.location),E=this.agent=new v(d,s,p,y,{fetch:fetch,Buffer:e,ws:w,SignedMessage:h.SignedMessage});E.on("client",this.clientEmit.bind(this)),E.on("subscribe",(e,t)=>{w.subscribe(e,t)}),E.on("unsubscribe",e=>{w.unsubscribe(e)}),await E.init(),this.clientEmit("AGENT_LOADED"),w.on("jig",(e,t)=>{console.log("JIG:",JSON.stringify(e)),E.onJig(e).catch(console.error)}),w.on("msg",(e,t)=>{console.log("MSG:",JSON.stringify(e)),E.onMessage(new h.SignedMessage(e)).catch(console.error)})}async initializeUser(e){let t;if(console.log("Initializing User"),e&&(this.handle=e),i.config.ephemeral)t=o.Bip32.fromRandom(),this.keyPair=o.KeyPair.fromPrivKey(t.privKey);else{console.log("Recovering account");const e=await this.auth.recover(this.paymail,this.keyPair);t=o.Bip32.fromString(e)}this.initializeWallet(t.derive("m/1/0").privKey.toString(),t.derive("m/0/0").privKey.toString())}async login(e,t){this.keyPair=await this.auth.login(e,t),await this.initializeUser(e)}async register(e,t,n){this.keyPair=await this.auth.register(e,t,n),await this.initializeUser(e)}async logout(){window.localStorage.removeItem("WIF"),window.localStorage.removeItem("HANDLE")}async onClientEvent(e){var t;const n={};if(!this.tryParseMessageData(e.data,n))return;["Register","Login"].includes(n.name)?console.log("WALLET RECEIVED EVENT:",n.name):console.log("WALLET RECEIVED EVENT:",JSON.stringify(n));const o={name:"On"+n.name};try{const e=n.payload&&JSON.parse(n.payload);switch(n.name){case"Register":await this.register(e.handle,e.password,e.email);break;case"Login":await this.login(e.handle,e.password);break;case"Logout":await this.logout();break;case"Cashout":if(!this.wallet)throw new Error("Wallet not initialized");this.clientEmit("BalanceUpdated",0);break;case"IsHandleAvailable":o.payload=JSON.stringify(await this.auth.isHandleAvailable(e));break;default:if(!this.agent)throw new Error("Agent not initialized");const i=await(null===(t=this.agent)||void 0===t?void 0:t.onEvent(n.name,e));o.payload=i&&JSON.stringify(i)}o.success=!0}catch(e){o.success=!1,o.payload=JSON.stringify(e.message),e.message.includes("Not enough funds")?o.statusCode=402:o.statusCode=e.status||500}console.log(o.name,o.payload),this.postMessage(o)}tryParseMessageData(t,n){const o=n||{};return"string"==typeof t?Object.assign(o,JSON.parse(e.from(t,"base64").toString())):"object"==typeof t&&Object.assign(o,t),o&&o.name}clientEmit(e,t){const n={name:e,payload:t&&JSON.stringify(t),success:!0};this.logs.push({idx:this.logId++,sessionId:this.sessionId,handle:this.handle,type:"log",ts:Date.now(),message:{name:e,payload:t}}),this.postMessage(n)}postMessage(e){e.target="kronoverse",this.isInUnity?this.channel.postMessage(e):this.channelScope&&this.channel.parent.postMessage(e,this.channelScope)}overrideConsole(){console.log=(...e)=>{e.unshift(Date.now());const t=e.join(" ");this.logs.push({idx:this.logId++,sessionId:this.sessionId,paymail:this.paymail,type:"log",ts:Date.now(),message:t}),i.config.emitLogs&&this.clientEmit("Log",t),this.printLog(...e)},console.error=(...e)=>{e.unshift(Date.now());const t=e.join(" ");this.logs.push({idx:this.logId++,sessionId:this.sessionId,paymail:this.paymail,type:"error",ts:Date.now(),message:t}),i.config.emitLogs&&this.clientEmit("Error",t),this.printError(...e)},console.time=e=>{this.timeLabels[e]=Date.now()},console.timeEnd=e=>{console.log(`${e}: ${Date.now()-this.timeLabels[e]||0}ms`)}}}t.WalletService=w}).call(this,n(3).Buffer)},68:function(e,t){},71:function(e,t){},72:function(e,t){},88:function(e,t){},90:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,