(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1:function(t,e,r){(function(t){!function(t,e){"use strict";function i(t,e){if(!t)throw new Error(e||"Assertion failed")}function s(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function n(t,e,r){if(n.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var o;"object"==typeof t?t.exports=n:e.BN=n,n.BN=n,n.wordSize=26;try{o=r(68).Buffer}catch(t){}function h(t,e,r){for(var s=0,n=Math.min(t.length,r),o=0,h=e;h<n;h++){var u,a=t.charCodeAt(h)-48;s<<=4,s|=u=a>=49&&a<=54?a-49+10:a>=17&&a<=22?a-17+10:a,o|=u}return i(!(240&o),"Invalid character in "+t),s}function u(t,e,r,s){for(var n=0,o=0,h=Math.min(t.length,r),u=e;u<h;u++){var a=t.charCodeAt(u)-48;n*=s,o=a>=49?a-49+10:a>=17?a-17+10:a,i(a>=0&&o<s,"Invalid character"),n+=o}return n}function a(t,e){t.words=e.words,t.length=e.length,t.negative=e.negative,t.red=e.red}if(n.isBN=function(t){return t instanceof n||null!==t&&"object"==typeof t&&t.constructor.wordSize===n.wordSize&&Array.isArray(t.words)},n.max=function(t,e){return t.cmp(e)>0?t:e},n.min=function(t,e){return t.cmp(e)<0?t:e},n.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),i(e===(0|e)&&e>=2&&e<=36);var s=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&s++,16===e?this._parseHex(t,s):this._parseBase(t,e,s),"-"===t[0]&&(this.negative=1),this._strip(),"le"===r&&this._initArray(this.toArray(),e,r)},n.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(i(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},n.prototype._initArray=function(t,e,r){if(i("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var s=0;s<this.length;s++)this.words[s]=0;var n,o,h=0;if("be"===r)for(s=t.length-1,n=0;s>=0;s-=3)o=t[s]|t[s-1]<<8|t[s-2]<<16,this.words[n]|=o<<h&67108863,this.words[n+1]=o>>>26-h&67108863,(h+=24)>=26&&(h-=26,n++);else if("le"===r)for(s=0,n=0;s<t.length;s+=3)o=t[s]|t[s+1]<<8|t[s+2]<<16,this.words[n]|=o<<h&67108863,this.words[n+1]=o>>>26-h&67108863,(h+=24)>=26&&(h-=26,n++);return this._strip()},n.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var i,s,n=0;for(r=t.length-6,i=0;r>=e;r-=6)s=h(t,r,r+6),this.words[i]|=s<<n&67108863,this.words[i+1]|=s>>>26-n&4194303,(n+=24)>=26&&(n-=26,i++);r+6!==e&&(s=h(t,e,r+6),this.words[i]|=s<<n&67108863,this.words[i+1]|=s>>>26-n&4194303),this._strip()},n.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var i=0,s=1;s<=67108863;s*=e)i++;i--,s=s/e|0;for(var n=t.length-r,o=n%i,h=Math.min(n,n-o)+r,a=0,c=r;c<h;c+=i)a=u(t,c,c+i,e),this.imuln(s),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a);if(0!==o){var f=1;for(a=u(t,c,t.length,e),c=0;c<o;c++)f*=e;this.imuln(f),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a)}},n.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},n.prototype._move=function(t){a(t,this)},n.prototype.clone=function(){var t=new n(null);return this.copy(t),t},n.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},n.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},n.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{n.prototype[Symbol.for("nodejs.util.inspect.custom")]=c}catch(t){n.prototype.inspect=c}else n.prototype.inspect=c;function c(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];n.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var s=0,n=0,o=0;o<this.length;o++){var h=this.words[o],u=(16777215&(h<<s|n)).toString(16);r=0!==(n=h>>>24-s&16777215)||o!==this.length-1?f[6-u.length]+u+r:u+r,(s+=2)>=26&&(s-=26,o--)}for(0!==n&&(r=n.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var a=l[t],c=p[t];r="";var m=this.clone();for(m.negative=0;!m.isZero();){var d=m.modrn(c).toString(t);r=(m=m.idivn(c)).isZero()?d+r:f[a-d.length]+d+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}i(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&i(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},n.prototype.toJSON=function(){return this.toString(16,2)},o&&(n.prototype.toBuffer=function(t,e){return this.toArrayLike(o,t,e)}),n.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)};function m(t,e,r){r.negative=e.negative^t.negative;var i=t.length+e.length|0;r.length=i,i=i-1|0;var s=0|t.words[0],n=0|e.words[0],o=s*n,h=67108863&o,u=o/67108864|0;r.words[0]=h;for(var a=1;a<i;a++){for(var c=u>>>26,f=67108863&u,l=Math.min(a,e.length-1),p=Math.max(0,a-t.length+1);p<=l;p++){var m=a-p|0;c+=(o=(s=0|t.words[m])*(n=0|e.words[p])+f)/67108864|0,f=67108863&o}r.words[a]=0|f,u=0|c}return 0!==u?r.words[a]=0|u:r.length--,r._strip()}n.prototype.toArrayLike=function(t,e,r){this._strip();var s=this.byteLength(),n=r||Math.max(1,s);i(s<=n,"byte array longer than desired length"),i(n>0,"Requested array length <= 0");var o=function(t,e){return t.allocUnsafe?t.allocUnsafe(e):new t(e)}(t,n);return this["_toArrayLike"+("le"===e?"LE":"BE")](o,s),o},n.prototype._toArrayLikeLE=function(t,e){for(var r=0,i=0,s=0,n=0;s<this.length;s++){var o=this.words[s]<<n|i;t[r++]=255&o,r<t.length&&(t[r++]=o>>8&255),r<t.length&&(t[r++]=o>>16&255),6===n?(r<t.length&&(t[r++]=o>>24&255),i=0,n=0):(i=o>>>24,n+=2)}if(r<t.length)for(t[r++]=i;r<t.length;)t[r++]=0},n.prototype._toArrayLikeBE=function(t,e){for(var r=t.length-1,i=0,s=0,n=0;s<this.length;s++){var o=this.words[s]<<n|i;t[r--]=255&o,r>=0&&(t[r--]=o>>8&255),r>=0&&(t[r--]=o>>16&255),6===n?(r>=0&&(t[r--]=o>>24&255),i=0,n=0):(i=o>>>24,n+=2)}if(r>=0)for(t[r--]=i;r>=0;)t[r--]=0},Math.clz32?n.prototype._countBits=function(t){return 32-Math.clz32(t)}:n.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},n.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},n.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},n.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return 0!==this.negative},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this._strip()},n.prototype.ior=function(t){return i(0==(this.negative|t.negative)),this.iuor(t)},n.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},n.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},n.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this._strip()},n.prototype.iand=function(t){return i(0==(this.negative|t.negative)),this.iuand(t)},n.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},n.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},n.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var i=0;i<r.length;i++)this.words[i]=e.words[i]^r.words[i];if(this!==e)for(;i<e.length;i++)this.words[i]=e.words[i];return this.length=e.length,this._strip()},n.prototype.ixor=function(t){return i(0==(this.negative|t.negative)),this.iuxor(t)},n.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},n.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},n.prototype.inotn=function(t){i("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var s=0;s<e;s++)this.words[s]=67108863&~this.words[s];return r>0&&(this.words[s]=~this.words[s]&67108863>>26-r),this._strip()},n.prototype.notn=function(t){return this.clone().inotn(t)},n.prototype.setn=function(t,e){i("number"==typeof t&&t>=0);var r=t/26|0,s=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<s:this.words[r]&~(1<<s),this._strip()},n.prototype.iadd=function(t){var e,r,i;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,i=t):(r=t,i=this);for(var s=0,n=0;n<i.length;n++)e=(0|r.words[n])+(0|i.words[n])+s,this.words[n]=67108863&e,s=e>>>26;for(;0!==s&&n<r.length;n++)e=(0|r.words[n])+s,this.words[n]=67108863&e,s=e>>>26;if(this.length=r.length,0!==s)this.words[this.length]=s,this.length++;else if(r!==this)for(;n<r.length;n++)this.words[n]=r.words[n];return this},n.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},n.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,i,s=this.cmp(t);if(0===s)return this.negative=0,this.length=1,this.words[0]=0,this;s>0?(r=this,i=t):(r=t,i=this);for(var n=0,o=0;o<i.length;o++)n=(e=(0|r.words[o])-(0|i.words[o])+n)>>26,this.words[o]=67108863&e;for(;0!==n&&o<r.length;o++)n=(e=(0|r.words[o])+n)>>26,this.words[o]=67108863&e;if(0===n&&o<r.length&&r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this.length=Math.max(this.length,o),r!==this&&(this.negative=1),this._strip()},n.prototype.sub=function(t){return this.clone().isub(t)};var d=function(t,e,r){var i,s,n,o=t.words,h=e.words,u=r.words,a=0,c=0|o[0],f=8191&c,l=c>>>13,p=0|o[1],m=8191&p,d=p>>>13,g=0|o[2],y=8191&g,w=g>>>13,S=0|o[3],b=8191&S,v=S>>>13,_=0|o[4],O=8191&_,E=_>>>13,I=0|o[5],B=8191&I,P=I>>>13,k=0|o[6],R=8191&k,N=k>>>13,A=0|o[7],M=8191&A,x=A>>>13,T=0|o[8],C=8191&T,H=T>>>13,L=0|o[9],F=8191&L,K=L>>>13,U=0|h[0],D=8191&U,V=U>>>13,j=0|h[1],Y=8191&j,G=j>>>13,J=0|h[2],q=8191&J,z=J>>>13,Q=0|h[3],W=8191&Q,X=Q>>>13,Z=0|h[4],$=8191&Z,tt=Z>>>13,et=0|h[5],rt=8191&et,it=et>>>13,st=0|h[6],nt=8191&st,ot=st>>>13,ht=0|h[7],ut=8191&ht,at=ht>>>13,ct=0|h[8],ft=8191&ct,lt=ct>>>13,pt=0|h[9],mt=8191&pt,dt=pt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(a+(i=Math.imul(f,D))|0)+((8191&(s=(s=Math.imul(f,V))+Math.imul(l,D)|0))<<13)|0;a=((n=Math.imul(l,V))+(s>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(m,D),s=(s=Math.imul(m,V))+Math.imul(d,D)|0,n=Math.imul(d,V);var yt=(a+(i=i+Math.imul(f,Y)|0)|0)+((8191&(s=(s=s+Math.imul(f,G)|0)+Math.imul(l,Y)|0))<<13)|0;a=((n=n+Math.imul(l,G)|0)+(s>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(y,D),s=(s=Math.imul(y,V))+Math.imul(w,D)|0,n=Math.imul(w,V),i=i+Math.imul(m,Y)|0,s=(s=s+Math.imul(m,G)|0)+Math.imul(d,Y)|0,n=n+Math.imul(d,G)|0;var wt=(a+(i=i+Math.imul(f,q)|0)|0)+((8191&(s=(s=s+Math.imul(f,z)|0)+Math.imul(l,q)|0))<<13)|0;a=((n=n+Math.imul(l,z)|0)+(s>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(b,D),s=(s=Math.imul(b,V))+Math.imul(v,D)|0,n=Math.imul(v,V),i=i+Math.imul(y,Y)|0,s=(s=s+Math.imul(y,G)|0)+Math.imul(w,Y)|0,n=n+Math.imul(w,G)|0,i=i+Math.imul(m,q)|0,s=(s=s+Math.imul(m,z)|0)+Math.imul(d,q)|0,n=n+Math.imul(d,z)|0;var St=(a+(i=i+Math.imul(f,W)|0)|0)+((8191&(s=(s=s+Math.imul(f,X)|0)+Math.imul(l,W)|0))<<13)|0;a=((n=n+Math.imul(l,X)|0)+(s>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(O,D),s=(s=Math.imul(O,V))+Math.imul(E,D)|0,n=Math.imul(E,V),i=i+Math.imul(b,Y)|0,s=(s=s+Math.imul(b,G)|0)+Math.imul(v,Y)|0,n=n+Math.imul(v,G)|0,i=i+Math.imul(y,q)|0,s=(s=s+Math.imul(y,z)|0)+Math.imul(w,q)|0,n=n+Math.imul(w,z)|0,i=i+Math.imul(m,W)|0,s=(s=s+Math.imul(m,X)|0)+Math.imul(d,W)|0,n=n+Math.imul(d,X)|0;var bt=(a+(i=i+Math.imul(f,$)|0)|0)+((8191&(s=(s=s+Math.imul(f,tt)|0)+Math.imul(l,$)|0))<<13)|0;a=((n=n+Math.imul(l,tt)|0)+(s>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(B,D),s=(s=Math.imul(B,V))+Math.imul(P,D)|0,n=Math.imul(P,V),i=i+Math.imul(O,Y)|0,s=(s=s+Math.imul(O,G)|0)+Math.imul(E,Y)|0,n=n+Math.imul(E,G)|0,i=i+Math.imul(b,q)|0,s=(s=s+Math.imul(b,z)|0)+Math.imul(v,q)|0,n=n+Math.imul(v,z)|0,i=i+Math.imul(y,W)|0,s=(s=s+Math.imul(y,X)|0)+Math.imul(w,W)|0,n=n+Math.imul(w,X)|0,i=i+Math.imul(m,$)|0,s=(s=s+Math.imul(m,tt)|0)+Math.imul(d,$)|0,n=n+Math.imul(d,tt)|0;var vt=(a+(i=i+Math.imul(f,rt)|0)|0)+((8191&(s=(s=s+Math.imul(f,it)|0)+Math.imul(l,rt)|0))<<13)|0;a=((n=n+Math.imul(l,it)|0)+(s>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(R,D),s=(s=Math.imul(R,V))+Math.imul(N,D)|0,n=Math.imul(N,V),i=i+Math.imul(B,Y)|0,s=(s=s+Math.imul(B,G)|0)+Math.imul(P,Y)|0,n=n+Math.imul(P,G)|0,i=i+Math.imul(O,q)|0,s=(s=s+Math.imul(O,z)|0)+Math.imul(E,q)|0,n=n+Math.imul(E,z)|0,i=i+Math.imul(b,W)|0,s=(s=s+Math.imul(b,X)|0)+Math.imul(v,W)|0,n=n+Math.imul(v,X)|0,i=i+Math.imul(y,$)|0,s=(s=s+Math.imul(y,tt)|0)+Math.imul(w,$)|0,n=n+Math.imul(w,tt)|0,i=i+Math.imul(m,rt)|0,s=(s=s+Math.imul(m,it)|0)+Math.imul(d,rt)|0,n=n+Math.imul(d,it)|0;var _t=(a+(i=i+Math.imul(f,nt)|0)|0)+((8191&(s=(s=s+Math.imul(f,ot)|0)+Math.imul(l,nt)|0))<<13)|0;a=((n=n+Math.imul(l,ot)|0)+(s>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(M,D),s=(s=Math.imul(M,V))+Math.imul(x,D)|0,n=Math.imul(x,V),i=i+Math.imul(R,Y)|0,s=(s=s+Math.imul(R,G)|0)+Math.imul(N,Y)|0,n=n+Math.imul(N,G)|0,i=i+Math.imul(B,q)|0,s=(s=s+Math.imul(B,z)|0)+Math.imul(P,q)|0,n=n+Math.imul(P,z)|0,i=i+Math.imul(O,W)|0,s=(s=s+Math.imul(O,X)|0)+Math.imul(E,W)|0,n=n+Math.imul(E,X)|0,i=i+Math.imul(b,$)|0,s=(s=s+Math.imul(b,tt)|0)+Math.imul(v,$)|0,n=n+Math.imul(v,tt)|0,i=i+Math.imul(y,rt)|0,s=(s=s+Math.imul(y,it)|0)+Math.imul(w,rt)|0,n=n+Math.imul(w,it)|0,i=i+Math.imul(m,nt)|0,s=(s=s+Math.imul(m,ot)|0)+Math.imul(d,nt)|0,n=n+Math.imul(d,ot)|0;var Ot=(a+(i=i+Math.imul(f,ut)|0)|0)+((8191&(s=(s=s+Math.imul(f,at)|0)+Math.imul(l,ut)|0))<<13)|0;a=((n=n+Math.imul(l,at)|0)+(s>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,i=Math.imul(C,D),s=(s=Math.imul(C,V))+Math.imul(H,D)|0,n=Math.imul(H,V),i=i+Math.imul(M,Y)|0,s=(s=s+Math.imul(M,G)|0)+Math.imul(x,Y)|0,n=n+Math.imul(x,G)|0,i=i+Math.imul(R,q)|0,s=(s=s+Math.imul(R,z)|0)+Math.imul(N,q)|0,n=n+Math.imul(N,z)|0,i=i+Math.imul(B,W)|0,s=(s=s+Math.imul(B,X)|0)+Math.imul(P,W)|0,n=n+Math.imul(P,X)|0,i=i+Math.imul(O,$)|0,s=(s=s+Math.imul(O,tt)|0)+Math.imul(E,$)|0,n=n+Math.imul(E,tt)|0,i=i+Math.imul(b,rt)|0,s=(s=s+Math.imul(b,it)|0)+Math.imul(v,rt)|0,n=n+Math.imul(v,it)|0,i=i+Math.imul(y,nt)|0,s=(s=s+Math.imul(y,ot)|0)+Math.imul(w,nt)|0,n=n+Math.imul(w,ot)|0,i=i+Math.imul(m,ut)|0,s=(s=s+Math.imul(m,at)|0)+Math.imul(d,ut)|0,n=n+Math.imul(d,at)|0;var Et=(a+(i=i+Math.imul(f,ft)|0)|0)+((8191&(s=(s=s+Math.imul(f,lt)|0)+Math.imul(l,ft)|0))<<13)|0;a=((n=n+Math.imul(l,lt)|0)+(s>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(F,D),s=(s=Math.imul(F,V))+Math.imul(K,D)|0,n=Math.imul(K,V),i=i+Math.imul(C,Y)|0,s=(s=s+Math.imul(C,G)|0)+Math.imul(H,Y)|0,n=n+Math.imul(H,G)|0,i=i+Math.imul(M,q)|0,s=(s=s+Math.imul(M,z)|0)+Math.imul(x,q)|0,n=n+Math.imul(x,z)|0,i=i+Math.imul(R,W)|0,s=(s=s+Math.imul(R,X)|0)+Math.imul(N,W)|0,n=n+Math.imul(N,X)|0,i=i+Math.imul(B,$)|0,s=(s=s+Math.imul(B,tt)|0)+Math.imul(P,$)|0,n=n+Math.imul(P,tt)|0,i=i+Math.imul(O,rt)|0,s=(s=s+Math.imul(O,it)|0)+Math.imul(E,rt)|0,n=n+Math.imul(E,it)|0,i=i+Math.imul(b,nt)|0,s=(s=s+Math.imul(b,ot)|0)+Math.imul(v,nt)|0,n=n+Math.imul(v,ot)|0,i=i+Math.imul(y,ut)|0,s=(s=s+Math.imul(y,at)|0)+Math.imul(w,ut)|0,n=n+Math.imul(w,at)|0,i=i+Math.imul(m,ft)|0,s=(s=s+Math.imul(m,lt)|0)+Math.imul(d,ft)|0,n=n+Math.imul(d,lt)|0;var It=(a+(i=i+Math.imul(f,mt)|0)|0)+((8191&(s=(s=s+Math.imul(f,dt)|0)+Math.imul(l,mt)|0))<<13)|0;a=((n=n+Math.imul(l,dt)|0)+(s>>>13)|0)+(It>>>26)|0,It&=67108863,i=Math.imul(F,Y),s=(s=Math.imul(F,G))+Math.imul(K,Y)|0,n=Math.imul(K,G),i=i+Math.imul(C,q)|0,s=(s=s+Math.imul(C,z)|0)+Math.imul(H,q)|0,n=n+Math.imul(H,z)|0,i=i+Math.imul(M,W)|0,s=(s=s+Math.imul(M,X)|0)+Math.imul(x,W)|0,n=n+Math.imul(x,X)|0,i=i+Math.imul(R,$)|0,s=(s=s+Math.imul(R,tt)|0)+Math.imul(N,$)|0,n=n+Math.imul(N,tt)|0,i=i+Math.imul(B,rt)|0,s=(s=s+Math.imul(B,it)|0)+Math.imul(P,rt)|0,n=n+Math.imul(P,it)|0,i=i+Math.imul(O,nt)|0,s=(s=s+Math.imul(O,ot)|0)+Math.imul(E,nt)|0,n=n+Math.imul(E,ot)|0,i=i+Math.imul(b,ut)|0,s=(s=s+Math.imul(b,at)|0)+Math.imul(v,ut)|0,n=n+Math.imul(v,at)|0,i=i+Math.imul(y,ft)|0,s=(s=s+Math.imul(y,lt)|0)+Math.imul(w,ft)|0,n=n+Math.imul(w,lt)|0;var Bt=(a+(i=i+Math.imul(m,mt)|0)|0)+((8191&(s=(s=s+Math.imul(m,dt)|0)+Math.imul(d,mt)|0))<<13)|0;a=((n=n+Math.imul(d,dt)|0)+(s>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(F,q),s=(s=Math.imul(F,z))+Math.imul(K,q)|0,n=Math.imul(K,z),i=i+Math.imul(C,W)|0,s=(s=s+Math.imul(C,X)|0)+Math.imul(H,W)|0,n=n+Math.imul(H,X)|0,i=i+Math.imul(M,$)|0,s=(s=s+Math.imul(M,tt)|0)+Math.imul(x,$)|0,n=n+Math.imul(x,tt)|0,i=i+Math.imul(R,rt)|0,s=(s=s+Math.imul(R,it)|0)+Math.imul(N,rt)|0,n=n+Math.imul(N,it)|0,i=i+Math.imul(B,nt)|0,s=(s=s+Math.imul(B,ot)|0)+Math.imul(P,nt)|0,n=n+Math.imul(P,ot)|0,i=i+Math.imul(O,ut)|0,s=(s=s+Math.imul(O,at)|0)+Math.imul(E,ut)|0,n=n+Math.imul(E,at)|0,i=i+Math.imul(b,ft)|0,s=(s=s+Math.imul(b,lt)|0)+Math.imul(v,ft)|0,n=n+Math.imul(v,lt)|0;var Pt=(a+(i=i+Math.imul(y,mt)|0)|0)+((8191&(s=(s=s+Math.imul(y,dt)|0)+Math.imul(w,mt)|0))<<13)|0;a=((n=n+Math.imul(w,dt)|0)+(s>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,i=Math.imul(F,W),s=(s=Math.imul(F,X))+Math.imul(K,W)|0,n=Math.imul(K,X),i=i+Math.imul(C,$)|0,s=(s=s+Math.imul(C,tt)|0)+Math.imul(H,$)|0,n=n+Math.imul(H,tt)|0,i=i+Math.imul(M,rt)|0,s=(s=s+Math.imul(M,it)|0)+Math.imul(x,rt)|0,n=n+Math.imul(x,it)|0,i=i+Math.imul(R,nt)|0,s=(s=s+Math.imul(R,ot)|0)+Math.imul(N,nt)|0,n=n+Math.imul(N,ot)|0,i=i+Math.imul(B,ut)|0,s=(s=s+Math.imul(B,at)|0)+Math.imul(P,ut)|0,n=n+Math.imul(P,at)|0,i=i+Math.imul(O,ft)|0,s=(s=s+Math.imul(O,lt)|0)+Math.imul(E,ft)|0,n=n+Math.imul(E,lt)|0;var kt=(a+(i=i+Math.imul(b,mt)|0)|0)+((8191&(s=(s=s+Math.imul(b,dt)|0)+Math.imul(v,mt)|0))<<13)|0;a=((n=n+Math.imul(v,dt)|0)+(s>>>13)|0)+(kt>>>26)|0,kt&=67108863,i=Math.imul(F,$),s=(s=Math.imul(F,tt))+Math.imul(K,$)|0,n=Math.imul(K,tt),i=i+Math.imul(C,rt)|0,s=(s=s+Math.imul(C,it)|0)+Math.imul(H,rt)|0,n=n+Math.imul(H,it)|0,i=i+Math.imul(M,nt)|0,s=(s=s+Math.imul(M,ot)|0)+Math.imul(x,nt)|0,n=n+Math.imul(x,ot)|0,i=i+Math.imul(R,ut)|0,s=(s=s+Math.imul(R,at)|0)+Math.imul(N,ut)|0,n=n+Math.imul(N,at)|0,i=i+Math.imul(B,ft)|0,s=(s=s+Math.imul(B,lt)|0)+Math.imul(P,ft)|0,n=n+Math.imul(P,lt)|0;var Rt=(a+(i=i+Math.imul(O,mt)|0)|0)+((8191&(s=(s=s+Math.imul(O,dt)|0)+Math.imul(E,mt)|0))<<13)|0;a=((n=n+Math.imul(E,dt)|0)+(s>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,i=Math.imul(F,rt),s=(s=Math.imul(F,it))+Math.imul(K,rt)|0,n=Math.imul(K,it),i=i+Math.imul(C,nt)|0,s=(s=s+Math.imul(C,ot)|0)+Math.imul(H,nt)|0,n=n+Math.imul(H,ot)|0,i=i+Math.imul(M,ut)|0,s=(s=s+Math.imul(M,at)|0)+Math.imul(x,ut)|0,n=n+Math.imul(x,at)|0,i=i+Math.imul(R,ft)|0,s=(s=s+Math.imul(R,lt)|0)+Math.imul(N,ft)|0,n=n+Math.imul(N,lt)|0;var Nt=(a+(i=i+Math.imul(B,mt)|0)|0)+((8191&(s=(s=s+Math.imul(B,dt)|0)+Math.imul(P,mt)|0))<<13)|0;a=((n=n+Math.imul(P,dt)|0)+(s>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,i=Math.imul(F,nt),s=(s=Math.imul(F,ot))+Math.imul(K,nt)|0,n=Math.imul(K,ot),i=i+Math.imul(C,ut)|0,s=(s=s+Math.imul(C,at)|0)+Math.imul(H,ut)|0,n=n+Math.imul(H,at)|0,i=i+Math.imul(M,ft)|0,s=(s=s+Math.imul(M,lt)|0)+Math.imul(x,ft)|0,n=n+Math.imul(x,lt)|0;var At=(a+(i=i+Math.imul(R,mt)|0)|0)+((8191&(s=(s=s+Math.imul(R,dt)|0)+Math.imul(N,mt)|0))<<13)|0;a=((n=n+Math.imul(N,dt)|0)+(s>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(F,ut),s=(s=Math.imul(F,at))+Math.imul(K,ut)|0,n=Math.imul(K,at),i=i+Math.imul(C,ft)|0,s=(s=s+Math.imul(C,lt)|0)+Math.imul(H,ft)|0,n=n+Math.imul(H,lt)|0;var Mt=(a+(i=i+Math.imul(M,mt)|0)|0)+((8191&(s=(s=s+Math.imul(M,dt)|0)+Math.imul(x,mt)|0))<<13)|0;a=((n=n+Math.imul(x,dt)|0)+(s>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(F,ft),s=(s=Math.imul(F,lt))+Math.imul(K,ft)|0,n=Math.imul(K,lt);var xt=(a+(i=i+Math.imul(C,mt)|0)|0)+((8191&(s=(s=s+Math.imul(C,dt)|0)+Math.imul(H,mt)|0))<<13)|0;a=((n=n+Math.imul(H,dt)|0)+(s>>>13)|0)+(xt>>>26)|0,xt&=67108863;var Tt=(a+(i=Math.imul(F,mt))|0)+((8191&(s=(s=Math.imul(F,dt))+Math.imul(K,mt)|0))<<13)|0;return a=((n=Math.imul(K,dt))+(s>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,u[0]=gt,u[1]=yt,u[2]=wt,u[3]=St,u[4]=bt,u[5]=vt,u[6]=_t,u[7]=Ot,u[8]=Et,u[9]=It,u[10]=Bt,u[11]=Pt,u[12]=kt,u[13]=Rt,u[14]=Nt,u[15]=At,u[16]=Mt,u[17]=xt,u[18]=Tt,0!==a&&(u[19]=a,r.length++),r};function g(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var i=0,s=0,n=0;n<r.length-1;n++){var o=s;s=0;for(var h=67108863&i,u=Math.min(n,e.length-1),a=Math.max(0,n-t.length+1);a<=u;a++){var c=n-a,f=(0|t.words[c])*(0|e.words[a]),l=67108863&f;h=67108863&(l=l+h|0),s+=(o=(o=o+(f/67108864|0)|0)+(l>>>26)|0)>>>26,o&=67108863}r.words[n]=h,i=o,o=s}return 0!==i?r.words[n]=i:r.length--,r._strip()}function y(t,e,r){return g(t,e,r)}function w(t,e){this.x=t,this.y=e}Math.imul||(d=m),n.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?d(this,t,e):r<63?m(this,t,e):r<1024?g(this,t,e):y(this,t,e)},w.prototype.makeRBT=function(t){for(var e=new Array(t),r=n.prototype._countBits(t)-1,i=0;i<t;i++)e[i]=this.revBin(i,r,t);return e},w.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var i=0,s=0;s<e;s++)i|=(1&t)<<e-s-1,t>>=1;return i},w.prototype.permute=function(t,e,r,i,s,n){for(var o=0;o<n;o++)i[o]=e[t[o]],s[o]=r[t[o]]},w.prototype.transform=function(t,e,r,i,s,n){this.permute(n,t,e,r,i,s);for(var o=1;o<s;o<<=1)for(var h=o<<1,u=Math.cos(2*Math.PI/h),a=Math.sin(2*Math.PI/h),c=0;c<s;c+=h)for(var f=u,l=a,p=0;p<o;p++){var m=r[c+p],d=i[c+p],g=r[c+p+o],y=i[c+p+o],w=f*g-l*y;y=f*y+l*g,g=w,r[c+p]=m+g,i[c+p]=d+y,r[c+p+o]=m-g,i[c+p+o]=d-y,p!==h&&(w=u*f-a*l,l=u*l+a*f,f=w)}},w.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),i=1&r,s=0;for(r=r/2|0;r;r>>>=1)s++;return 1<<s+1+i},w.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var i=0;i<r/2;i++){var s=t[i];t[i]=t[r-i-1],t[r-i-1]=s,s=e[i],e[i]=-e[r-i-1],e[r-i-1]=-s}},w.prototype.normalize13b=function(t,e){for(var r=0,i=0;i<e/2;i++){var s=8192*Math.round(t[2*i+1]/e)+Math.round(t[2*i]/e)+r;t[i]=67108863&s,r=s<67108864?0:s/67108864|0}return t},w.prototype.convert13b=function(t,e,r,s){for(var n=0,o=0;o<e;o++)n+=0|t[o],r[2*o]=8191&n,n>>>=13,r[2*o+1]=8191&n,n>>>=13;for(o=2*e;o<s;++o)r[o]=0;i(0===n),i(0==(-8192&n))},w.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},w.prototype.mulp=function(t,e,r){var i=2*this.guessLen13b(t.length,e.length),s=this.makeRBT(i),n=this.stub(i),o=new Array(i),h=new Array(i),u=new Array(i),a=new Array(i),c=new Array(i),f=new Array(i),l=r.words;l.length=i,this.convert13b(t.words,t.length,o,i),this.convert13b(e.words,e.length,a,i),this.transform(o,n,h,u,i,s),this.transform(a,n,c,f,i,s);for(var p=0;p<i;p++){var m=h[p]*c[p]-u[p]*f[p];u[p]=h[p]*f[p]+u[p]*c[p],h[p]=m}return this.conjugate(h,u,i),this.transform(h,u,l,n,i,s),this.conjugate(l,n,i),this.normalize13b(l,i),r.negative=t.negative^e.negative,r.length=t.length+e.length,r._strip()},n.prototype.mul=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},n.prototype.mulf=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),y(this,t,e)},n.prototype.imul=function(t){return this.clone().mulTo(t,this)},n.prototype.imuln=function(t){var e=t<0;e&&(t=-t),i("number"==typeof t),i(t<67108864);for(var r=0,s=0;s<this.length;s++){var n=(0|this.words[s])*t,o=(67108863&n)+(67108863&r);r>>=26,r+=n/67108864|0,r+=o>>>26,this.words[s]=67108863&o}return 0!==r&&(this.words[s]=r,this.length++),e?this.ineg():this},n.prototype.muln=function(t){return this.clone().imuln(t)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var i=r/26|0,s=r%26;e[r]=t.words[i]>>>s&1}return e}(t);if(0===e.length)return new n(1);for(var r=this,i=0;i<e.length&&0===e[i];i++,r=r.sqr());if(++i<e.length)for(var s=r.sqr();i<e.length;i++,s=s.sqr())0!==e[i]&&(r=r.mul(s));return r},n.prototype.iushln=function(t){i("number"==typeof t&&t>=0);var e,r=t%26,s=(t-r)/26,n=67108863>>>26-r<<26-r;if(0!==r){var o=0;for(e=0;e<this.length;e++){var h=this.words[e]&n,u=(0|this.words[e])-h<<r;this.words[e]=u|o,o=h>>>26-r}o&&(this.words[e]=o,this.length++)}if(0!==s){for(e=this.length-1;e>=0;e--)this.words[e+s]=this.words[e];for(e=0;e<s;e++)this.words[e]=0;this.length+=s}return this._strip()},n.prototype.ishln=function(t){return i(0===this.negative),this.iushln(t)},n.prototype.iushrn=function(t,e,r){var s;i("number"==typeof t&&t>=0),s=e?(e-e%26)/26:0;var n=t%26,o=Math.min((t-n)/26,this.length),h=67108863^67108863>>>n<<n,u=r;if(s-=o,s=Math.max(0,s),u){for(var a=0;a<o;a++)u.words[a]=this.words[a];u.length=o}if(0===o);else if(this.length>o)for(this.length-=o,a=0;a<this.length;a++)this.words[a]=this.words[a+o];else this.words[0]=0,this.length=1;var c=0;for(a=this.length-1;a>=0&&(0!==c||a>=s);a--){var f=0|this.words[a];this.words[a]=c<<26-n|f>>>n,c=f&h}return u&&0!==c&&(u.words[u.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},n.prototype.ishrn=function(t,e,r){return i(0===this.negative),this.iushrn(t,e,r)},n.prototype.shln=function(t){return this.clone().ishln(t)},n.prototype.ushln=function(t){return this.clone().iushln(t)},n.prototype.shrn=function(t){return this.clone().ishrn(t)},n.prototype.ushrn=function(t){return this.clone().iushrn(t)},n.prototype.testn=function(t){i("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,s=1<<e;return!(this.length<=r)&&!!(this.words[r]&s)},n.prototype.imaskn=function(t){i("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(i(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var s=67108863^67108863>>>e<<e;this.words[this.length-1]&=s}return this._strip()},n.prototype.maskn=function(t){return this.clone().imaskn(t)},n.prototype.iaddn=function(t){return i("number"==typeof t),i(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},n.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},n.prototype.isubn=function(t){if(i("number"==typeof t),i(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},n.prototype.addn=function(t){return this.clone().iaddn(t)},n.prototype.subn=function(t){return this.clone().isubn(t)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(t,e,r){var s,n,o=t.length+r;this._expand(o);var h=0;for(s=0;s<t.length;s++){n=(0|this.words[s+r])+h;var u=(0|t.words[s])*e;h=((n-=67108863&u)>>26)-(u/67108864|0),this.words[s+r]=67108863&n}for(;s<this.length-r;s++)h=(n=(0|this.words[s+r])+h)>>26,this.words[s+r]=67108863&n;if(0===h)return this._strip();for(i(-1===h),h=0,s=0;s<this.length;s++)h=(n=-(0|this.words[s])+h)>>26,this.words[s]=67108863&n;return this.negative=1,this._strip()},n.prototype._wordDiv=function(t,e){var r=(this.length,t.length),i=this.clone(),s=t,o=0|s.words[s.length-1];0!==(r=26-this._countBits(o))&&(s=s.ushln(r),i.iushln(r),o=0|s.words[s.length-1]);var h,u=i.length-s.length;if("mod"!==e){(h=new n(null)).length=u+1,h.words=new Array(h.length);for(var a=0;a<h.length;a++)h.words[a]=0}var c=i.clone()._ishlnsubmul(s,1,u);0===c.negative&&(i=c,h&&(h.words[u]=1));for(var f=u-1;f>=0;f--){var l=67108864*(0|i.words[s.length+f])+(0|i.words[s.length+f-1]);for(l=Math.min(l/o|0,67108863),i._ishlnsubmul(s,l,f);0!==i.negative;)l--,i.negative=0,i._ishlnsubmul(s,1,f),i.isZero()||(i.negative^=1);h&&(h.words[f]=l)}return h&&h._strip(),i._strip(),"div"!==e&&0!==r&&i.iushrn(r),{div:h||null,mod:i}},n.prototype.divmod=function(t,e,r){return i(!t.isZero()),this.isZero()?{div:new n(0),mod:new n(0)}:0!==this.negative&&0===t.negative?(h=this.neg().divmod(t,e),"mod"!==e&&(s=h.div.neg()),"div"!==e&&(o=h.mod.neg(),r&&0!==o.negative&&o.iadd(t)),{div:s,mod:o}):0===this.negative&&0!==t.negative?(h=this.divmod(t.neg(),e),"mod"!==e&&(s=h.div.neg()),{div:s,mod:h.mod}):0!=(this.negative&t.negative)?(h=this.neg().divmod(t.neg(),e),"div"!==e&&(o=h.mod.neg(),r&&0!==o.negative&&o.isub(t)),{div:h.div,mod:o}):t.length>this.length||this.cmp(t)<0?{div:new n(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new n(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new n(this.modrn(t.words[0]))}:this._wordDiv(t,e);var s,o,h},n.prototype.div=function(t){return this.divmod(t,"div",!1).div},n.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},n.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},n.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,i=t.ushrn(1),s=t.andln(1),n=r.cmp(i);return n<0||1===s&&0===n?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},n.prototype.modrn=function(t){var e=t<0;e&&(t=-t),i(t<=67108863);for(var r=(1<<26)%t,s=0,n=this.length-1;n>=0;n--)s=(r*s+(0|this.words[n]))%t;return e?-s:s},n.prototype.modn=function(t){return this.modrn(t)},n.prototype.idivn=function(t){var e=t<0;e&&(t=-t),i(t<=67108863);for(var r=0,s=this.length-1;s>=0;s--){var n=(0|this.words[s])+67108864*r;this.words[s]=n/t|0,r=n%t}return this._strip(),e?this.ineg():this},n.prototype.divn=function(t){return this.clone().idivn(t)},n.prototype.egcd=function(t){i(0===t.negative),i(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var s=new n(1),o=new n(0),h=new n(0),u=new n(1),a=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++a;for(var c=r.clone(),f=e.clone();!e.isZero();){for(var l=0,p=1;0==(e.words[0]&p)&&l<26;++l,p<<=1);if(l>0)for(e.iushrn(l);l-- >0;)(s.isOdd()||o.isOdd())&&(s.iadd(c),o.isub(f)),s.iushrn(1),o.iushrn(1);for(var m=0,d=1;0==(r.words[0]&d)&&m<26;++m,d<<=1);if(m>0)for(r.iushrn(m);m-- >0;)(h.isOdd()||u.isOdd())&&(h.iadd(c),u.isub(f)),h.iushrn(1),u.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(h),o.isub(u)):(r.isub(e),h.isub(s),u.isub(o))}return{a:h,b:u,gcd:r.iushln(a)}},n.prototype._invmp=function(t){i(0===t.negative),i(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var s,o=new n(1),h=new n(0),u=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var a=0,c=1;0==(e.words[0]&c)&&a<26;++a,c<<=1);if(a>0)for(e.iushrn(a);a-- >0;)o.isOdd()&&o.iadd(u),o.iushrn(1);for(var f=0,l=1;0==(r.words[0]&l)&&f<26;++f,l<<=1);if(f>0)for(r.iushrn(f);f-- >0;)h.isOdd()&&h.iadd(u),h.iushrn(1);e.cmp(r)>=0?(e.isub(r),o.isub(h)):(r.isub(e),h.isub(o))}return(s=0===e.cmpn(1)?o:h).cmpn(0)<0&&s.iadd(t),s},n.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var i=0;e.isEven()&&r.isEven();i++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var s=e.cmp(r);if(s<0){var n=e;e=r,r=n}else if(0===s||0===r.cmpn(1))break;e.isub(r)}return r.iushln(i)},n.prototype.invm=function(t){return this.egcd(t).a.umod(t)},n.prototype.isEven=function(){return 0==(1&this.words[0])},n.prototype.isOdd=function(){return 1==(1&this.words[0])},n.prototype.andln=function(t){return this.words[0]&t},n.prototype.bincn=function(t){i("number"==typeof t);var e=t%26,r=(t-e)/26,s=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=s,this;for(var n=s,o=r;0!==n&&o<this.length;o++){var h=0|this.words[o];n=(h+=n)>>>26,h&=67108863,this.words[o]=h}return 0!==n&&(this.words[o]=n,this.length++),this},n.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},n.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this._strip(),this.length>1)e=1;else{r&&(t=-t),i(t<=67108863,"Number is too big");var s=0|this.words[0];e=s===t?0:s<t?-1:1}return 0!==this.negative?0|-e:e},n.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},n.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var i=0|this.words[r],s=0|t.words[r];if(i!==s){i<s?e=-1:i>s&&(e=1);break}}return e},n.prototype.gtn=function(t){return 1===this.cmpn(t)},n.prototype.gt=function(t){return 1===this.cmp(t)},n.prototype.gten=function(t){return this.cmpn(t)>=0},n.prototype.gte=function(t){return this.cmp(t)>=0},n.prototype.ltn=function(t){return-1===this.cmpn(t)},n.prototype.lt=function(t){return-1===this.cmp(t)},n.prototype.lten=function(t){return this.cmpn(t)<=0},n.prototype.lte=function(t){return this.cmp(t)<=0},n.prototype.eqn=function(t){return 0===this.cmpn(t)},n.prototype.eq=function(t){return 0===this.cmp(t)},n.red=function(t){return new I(t)},n.prototype.toRed=function(t){return i(!this.red,"Already a number in reduction context"),i(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},n.prototype.fromRed=function(){return i(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(t){return this.red=t,this},n.prototype.forceRed=function(t){return i(!this.red,"Already a number in reduction context"),this._forceRed(t)},n.prototype.redAdd=function(t){return i(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},n.prototype.redIAdd=function(t){return i(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},n.prototype.redSub=function(t){return i(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},n.prototype.redISub=function(t){return i(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},n.prototype.redShl=function(t){return i(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},n.prototype.redMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},n.prototype.redIMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},n.prototype.redSqr=function(){return i(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return i(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return i(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return i(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return i(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(t){return i(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var S={k256:null,p224:null,p192:null,p25519:null};function b(t,e){this.name=t,this.p=new n(e,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){b.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function _(){b.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function O(){b.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function E(){b.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function I(t){if("string"==typeof t){var e=n._prime(t);this.m=e.p,this.prime=e}else i(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function B(t){I.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}b.prototype._tmp=function(){var t=new n(null);return t.words=new Array(Math.ceil(this.n/13)),t},b.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var i=e<this.n?-1:r.ucmp(this.p);return 0===i?(r.words[0]=0,r.length=1):i>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},b.prototype.split=function(t,e){t.iushrn(this.n,0,e)},b.prototype.imulK=function(t){return t.imul(this.k)},s(v,b),v.prototype.split=function(t,e){for(var r=Math.min(t.length,9),i=0;i<r;i++)e.words[i]=t.words[i];if(e.length=r,t.length<=9)return t.words[0]=0,void(t.length=1);var s=t.words[9];for(e.words[e.length++]=4194303&s,i=10;i<t.length;i++){var n=0|t.words[i];t.words[i-10]=(4194303&n)<<4|s>>>22,s=n}s>>>=22,t.words[i-10]=s,0===s&&t.length>10?t.length-=10:t.length-=9},v.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var i=0|t.words[r];e+=977*i,t.words[r]=67108863&e,e=64*i+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},s(_,b),s(O,b),s(E,b),E.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var i=19*(0|t.words[r])+e,s=67108863&i;i>>>=26,t.words[r]=s,e=i}return 0!==e&&(t.words[t.length++]=e),t},n._prime=function(t){if(S[t])return S[t];var e;if("k256"===t)e=new v;else if("p224"===t)e=new _;else if("p192"===t)e=new O;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new E}return S[t]=e,e},I.prototype._verify1=function(t){i(0===t.negative,"red works only with positives"),i(t.red,"red works only with red numbers")},I.prototype._verify2=function(t,e){i(0==(t.negative|e.negative),"red works only with positives"),i(t.red&&t.red===e.red,"red works only with red numbers")},I.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(a(t,t.umod(this.m)._forceRed(this)),t)},I.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},I.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},I.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},I.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},I.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},I.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},I.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},I.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},I.prototype.isqr=function(t){return this.imul(t,t.clone())},I.prototype.sqr=function(t){return this.mul(t,t)},I.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(i(e%2==1),3===e){var r=this.m.add(new n(1)).iushrn(2);return this.pow(t,r)}for(var s=this.m.subn(1),o=0;!s.isZero()&&0===s.andln(1);)o++,s.iushrn(1);i(!s.isZero());var h=new n(1).toRed(this),u=h.redNeg(),a=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new n(2*c*c).toRed(this);0!==this.pow(c,a).cmp(u);)c.redIAdd(u);for(var f=this.pow(c,s),l=this.pow(t,s.addn(1).iushrn(1)),p=this.pow(t,s),m=o;0!==p.cmp(h);){for(var d=p,g=0;0!==d.cmp(h);g++)d=d.redSqr();i(g<m);var y=this.pow(f,new n(1).iushln(m-g-1));l=l.redMul(y),f=y.redSqr(),p=p.redMul(f),m=g}return l},I.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},I.prototype.pow=function(t,e){if(e.isZero())return new n(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new n(1).toRed(this),r[1]=t;for(var i=2;i<r.length;i++)r[i]=this.mul(r[i-1],t);var s=r[0],o=0,h=0,u=e.bitLength()%26;for(0===u&&(u=26),i=e.length-1;i>=0;i--){for(var a=e.words[i],c=u-1;c>=0;c--){var f=a>>c&1;s!==r[0]&&(s=this.sqr(s)),0!==f||0!==o?(o<<=1,o|=f,(4===++h||0===i&&0===c)&&(s=this.mul(s,r[o]),h=0,o=0)):h=0}u=26}return s},I.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},I.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},n.mont=function(t){return new B(t)},s(B,I),B.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},B.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},B.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),s=r.isub(i).iushrn(this.shift),n=s;return s.cmp(this.m)>=0?n=s.isub(this.m):s.cmpn(0)<0&&(n=s.iadd(this.m)),n._forceRed(this)},B.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new n(0)._forceRed(this);var r=t.mul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),s=r.isub(i).iushrn(this.shift),o=s;return s.cmp(this.m)>=0?o=s.isub(this.m):s.cmpn(0)<0&&(o=s.iadd(this.m)),o._forceRed(this)},B.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,r(33)(t))},121:function(t,e,r){"use strict";
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */function i(t,e){if("function"!=typeof t)throw new TypeError("argument fn must be a function");return t}function s(t,e,r){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("argument obj must be object");var i=Object.getOwnPropertyDescriptor(t,e);if(!i)throw new TypeError("must call property on owner object");if(!i.configurable)throw new TypeError("property must be configurable")}t.exports=function(t){if(!t)throw new TypeError("argument namespace is required");function e(t){}return e._file=void 0,e._ignored=!0,e._namespace=t,e._traced=!1,e._warned=Object.create(null),e.function=i,e.property=s,e}},16:function(t,e,r){"use strict";r.r(e),function(t,i){r.d(e,"Ach",(function(){return wt})),r.d(e,"Address",(function(){return q})),r.d(e,"Aes",(function(){return dt})),r.d(e,"Aescbc",(function(){return yt})),r.d(e,"Base58",(function(){return P})),r.d(e,"Base58Check",(function(){return x})),r.d(e,"Bip32",(function(){return z})),r.d(e,"Bip39",(function(){return W})),r.d(e,"Block",(function(){return ut})),r.d(e,"BlockHeader",(function(){return et})),r.d(e,"Bn",(function(){return v})),r.d(e,"Br",(function(){return E})),r.d(e,"Bsm",(function(){return tt})),r.d(e,"Bw",(function(){return I})),r.d(e,"Cbc",(function(){return gt})),r.d(e,"Constants",(function(){return H})),r.d(e,"Ecdsa",(function(){return $})),r.d(e,"Ecies",(function(){return St})),r.d(e,"Hash",(function(){return M})),r.d(e,"Interp",(function(){return at})),r.d(e,"KeyPair",(function(){return Z})),r.d(e,"OpCode",(function(){return F})),r.d(e,"Point",(function(){return D})),r.d(e,"PrivKey",(function(){return Y})),r.d(e,"PubKey",(function(){return V})),r.d(e,"Random",(function(){return j})),r.d(e,"Script",(function(){return J})),r.d(e,"Sig",(function(){return G})),r.d(e,"Struct",(function(){return B})),r.d(e,"Tx",(function(){return ht})),r.d(e,"TxBuilder",(function(){return pt})),r.d(e,"TxIn",(function(){return nt})),r.d(e,"TxOut",(function(){return ot})),r.d(e,"TxOutMap",(function(){return ft})),r.d(e,"TxVerifier",(function(){return mt})),r.d(e,"VarInt",(function(){return st})),r.d(e,"Workers",(function(){return A})),r.d(e,"WorkersResult",(function(){return R})),r.d(e,"cmp",(function(){return k})),r.d(e,"deps",(function(){return bt})),r.d(e,"en",(function(){return Q})),r.d(e,"jp",(function(){return X})),r.d(e,"version",(function(){return b}));var s=r(22),n=r.n(s),o=r(1),h=r.n(o),u=r(23),a=r.n(u),c=r(30),f=r.n(c),l=r(8),p=r.n(l),m=r(31),d=r.n(m),g=r(24),y=r.n(g),w=r(62),S=r.n(w),b="2.0.0-beta.43";function v(t,e,...r){if(!(this instanceof v))return new v(t,e,...r);h.a.call(this,t,e,...r)}function _(e){const r=t.alloc(e.length);for(let t=0;t<e.length;t++)r[t]=e[e.length-1-t];return r}function O(t){v.prototype["_"+t]=v.prototype[t];v.prototype[t]=function(e){return"string"==typeof e?e=new v(e):"number"==typeof e&&(e=new v(e.toString())),this["_"+t](e)}}Object.keys(h.a).forEach((function(t){v[t]=h.a[t]})),v.prototype=Object.create(h.a.prototype),v.prototype.constructor=v,v.prototype.fromHex=function(e,r){return this.fromBuffer(t.from(e,"hex"),r)},v.prototype.toHex=function(t){return this.toBuffer(t).toString("hex")},v.prototype.toJSON=function(){return this.toString()},v.prototype.fromJSON=function(t){return v(t).copy(this),this},v.prototype.fromNumber=function(t){return v(t).copy(this),this},v.prototype.toNumber=function(){return parseInt(this.toString(10),10)},v.prototype.fromString=function(t,e){return v(t,e).copy(this),this},v.fromBuffer=function(t,e={endian:"big"}){"little"===e.endian&&(t=_(t));return new v(t.toString("hex"),16)},v.prototype.fromBuffer=function(t,e){return v.fromBuffer(t,e).copy(this),this},v.prototype.toBuffer=function(e={size:void 0,endian:"big"}){let r;if(e.size){const i=this.toString(16,2),s=i.length/2;if(r=t.from(i,"hex"),s===e.size);else if(s>e.size)r=r.slice(s-r.length,r.length);else if(s<e.size){const i=t.alloc(e.size);for(let t=0;t<r.length;t++)i[i.length-1-t]=r[r.length-1-t];for(let t=0;t<e.size-s;t++)i[t]=0;r=i}}else{const e=this.toString(16,2);r=t.from(e,"hex")}"little"===e.endian&&(r=_(r));const i=t.from([0]);return 0===t.compare(r,i)?t.from([]):r},v.prototype.toFastBuffer=v.prototype.toBuffer,v.fromFastBuffer=v.fromBuffer,v.prototype.fromFastBuffer=v.prototype.fromBuffer,v.prototype.fromSm=function(e,r={endian:"big"}){0===e.length&&this.fromBuffer(t.from([0]));return"little"===r.endian&&(e=_(e)),128&e[0]?(e[0]=127&e[0],this.fromBuffer(e),this.neg().copy(this)):this.fromBuffer(e),this},v.prototype.toSm=function(e={endian:"big"}){const r=e.endian;let i;return-1===this.cmp(0)?(i=this.neg().toBuffer(),128&i[0]?i=t.concat([t.from([128]),i]):i[0]=128|i[0]):(i=this.toBuffer(),128&i[0]&&(i=t.concat([t.from([0]),i]))),1===i.length&0===i[0]&&(i=t.from([])),"little"===r&&(i=_(i)),i},v.prototype.fromBits=function(e,r={strict:!1}){let i=t.alloc(4);if(i.writeUInt32BE(e,0),e=i.readInt32BE(0),r.strict&&8388608&e)throw new Error("negative bit set");const s=e>>24,n=8388607&e;if(i=t.alloc(4),i.writeInt32BE(n),s<=3)i=i.slice(1,s+1);else{const e=t.alloc(s-3);e.fill(0),i=t.concat([i,e])}return this.fromBuffer(i),8388608&e&&v(0).sub(this).copy(this),this},v.prototype.toBits=function(){let e;e=this.lt(0)?this.neg().toBuffer():this.toBuffer();let r,i=e.length;if(i>3)r=t.concat([t.from([0]),e.slice(0,3)]).readUInt32BE(0);else if(i<=3){const s=t.alloc(3-i+1);s.fill(0),r=t.concat([s,e.slice(0,i)]).readUInt32BE(0)}8388608&r&&(r>>=8,i++),this.lt(0)&&(r|=8388608);const s=i<<24|r;return e=t.alloc(4),e.writeInt32BE(s,0),e.readUInt32BE(0)},v.prototype.fromScriptNumBuffer=function(t,e,r){if(void 0===r&&(r=4),t.length>r)throw new Error("script number overflow");if(e&&t.length>0&&0==(127&t[t.length-1])&&(t.length<=1||0==(128&t[t.length-2])))throw new Error("non-minimally encoded script number");return this.fromSm(t,{endian:"little"})},v.prototype.toScriptNumBuffer=function(t){return this.toSm({endian:"little"})},v.prototype.neg=function(){const t=h.a.prototype.neg.call(this),e=Object.create(v.prototype);return t.copy(e),e},v.prototype.add=function(t){const e=h.a.prototype.add.call(this,t);return t=Object.create(v.prototype),e.copy(t),t},v.prototype.sub=function(t){const e=h.a.prototype.sub.call(this,t);return t=Object.create(v.prototype),e.copy(t),t},v.prototype.mul=function(t){const e=h.a.prototype.mul.call(this,t);return t=Object.create(v.prototype),e.copy(t),t},v.prototype.mod=function(t){const e=h.a.prototype.mod.call(this,t);return t=Object.create(v.prototype),e.copy(t),t},v.prototype.umod=function(t){const e=h.a.prototype.umod.call(this,t);return t=Object.create(v.prototype),e.copy(t),t},v.prototype.invm=function(t){const e=h.a.prototype.invm.call(this,t);return t=Object.create(v.prototype),e.copy(t),t},v.prototype.div=function(t){const e=h.a.prototype.div.call(this,t);return t=Object.create(v.prototype),e.copy(t),t},v.prototype.ushln=function(t){const e=h.a.prototype.ushln.call(this,t),r=Object.create(v.prototype);return e.copy(r),r},v.prototype.ushrn=function(t){const e=h.a.prototype.ushrn.call(this,t),r=Object.create(v.prototype);return e.copy(r),r},v.prototype.cmp=function(t){return h.a.prototype.cmp.call(this,t)},v.prototype.eq=function(t){return 0===this.cmp(t)},v.prototype.neq=function(t){return 0!==this.cmp(t)},v.prototype.gt=function(t){return this.cmp(t)>0},v.prototype.geq=function(t){return this.cmp(t)>=0},v.prototype.lt=function(t){return this.cmp(t)<0},v.prototype.leq=function(t){return this.cmp(t)<=0},O("add"),O("sub"),O("mul"),O("mod"),O("invm"),O("div"),O("cmp"),O("gt"),O("geq"),O("lt"),O("leq");class E{constructor(t){this.fromObject({buf:t})}fromObject(t){return this.buf=t.buf||this.buf||void 0,this.pos=t.pos||this.pos||0,this}eof(){return this.pos>=this.buf.length}read(t=this.buf.length){const e=this.buf.slice(this.pos,this.pos+t);return this.pos=this.pos+t,e}readReverse(e=this.buf.length){const r=this.buf.slice(this.pos,this.pos+e);this.pos=this.pos+e;const i=t.alloc(r.length);for(let t=0;t<i.length;t++)i[t]=r[r.length-1-t];return i}readUInt8(){const t=this.buf.readUInt8(this.pos);return this.pos=this.pos+1,t}readInt8(){const t=this.buf.readInt8(this.pos);return this.pos=this.pos+1,t}readUInt16BE(){const t=this.buf.readUInt16BE(this.pos);return this.pos=this.pos+2,t}readInt16BE(){const t=this.buf.readInt16BE(this.pos);return this.pos=this.pos+2,t}readUInt16LE(){const t=this.buf.readUInt16LE(this.pos);return this.pos=this.pos+2,t}readInt16LE(){const t=this.buf.readInt16LE(this.pos);return this.pos=this.pos+2,t}readUInt32BE(){const t=this.buf.readUInt32BE(this.pos);return this.pos=this.pos+4,t}readInt32BE(){const t=this.buf.readInt32BE(this.pos);return this.pos=this.pos+4,t}readUInt32LE(){const t=this.buf.readUInt32LE(this.pos);return this.pos=this.pos+4,t}readInt32LE(){const t=this.buf.readInt32LE(this.pos);return this.pos=this.pos+4,t}readUInt64BEBn(){const t=this.buf.slice(this.pos,this.pos+8),e=(new v).fromBuffer(t);return this.pos=this.pos+8,e}readUInt64LEBn(){const t=this.readReverse(8);return(new v).fromBuffer(t)}readVarIntNum(){const t=this.readUInt8();let e,r;switch(t){case 253:return this.readUInt16LE();case 254:return this.readUInt32LE();case 255:if(e=this.readUInt64LEBn(),r=e.toNumber(),r<=Math.pow(2,53))return r;throw new Error("number too large to retain precision - use readVarIntBn");default:return t}}readVarIntBuf(){switch(this.buf.readUInt8(this.pos)){case 253:return this.read(3);case 254:return this.read(5);case 255:return this.read(9);default:return this.read(1)}}readVarIntBn(){const t=this.readUInt8();switch(t){case 253:return new v(this.readUInt16LE());case 254:return new v(this.readUInt32LE());case 255:return this.readUInt64LEBn();default:return new v(t)}}}class I{constructor(t){this.fromObject({bufs:t})}fromObject(t){return this.bufs=t.bufs||this.bufs||[],this}getLength(){let t=0;for(const e in this.bufs){t+=this.bufs[e].length}return t}toBuffer(){return t.concat(this.bufs)}write(t){return this.bufs.push(t),this}writeReverse(e){const r=t.alloc(e.length);for(let t=0;t<r.length;t++)r[t]=e[e.length-1-t];return this.bufs.push(r),this}writeUInt8(e){const r=t.alloc(1);return r.writeUInt8(e,0),this.write(r),this}writeInt8(e){const r=t.alloc(1);return r.writeInt8(e,0),this.write(r),this}writeUInt16BE(e){const r=t.alloc(2);return r.writeUInt16BE(e,0),this.write(r),this}writeInt16BE(e){const r=t.alloc(2);return r.writeInt16BE(e,0),this.write(r),this}writeUInt16LE(e){const r=t.alloc(2);return r.writeUInt16LE(e,0),this.write(r),this}writeInt16LE(e){const r=t.alloc(2);return r.writeInt16LE(e,0),this.write(r),this}writeUInt32BE(e){const r=t.alloc(4);return r.writeUInt32BE(e,0),this.write(r),this}writeInt32BE(e){const r=t.alloc(4);return r.writeInt32BE(e,0),this.write(r),this}writeUInt32LE(e){const r=t.alloc(4);return r.writeUInt32LE(e,0),this.write(r),this}writeInt32LE(e){const r=t.alloc(4);return r.writeInt32LE(e,0),this.write(r),this}writeUInt64BEBn(t){const e=t.toBuffer({size:8});return this.write(e),this}writeUInt64LEBn(t){const e=t.toBuffer({size:8});return this.writeReverse(e),this}writeVarIntNum(t){const e=I.varIntBufNum(t);return this.write(e),this}writeVarIntBn(t){const e=I.varIntBufBn(t);return this.write(e),this}static varIntBufNum(e){let r;return e<253?(r=t.alloc(1),r.writeUInt8(e,0)):e<65536?(r=t.alloc(3),r.writeUInt8(253,0),r.writeUInt16LE(e,1)):e<4294967296?(r=t.alloc(5),r.writeUInt8(254,0),r.writeUInt32LE(e,1)):(r=t.alloc(9),r.writeUInt8(255,0),r.writeInt32LE(-1&e,1),r.writeUInt32LE(Math.floor(e/4294967296),5)),r}static varIntBufBn(e){let r;const i=e.toNumber();if(i<253)r=t.alloc(1),r.writeUInt8(i,0);else if(i<65536)r=t.alloc(3),r.writeUInt8(253,0),r.writeUInt16LE(i,1);else if(i<4294967296)r=t.alloc(5),r.writeUInt8(254,0),r.writeUInt32LE(i,1);else{const t=new I;t.writeUInt8(255),t.writeUInt64LEBn(e),r=t.toBuffer()}return r}}class B{constructor(t){this.fromObject(t)}fromObject(t){if(!t)return this;for(const e of Object.keys(t))void 0!==t[e]&&(this[e]=t[e]);return this}static fromObject(t){return(new this).fromObject(t)}fromBr(t){if(!(t instanceof E))throw new Error("br must be a buffer reader");throw new Error("not implemented")}static fromBr(t){return(new this).fromBr(t)}asyncFromBr(t){if(!(t instanceof E))throw new Error("br must be a buffer reader");throw new Error("not implemented")}static asyncFromBr(t){return(new this).asyncFromBr(t)}toBw(t){throw new Error("not implemented")}asyncToBw(t){throw new Error("not implemented")}*genFromBuffers(){throw new Error("not implemented")}*expect(t,e){let r=e;const i=new I;let s=0;for(e&&(i.write(e),s+=e.length);s<t;){const e=t-s;r=yield e,r&&(i.write(r),s+=r.length)}r=i.toBuffer();const n=s-t,o=r.slice(r.length-n,r.length);return r=r.slice(0,r.length-n),{buf:r,remainderbuf:o}}fromBuffer(e,...r){if(!t.isBuffer(e))throw new Error("buf must be a buffer");const i=new E(e);return this.fromBr(i,...r)}static fromBuffer(...t){return(new this).fromBuffer(...t)}asyncFromBuffer(e,...r){if(!t.isBuffer(e))throw new Error("buf must be a buffer");const i=new E(e);return this.asyncFromBr(i,...r)}static asyncFromBuffer(t,...e){return(new this).asyncFromBuffer(t,...e)}fromFastBuffer(t,...e){return 0===t.length?this:this.fromBuffer(t,...e)}static fromFastBuffer(...t){return(new this).fromFastBuffer(...t)}toBuffer(...t){return this.toBw(...t).toBuffer()}asyncToBuffer(...t){return this.asyncToBw(...t).then(t=>t.toBuffer())}toFastBuffer(...e){return 0===Object.keys(this).length?t.alloc(0):this.toBuffer(...e)}fromHex(e,...r){if(!y()(e))throw new Error("invalid hex string");const i=t.from(e,"hex");return this.fromBuffer(i,...r)}static fromHex(t,...e){return(new this).fromHex(t,...e)}asyncFromHex(e,...r){if(!y()(e))throw new Error("invalid hex string");const i=t.from(e,"hex");return this.asyncFromBuffer(i,...r)}static asyncFromHex(t,...e){return(new this).asyncFromHex(t,...e)}fromFastHex(e,...r){if(!y()(e))throw new Error("invalid hex string");const i=t.from(e,"hex");return this.fromFastBuffer(i,...r)}static fromFastHex(t,...e){return(new this).fromFastHex(t,...e)}toHex(...t){return this.toBuffer(...t).toString("hex")}asyncToHex(...t){return this.asyncToBuffer(...t).then(t=>t.toString("hex"))}toFastHex(...t){return this.toFastBuffer(...t).toString("hex")}fromString(t,...e){if("string"!=typeof t)throw new Error("str must be a string");return this.fromHex(t,...e)}static fromString(t,...e){return(new this).fromString(t,...e)}asyncFromString(t,...e){if("string"!=typeof t)throw new Error("str must be a string");return this.asyncFromHex(t,...e)}static asyncFromString(t,...e){return(new this).asyncFromString(t,...e)}toString(...t){return this.toHex(...t)}asyncToString(...t){return this.asyncToHex(...t)}fromJSON(t){throw new Error("not implemented")}static fromJSON(t,...e){return(new this).fromJSON(t,...e)}asyncFromJSON(t,...e){throw new Error("not implemented")}static asyncFromJSON(t,...e){return(new this).asyncFromJSON(t,...e)}toJSON(){var e={};for(var r in this)if(Array.isArray(this[r])){const t=[];for(var i in this[r])"function"==typeof this[r][i].toJSON?t.push(this[r][i].toJSON()):t.push(JSON.stringify(this[r][i]));e[r]=t}else if(null===this[r])e[r]=this[r];else if("object"==typeof this[r]&&"function"==typeof this[r].toJSON)e[r]=this[r].toJSON();else if("boolean"==typeof this[r]||"number"==typeof this[r]||"string"==typeof this[r])e[r]=this[r];else if(t.isBuffer(this[r]))e[r]=this[r].toString("hex");else if(this[r]instanceof Map)e[r]=JSON.stringify(this[r]);else if("object"==typeof this[r])throw new Error("not implemented");return e}asyncToJSON(){throw new Error("not implemented")}clone(){return this.cloneByJSON()}cloneByBuffer(){return(new this.constructor).fromBuffer(this.toBuffer())}cloneByFastBuffer(){return(new this.constructor).fromFastBuffer(this.toFastBuffer())}cloneByHex(){return(new this.constructor).fromHex(this.toHex())}cloneByString(){return(new this.constructor).fromString(this.toString())}cloneByJSON(){return(new this.constructor).fromJSON(this.toJSON())}}class P extends B{constructor(t){super({buf:t})}fromHex(e){return this.fromBuffer(t.from(e,"hex"))}toHex(){return this.toBuffer().toString("hex")}static encode(e){if(!t.isBuffer(e))throw new Error("Input should be a buffer");return a.a.encode(e)}static decode(e){if("string"!=typeof e)throw new Error("Input should be a string");return t.from(a.a.decode(e))}fromBuffer(t){return this.buf=t,this}fromString(t){const e=P.decode(t);return this.buf=e,this}toBuffer(){return this.buf}toString(){return P.encode(this.buf)}}const k=(e,r)=>{if(!t.isBuffer(e)||!t.isBuffer(r))throw new Error("buf1 and buf2 must be buffers");if(e.length!==r.length)return!1;let i=0;for(let t=0;t<e.length;t++){i|=e[t]^r[t]}return 0===i};class R extends B{constructor(t,e,r){super({resbuf:t,isError:e,id:r})}fromResult(e,r){return e.toFastBuffer?this.resbuf=e.toFastBuffer():t.isBuffer(e)?this.resbuf=e:this.resbuf=t.from(JSON.stringify(e)),this.isError=!1,this.id=r,this}static fromResult(t,e){return(new this).fromResult(t,e)}fromError(e,r){return this.resbuf=t.from(JSON.stringify(e.message)),this.isError=!0,this.id=r,this}toBw(t){return t||(t=new I),t.writeVarIntNum(this.resbuf.length),t.write(this.resbuf),t.writeUInt8(Number(this.isError)),t.writeVarIntNum(this.id),t}fromBr(t){const e=t.readVarIntNum();return this.resbuf=t.read(e),this.isError=Boolean(t.readUInt8()),this.id=t.readVarIntNum(),this}}let N;class A{constructor(t=[],e=0,r=[],i=new Map){this.nativeWorkers=t,this.lastid=e,this.incompconsteRes=r,this.promisemap=i}asyncObjectMethod(t,e,r,i=this.lastid+1){if(!r)throw new Error("must specify args");const s=t[e](...r);return(new R).fromResult(s,i)}static asyncObjectMethod(t,e,r,i){return N||(N=new A),N.asyncObjectMethod(t,e,r,i)}asyncClassMethod(t,e,r,i=this.lastid+1){if(!r)throw new Error("must specify args");const s=t[e](...r);return(new R).fromResult(s,i)}static asyncClassMethod(t,e,r,i){return N||(N=new A),N.asyncClassMethod(t,e,r,i)}static endGlobalWorkers(){N&&!i.browser&&(N=void 0)}}class M{}M.sha1=function(e){if(!t.isBuffer(e))throw new Error("sha1 hash must be of a buffer");const r=(new(0,p.a.sha1)).update(e).digest();return t.from(r)},M.sha1.blockSize=512,M.asyncSha1=async function(t){const e=[t];return(await A.asyncClassMethod(M,"sha1",e)).resbuf},M.sha256=function(e){if(!t.isBuffer(e))throw new Error("sha256 hash must be of a buffer");const r=(new(0,p.a.sha256)).update(e).digest();return t.from(r)},M.sha256.blockSize=512,M.asyncSha256=async function(t){const e=[t];return(await A.asyncClassMethod(M,"sha256",e)).resbuf},M.sha256Sha256=function(t){try{return M.sha256(M.sha256(t))}catch(t){throw new Error("sha256Sha256 hash must be of a buffer: "+t)}},M.asyncSha256Sha256=async function(t){const e=[t];return(await A.asyncClassMethod(M,"sha256Sha256",e)).resbuf},M.ripemd160=function(e){if(!t.isBuffer(e))throw new Error("ripemd160 hash must be of a buffer");const r=(new(0,p.a.ripemd160)).update(e).digest();return t.from(r)},M.asyncRipemd160=async function(t){const e=[t];return(await A.asyncClassMethod(M,"ripemd160",e)).resbuf},M.sha256Ripemd160=function(t){try{return M.ripemd160(M.sha256(t))}catch(t){throw new Error("sha256Ripemd160 hash must be of a buffer: "+t)}},M.asyncSha256Ripemd160=async function(t){const e=[t];return(await A.asyncClassMethod(M,"sha256Ripemd160",e)).resbuf},M.sha512=function(e){if(!t.isBuffer(e))throw new Error("sha512 hash must be of a buffer");const r=(new(0,p.a.sha512)).update(e).digest();return t.from(r)},M.asyncSha512=async function(t){const e=[t];return(await A.asyncClassMethod(M,"sha512",e)).resbuf},M.sha512.blockSize=1024,M.hmac=function(e,r,i){if("sha1"!==e&&"sha256"!==e&&"sha512"!==e)throw new Error("invalid choice of hash function");const s=M[e];if(!t.isBuffer(r)||!t.isBuffer(i))throw new Error("data and key must be buffers");const n=s.blockSize/8;if(i.length>n&&(i=s(i)),i.length<n){const e=t.alloc(n);e.fill(0,i.length),i.copy(e),i=e}const o=t.alloc(n),h=t.alloc(n);for(let t=0;t<n;t++)o[t]=92^i[t],h[t]=54^i[t];return s(t.concat([o,s(t.concat([h,r]))]))},M.sha1Hmac=function(t,e){return M.hmac("sha1",t,e)},M.asyncSha1Hmac=async function(t,e){const r=[t,e];return(await A.asyncClassMethod(M,"sha1Hmac",r)).resbuf},M.sha1Hmac.bitsize=160,M.sha256Hmac=function(t,e){return M.hmac("sha256",t,e)},M.asyncSha256Hmac=async function(t,e){const r=[t,e];return(await A.asyncClassMethod(M,"sha256Hmac",r)).resbuf},M.sha256Hmac.bitsize=256,M.sha512Hmac=function(t,e){return M.hmac("sha512",t,e)},M.asyncSha512Hmac=async function(t,e){const r=[t,e];return(await A.asyncClassMethod(M,"sha512Hmac",r)).resbuf},M.sha512Hmac.bitsize=512;class x extends B{constructor(t){super({buf:t})}fromHex(e){return this.fromBuffer(t.from(e,"hex"))}toHex(){return this.toBuffer().toString("hex")}static decode(t){if("string"!=typeof t)throw new Error("Input must be a string");const e=P.decode(t);if(e.length<4)throw new Error("Input string too short");const r=e.slice(0,-4),i=e.slice(-4),s=M.sha256Sha256(r).slice(0,4);if(!k(i,s))throw new Error("Checksum mismatch");return r}static encode(e){if(!t.isBuffer(e))throw new Error("Input must be a buffer");const r=t.alloc(e.length+4),i=M.sha256Sha256(e);return e.copy(r),i.copy(r,e.length),P.encode(r)}fromBuffer(t){return this.buf=t,this}fromString(t){const e=x.decode(t);return this.buf=e,this}toBuffer(){return this.buf}toString(){return x.encode(this.buf)}}class T{constructor(t){this.keyDefined=e=>e in t,this.getValue=e=>t[e]}get(t){if(this.keyDefined(t))return this.getValue(t);throw new Error("Unknown configuration: "+t)}}const C=(new class{constructor(){this.variables={}}build(){return new T(this.variables)}addValue(t,e){if(void 0===e)throw new Error(`Failed to add "${t}" property. The value cannot be undefined`);if(t in this.variables)throw new Error(`"${t}" already has a value defined.`);return this.variables[t]=e,this}addValueWithDefault(t,e,r){if(void 0===r)throw new Error(`Failed to add "${t}" property. Default value cannot be undefined`);return this.addValue(t,void 0===e?r:e)}}).addValue("NETWORK",i.env.NETWORK||"mainnet").build(),H={Mainnet:{maxsize:33554432,Address:{pubKeyHash:0},Bip32:{pubKey:76067358,privKey:76066276},Block:{maxNBits:486604799,magicNum:4190024921},Msg:{magicNum:4190024921,versionBytesNum:70012},PrivKey:{versionByteNum:128},TxBuilder:{dust:546,feePerKbNum:500},Workers:{timeout:6e4}}};if(H.Testnet=Object.assign({},H.Mainnet,{Address:{pubKeyHash:111},Bip32:{pubKey:70617039,privKey:70615956},Block:{maxNBits:486604799,magicNum:185665799},Msg:{magicNum:185665799,versionBytesNum:70012},PrivKey:{versionByteNum:239}}),H.Regtest=Object.assign({},H.Mainnet,{Address:{pubKeyHash:111},Bip32:{pubKey:70617039,privKey:70615956},Block:{maxNBits:486604799,magicNum:3669344250},Msg:{magicNum:185665799,versionBytesNum:70012},PrivKey:{versionByteNum:239}}),"testnet"===C.get("NETWORK"))H.Default=Object.assign({},H.Testnet);else if("mainnet"===C.get("NETWORK"))H.Default=Object.assign({},H.Mainnet);else{if("regtest"!==C.get("NETWORK"))throw new Error("must set network in environment variable - mainnet, testnet or regtest?, received "+C.get("NETWORK"));H.Default=Object.assign({},H.Regtest)}const L={OP_FALSE:0,OP_0:0,OP_PUSHDATA1:76,OP_PUSHDATA2:77,OP_PUSHDATA4:78,OP_1NEGATE:79,OP_RESERVED:80,OP_TRUE:81,OP_1:81,OP_2:82,OP_3:83,OP_4:84,OP_5:85,OP_6:86,OP_7:87,OP_8:88,OP_9:89,OP_10:90,OP_11:91,OP_12:92,OP_13:93,OP_14:94,OP_15:95,OP_16:96,OP_NOP:97,OP_VER:98,OP_IF:99,OP_NOTIF:100,OP_VERIF:101,OP_VERNOTIF:102,OP_ELSE:103,OP_ENDIF:104,OP_VERIFY:105,OP_RETURN:106,OP_TOALTSTACK:107,OP_FROMALTSTACK:108,OP_2DROP:109,OP_2DUP:110,OP_3DUP:111,OP_2OVER:112,OP_2ROT:113,OP_2SWAP:114,OP_IFDUP:115,OP_DEPTH:116,OP_DROP:117,OP_DUP:118,OP_NIP:119,OP_OVER:120,OP_PICK:121,OP_ROLL:122,OP_ROT:123,OP_SWAP:124,OP_TUCK:125,OP_CAT:126,OP_SUBSTR:127,OP_SPLIT:127,OP_LEFT:128,OP_NUM2BIN:128,OP_RIGHT:129,OP_BIN2NUM:129,OP_SIZE:130,OP_INVERT:131,OP_AND:132,OP_OR:133,OP_XOR:134,OP_EQUAL:135,OP_EQUALVERIFY:136,OP_RESERVED1:137,OP_RESERVED2:138,OP_1ADD:139,OP_1SUB:140,OP_2MUL:141,OP_2DIV:142,OP_NEGATE:143,OP_ABS:144,OP_NOT:145,OP_0NOTEQUAL:146,OP_ADD:147,OP_SUB:148,OP_MUL:149,OP_DIV:150,OP_MOD:151,OP_LSHIFT:152,OP_RSHIFT:153,OP_BOOLAND:154,OP_BOOLOR:155,OP_NUMEQUAL:156,OP_NUMEQUALVERIFY:157,OP_NUMNOTEQUAL:158,OP_LESSTHAN:159,OP_GREATERTHAN:160,OP_LESSTHANOREQUAL:161,OP_GREATERTHANOREQUAL:162,OP_MIN:163,OP_MAX:164,OP_WITHIN:165,OP_RIPEMD160:166,OP_SHA1:167,OP_SHA256:168,OP_HASH160:169,OP_HASH256:170,OP_CODESEPARATOR:171,OP_CHECKSIG:172,OP_CHECKSIGVERIFY:173,OP_CHECKMULTISIG:174,OP_CHECKMULTISIGVERIFY:175,OP_NOP1:176,OP_NOP2:177,OP_CHECKLOCKTIMEVERIFY:177,OP_NOP3:178,OP_CHECKSEQUENCEVERIFY:178,OP_NOP4:179,OP_NOP5:180,OP_NOP6:181,OP_NOP7:182,OP_NOP8:183,OP_NOP9:184,OP_NOP10:185,OP_SMALLDATA:249,OP_SMALLINTEGER:250,OP_PUBKEYS:251,OP_PUBKEYHASH:253,OP_PUBKEY:254,OP_INVALIDOPCODE:255};class F extends B{constructor(t){super({num:t})}fromNumber(t){return this.num=t,this}static fromNumber(t){return(new this).fromNumber(t)}toNumber(){return this.num}fromString(t){const e=L[t];if(void 0===e)throw new Error("Invalid opCodeStr");return this.num=e,this}static fromString(t){return(new this).fromString(t)}toString(){const t=F.str[this.num];if(void 0===t){if(this.num>0&&this.num<F.OP_PUSHDATA1)return this.num.toString();throw new Error("OpCode does not have a string representation")}return t}}F.str={};for(const t in L)F[t]=L[t],Object.prototype.hasOwnProperty.call(L,t)&&(F.str[L[t]]=t);const K=f.a.curves.secp256k1,U=K.curve.point().constructor;class D extends U{constructor(t,e,r){super(K.curve,t,e,r)}static fromX(t,e){const r=K.curve.pointFromX(e,t);return Object.create(D.prototype).copyFrom(r)}copyFrom(t){if(!(t instanceof U))throw new Error("point should be an external point");return Object.keys(t).forEach(function(e){this[e]=t[e]}.bind(this)),this}add(t){t=U.prototype.add.call(this,t);return Object.create(D.prototype).copyFrom(t)}mul(t){if(!t.lt(D.getN()))throw new Error("point mul out of range");const e=U.prototype.mul.call(this,t);return Object.create(D.prototype).copyFrom(e)}mulAdd(t,e,r){const i=U.prototype.mulAdd.call(this,t,e,r);return(e=Object.create(D.prototype)).copyFrom(i)}getX(){const t=U.prototype.getX.call(this),e=Object.create(v.prototype);return t.copy(e),e}getY(){const t=U.prototype.getY.call(this),e=Object.create(v.prototype);return t.copy(e),e}fromX(t,e){const r=D.fromX(t,e);return this.copyFrom(r)}toJSON(){return{x:this.getX().toString(),y:this.getY().toString()}}fromJSON(t){const e=(new v).fromString(t.x),r=(new v).fromString(t.y),i=new D(e,r);return this.copyFrom(i)}toString(){return JSON.stringify(this.toJSON())}fromString(t){const e=JSON.parse(t),r=(new D).fromJSON(e);return this.copyFrom(r)}static getG(){const t=K.curve.g;return Object.create(D.prototype).copyFrom(t)}static getN(){return new v(K.curve.n.toArray())}validate(){if(0!==D.fromX(this.getY().isOdd(),this.getX()).getY().cmp(this.getY()))throw new Error("Invalid y value of public key");if(!(this.getX().gt(-1)&&this.getX().lt(D.getN())&&this.getY().gt(-1)&&this.getY().lt(D.getN())))throw new Error("Point does not lie on the curve");return this}}class V extends B{constructor(t,e){super({point:t,compressed:e})}fromJSON(t){return this.fromFastHex(t),this}toJSON(){return this.toFastHex()}fromPrivKey(t){return this.fromObject({point:D.getG().mul(t.bn),compressed:t.compressed}),this}static fromPrivKey(t){return(new this).fromPrivKey(t)}async asyncFromPrivKey(t){const e=await A.asyncObjectMethod(this,"fromPrivKey",[t]);return this.fromFastBuffer(e.resbuf)}static asyncFromPrivKey(t){return(new this).asyncFromPrivKey(t)}fromBuffer(t,e){return this.fromDer(t,e)}async asyncFromBuffer(t,e){const r=[t,e],i=await A.asyncObjectMethod(this,"fromBuffer",r);return this.fromFastBuffer(i.resbuf)}fromFastBuffer(t){if(0===t.length)return this;const e=Boolean(t[0]);return t=t.slice(1),this.fromDer(t),this.compressed=e,this}fromDer(t,e){if(e=void 0===e,4!==t[0]&&(e||6!==t[0]&&7!==t[0]))if(3===t[0]){const e=new v(t.slice(1));this.fromX(!0,e),this.compressed=!0}else{if(2!==t[0])throw new Error("Invalid DER format pubKey");{const e=new v(t.slice(1));this.fromX(!1,e),this.compressed=!0}}else{const e=t.slice(1,33),r=t.slice(33,65);if(32!==e.length||32!==r.length||65!==t.length)throw new Error("LEngth of x and y must be 32 bytes");const i=new v(e),s=new v(r);this.point=new D(i,s),this.compressed=!1}return this}static fromDer(t,e){return(new this).fromDer(t,e)}fromString(e){return this.fromDer(t.from(e,"hex")),this}fromX(t,e){if("boolean"!=typeof t)throw new Error("Must specify whether y is odd or not (true or false)");return this.point=D.fromX(t,e),this}static fromX(t,e){return(new this).fromX(t,e)}toBuffer(){const t=void 0===this.compressed||this.compressed;return this.toDer(t)}toFastBuffer(){if(!this.point)return t.alloc(0);const e=new I,r=void 0===this.compressed||Boolean(this.compressed);return e.writeUInt8(Number(r)),e.write(this.toDer(!1)),e.toBuffer()}toDer(e){if("boolean"!=typeof(e=void 0===e?this.compressed:e))throw new Error("Must specify whether the public key is compressed or not (true or false)");const r=this.point.getX(),i=this.point.getY(),s=r.toBuffer({size:32}),n=i.toBuffer({size:32});let o;if(e){return o=n[n.length-1]%2?t.from([3]):t.from([2]),t.concat([o,s])}return o=t.from([4]),t.concat([o,s,n])}toString(){const t=void 0===this.compressed||this.compressed;return this.toDer(t).toString("hex")}static isCompressedOrUncompressed(t){if(t.length<33)return!1;if(4===t[0]){if(65!==t.length)return!1}else{if(2!==t[0]&&3!==t[0])return!1;if(33!==t.length)return!1}return!0}validate(){if(this.point.isInfinity())throw new Error("point: Point cannot be equal to Infinity");if(this.point.eq(new D(new v(0),new v(0))))throw new Error("point: Point cannot be equal to 0, 0");return this.point.validate(),this}}class j{}j.getRandomBuffer=function(t){return S()(t)};class Y extends B{constructor(t,e,r=null){super({bn:t,compressed:e}),r=r||H.Default.PrivKey,this.Constants=r}fromJSON(t){return this.fromHex(t),this}toJSON(){return this.toHex()}fromRandom(){let t,e,r;do{t=j.getRandomBuffer(32),e=(new v).fromBuffer(t),r=e.lt(D.getN())}while(!r);return this.fromObject({bn:e,compressed:!0}),this}static fromRandom(){return(new this).fromRandom()}toBuffer(){let e=this.compressed;void 0===e&&(e=!0);const r=this.bn.toBuffer({size:32});let i;return i=e?t.concat([t.from([this.Constants.versionByteNum]),r,t.from([1])]):t.concat([t.from([this.Constants.versionByteNum]),r]),i}fromBuffer(t){if(34===t.length&&1===t[33])this.compressed=!0;else{if(33!==t.length)throw new Error("Length of privKey buffer must be 33 (uncompressed pubKey) or 34 (compressed pubKey)");this.compressed=!1}if(t[0]!==this.Constants.versionByteNum)throw new Error("Invalid versionByteNum byte");return this.fromBn((new v).fromBuffer(t.slice(1,33)))}toBn(){return this.bn}fromBn(t){return this.bn=t,this}static fromBn(t){return(new this).fromBn(t)}validate(){if(!this.bn.lt(D.getN()))throw new Error("Number must be less than N");if("boolean"!=typeof this.compressed)throw new Error("Must specify whether the corresponding public key is compressed or not (true or false)");return this}toWif(){return x.encode(this.toBuffer())}fromWif(t){return this.fromBuffer(x.decode(t))}static fromWif(t){return(new this).fromWif(t)}toString(){return this.toWif()}fromString(t){return this.fromWif(t)}}Y.Mainnet=class extends Y{constructor(t,e){super(t,e,H.Mainnet.PrivKey)}},Y.Testnet=class extends Y{constructor(t,e){super(t,e,H.Testnet.PrivKey)}};class G extends B{constructor(t,e,r,i,s){super({r:t,s:e,nHashType:r,recovery:i,compressed:s})}fromBuffer(t){try{return this.fromDer(t,!0)}catch(t){}try{return this.fromCompact(t)}catch(t){}return this.fromTxFormat(t)}toBuffer(){return void 0!==this.nHashType?this.toTxFormat():void 0!==this.recovery?this.toCompact():this.toDer()}fromCompact(t){let e=!0,r=t.slice(0,1)[0]-27-4;if(r<0&&(e=!1,r+=4),0!==r&&1!==r&&2!==r&&3!==r)throw new Error("i must be 0, 1, 2, or 3");this.compressed=e,this.recovery=r;const i=t.slice(1);return this.fromRS(i),this}static fromCompact(t){return(new this).fromCompact(t)}fromRS(t){const e=t.slice(0,32),r=t.slice(32,64);if(32!==e.length)throw new Error("r must be 32 bytes");if(32!==r.length||t.length>64)throw new Error("s must be 32 bytes");return this.r=(new v).fromBuffer(e),this.s=(new v).fromBuffer(r),this}static fromRS(t){return(new this).fromRS(t)}fromDer(t,e){const r=G.parseDer(t,e);return this.r=r.r,this.s=r.s,this}static fromDer(t,e){return(new this).fromDer(t,e)}fromTxFormat(t){if(0===t.length)return this.r=new v(1),this.s=new v(1),this.nHashType=1,this;const e=t.readUInt8(t.length-1),r=t.slice(0,t.length-1);return this.fromDer(r,!1),this.nHashType=e,this}static fromTxFormat(t){return(new this).fromTxFormat(t)}fromString(t){return this.fromHex(t)}static parseDer(e,r){if(void 0===r&&(r=!0),!t.isBuffer(e))throw new Error("DER formatted signature should be a buffer");const i=e[0];if(48!==i)throw new Error("Header byte should be 0x30");let s=e[1];const n=e.slice(2).length;if(r&&s!==n)throw new Error("LEngth byte should length of what follows");s=s<n?s:n;const o=e[2];if(2!==o)throw new Error("Integer byte for r should be 0x02");const h=e[3],u=e.slice(4,4+h),a=(new v).fromBuffer(u),c=0===e[4];if(h!==u.length)throw new Error("LEngth of r incorrect");const f=e[4+h+0];if(2!==f)throw new Error("Integer byte for s should be 0x02");const l=e[4+h+1],p=e.slice(4+h+2,4+h+2+l),m=(new v).fromBuffer(p),d=0===e[4+h+2+2];if(l!==p.length)throw new Error("LEngth of s incorrect");if(s!==4+h+2+l-2)throw new Error("LEngth of signature incorrect");return{header:i,length:s,rheader:o,rlength:h,rneg:c,rbuf:u,r:a,sheader:f,slength:l,sneg:d,sbuf:p,s:m}}static IsTxDer(t){if(t.length<9)return!1;if(t.length>73)return!1;if(48!==t[0])return!1;if(t[1]!==t.length-3)return!1;const e=t[3];if(5+e>=t.length)return!1;const r=t[5+e];if(e+r+7!==t.length)return!1;const i=t.slice(4);if(2!==t[2])return!1;if(0===e)return!1;if(128&i[0])return!1;if(e>1&&0===i[0]&&!(128&i[1]))return!1;const s=t.slice(6+e);return 2===t[6+e-2]&&(0!==r&&(!(128&s[0])&&!(r>1&&0===s[0]&&!(128&s[1]))))}hasLowS(){return!this.s.lt(1)&&!this.s.gt(v.fromBuffer(t.from("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0","hex")))}hasDefinedHashType(){return!(this.nHashType<G.SIGHASH_ALL||this.nHashType>G.SIGHASH_SINGLE)}toCompact(e,r){if(e="number"==typeof e?e:this.recovery,r="boolean"==typeof r?r:this.compressed,0!==e&&1!==e&&2!==e&&3!==e)throw new Error("recovery must be equal to 0, 1, 2, or 3");let i=e+27+4;!1===r&&(i-=4);const s=t.from([i]),n=this.r.toBuffer({size:32}),o=this.s.toBuffer({size:32});return t.concat([s,n,o])}toRS(){return t.concat([this.r.toBuffer({size:32}),this.s.toBuffer({size:32})])}toDer(){const e=this.r.toBuffer(),r=this.s.toBuffer(),i=128&e[0],s=128&r[0],n=i?t.concat([t.from([0]),e]):e,o=s?t.concat([t.from([0]),r]):r,h=2+n.length+2+o.length,u=n.length,a=o.length;return t.concat([t.from([48,h,2,u]),n,t.from([2,a]),o])}toTxFormat(){const e=this.toDer(),r=t.alloc(1);return r.writeUInt8(this.nHashType,0),t.concat([e,r])}toString(){return this.toHex()}}G.SIGHASH_ALL=1,G.SIGHASH_NONE=2,G.SIGHASH_SINGLE=3,G.SIGHASH_FORKID=64,G.SIGHASH_ANYONECANPAY=128;class J extends B{constructor(t=[]){super({chunks:t})}fromJSON(t){return this.fromString(t)}toJSON(){return this.toString()}fromBuffer(e){this.chunks=[];const r=new E(e);for(;!r.eof();){const e=r.readUInt8();let i=0,s=t.from([]);if(e>0&&e<F.OP_PUSHDATA1)i=e,this.chunks.push({buf:r.read(i),len:i,opCodeNum:e});else if(e===F.OP_PUSHDATA1){try{i=r.readUInt8(),s=r.read(i)}catch(t){r.read()}this.chunks.push({buf:s,len:i,opCodeNum:e})}else if(e===F.OP_PUSHDATA2){try{i=r.readUInt16LE(),s=r.read(i)}catch(t){r.read()}this.chunks.push({buf:s,len:i,opCodeNum:e})}else if(e===F.OP_PUSHDATA4){try{i=r.readUInt32LE(),s=r.read(i)}catch(t){r.read()}this.chunks.push({buf:s,len:i,opCodeNum:e})}else this.chunks.push({opCodeNum:e})}return this}toBuffer(){const t=new I;for(let e=0;e<this.chunks.length;e++){const r=this.chunks[e],i=r.opCodeNum;t.writeUInt8(i),r.buf&&(i<F.OP_PUSHDATA1?t.write(r.buf):i===F.OP_PUSHDATA1?(t.writeUInt8(r.len),t.write(r.buf)):i===F.OP_PUSHDATA2?(t.writeUInt16LE(r.len),t.write(r.buf)):i===F.OP_PUSHDATA4&&(t.writeUInt32LE(r.len),t.write(r.buf)))}return t.toBuffer()}fromString(e){if(this.chunks=[],""===e||void 0===e)return this;const r=e.split(" ");let i=0;for(;i<r.length;){const e=r[i];let s;try{s=(new F).fromString(e).toNumber()}catch(t){}if(void 0===s)if(s=parseInt(e,10),s>0&&s<F.OP_PUSHDATA1)this.chunks.push({buf:t.from(r[i+1].slice(2),"hex"),len:s,opCodeNum:s}),i+=2;else{if(0!==s)throw new Error("Invalid script");this.chunks.push({opCodeNum:0}),i+=1}else if(s===F.OP_PUSHDATA1||s===F.OP_PUSHDATA2||s===F.OP_PUSHDATA4){if("0x"!==r[i+2].slice(0,2))throw new Error("Pushdata data must start with 0x");this.chunks.push({buf:t.from(r[i+2].slice(2),"hex"),len:parseInt(r[i+1],10),opCodeNum:s}),i+=3}else this.chunks.push({opCodeNum:s}),i+=1}return this}toString(){let t="";for(let e=0;e<this.chunks.length;e++){const r=this.chunks[e],i=r.opCodeNum;r.buf?(i!==F.OP_PUSHDATA1&&i!==F.OP_PUSHDATA2&&i!==F.OP_PUSHDATA4||(t=t+" "+new F(i).toString()),t=t+" "+r.len,t=t+" 0x"+r.buf.toString("hex")):t=void 0!==F.str[i]?t+" "+new F(i).toString():t+" 0x"+i.toString(16)}return t.substr(1)}fromBitcoindString(e){const r=new I,i=e.split(" ");let s;for(s=0;s<i.length;s++){const e=i[s];if(""!==e)if("0"===e[0]&&"x"===e[1]){const i=e.slice(2);r.write(t.from(i,"hex"))}else if("'"===e[0]){const i=e.slice(1,e.length-1),s=t.from(i),n=(new J).writeBuffer(s).toBuffer();r.write(n)}else if(void 0!==F["OP_"+e]){const t=F["OP_"+e];r.writeUInt8(t)}else if("number"==typeof F[e]){const t=F[e];r.writeUInt8(t)}else{if(isNaN(parseInt(e,10)))throw new Error("Could not determine type of script value");{const t=new v(e),i=(new J).writeBn(t).toBuffer();r.write(i)}}}const n=r.toBuffer();return this.fromBuffer(n)}static fromBitcoindString(t){return(new this).fromBitcoindString(t)}toBitcoindString(){let t="";for(let e=0;e<this.chunks.length;e++){const r=this.chunks[e];if(r.buf){t=t+" 0x"+new J([r]).toBuffer().toString("hex")}else if(void 0!==F.str[r.opCodeNum]){t=t+" "+new F(r.opCodeNum).toString().slice(3)}else t=t+" 0x"+r.opCodeNum.toString(16)}return t.substr(1)}fromAsmString(e){this.chunks=[];const r=e.split(" ");let i=0;for(;i<r.length;){const e=r[i];let s,n;try{s=F.fromString(e),n=s.toNumber()}catch(t){s=void 0,n=void 0}if("0"===e)n=0,this.chunks.push({opCodeNum:n}),i+=1;else if("-1"===e)n=F.OP_1NEGATE,this.chunks.push({opCodeNum:n}),i+=1;else if(void 0===s){const e=r[i],s=t.from(e,"hex");if(s.toString("hex")!==e)throw new Error("invalid hex string in script");const o=s.length;o>=0&&o<F.OP_PUSHDATA1?n=o:o<Math.pow(2,8)?n=F.OP_PUSHDATA1:o<Math.pow(2,16)?n=F.OP_PUSHDATA2:o<Math.pow(2,32)&&(n=F.OP_PUSHDATA4),this.chunks.push({buf:s,len:s.length,opCodeNum:n}),i+=1}else this.chunks.push({opCodeNum:n}),i+=1}return this}static fromAsmString(t){return(new this).fromAsmString(t)}toAsmString(){for(var t="",e=0;e<this.chunks.length;e++){var r=this.chunks[e];t+=this._chunkToString(r)}return t.substr(1)}_chunkToString(t,e){var r=t.opCodeNum,i="";if(t.buf)t.len>0&&(i=i+" "+t.buf.toString("hex"));else if(void 0!==F.str[r])0===r?i+=" 0":79===r?i+=" -1":i=i+" "+new F(r).toString();else{var s=r.toString(16);s.length%2!=0&&(s="0"+s),i=i+" "+s}return i}fromOpReturnData(t){return this.writeOpCode(F.OP_RETURN),this.writeBuffer(t),this}static fromOpReturnData(t){return(new this).fromOpReturnData(t)}fromSafeData(t){return this.writeOpCode(F.OP_FALSE),this.writeOpCode(F.OP_RETURN),this.writeBuffer(t),this}static fromSafeData(t){return(new this).fromSafeData(t)}fromSafeDataArray(t){this.writeOpCode(F.OP_FALSE),this.writeOpCode(F.OP_RETURN);for(const e in t){const r=t[e];this.writeBuffer(r)}return this}static fromSafeDataArray(t){return(new this).fromSafeDataArray(t)}getData(){if(this.isSafeDataOut()){return this.chunks.slice(2).map(t=>t.buf)}if(this.isOpReturn()){return this.chunks.slice(1).map(t=>t.buf)}throw new Error("Unrecognized script type to get data from")}fromPubKeyHash(t){if(20!==t.length)throw new Error("hashBuf must be a 20 byte buffer");return this.writeOpCode(F.OP_DUP),this.writeOpCode(F.OP_HASH160),this.writeBuffer(t),this.writeOpCode(F.OP_EQUALVERIFY),this.writeOpCode(F.OP_CHECKSIG),this}static fromPubKeyHash(t){return(new this).fromPubKeyHash(t)}static sortPubKeys(t){return t.slice().sort((t,e)=>{const r=t.toBuffer(),i=e.toBuffer(),s=Math.max(r.length,i.length);for(let t=0;t<=s;t++){if(void 0===r[t])return-1;if(void 0===i[t])return 1;if(r[t]<i[t])return-1;if(r[t]>i[t])return 1}})}fromPubKeys(t,e,r=!0){if("number"!=typeof t)throw new Error("m must be a number");!0===r&&(e=J.sortPubKeys(e)),this.writeOpCode(t+F.OP_1-1);for(const t in e)this.writeBuffer(e[t].toBuffer());return this.writeOpCode(e.length+F.OP_1-1),this.writeOpCode(F.OP_CHECKMULTISIG),this}static fromPubKeys(t,e,r){return(new this).fromPubKeys(t,e,r)}removeCodeseparators(){const t=[];for(let e=0;e<this.chunks.length;e++)this.chunks[e].opCodeNum!==F.OP_CODESEPARATOR&&t.push(this.chunks[e]);return this.chunks=t,this}isPushOnly(){for(let t=0;t<this.chunks.length;t++){if(this.chunks[t].opCodeNum>F.OP_16)return!1}return!0}isOpReturn(){return this.chunks[0].opCodeNum===F.OP_RETURN&&this.chunks.filter(e=>t.isBuffer(e.buf)).length===this.chunks.slice(1).length}isSafeDataOut(){if(this.chunks.length<2)return!1;if(this.chunks[0].opCodeNum!==F.OP_FALSE)return!1;var t=this.chunks.slice(1);return new J(t).isOpReturn()}isPubKeyHashOut(){return!!(this.chunks[0]&&this.chunks[0].opCodeNum===F.OP_DUP&&this.chunks[1]&&this.chunks[1].opCodeNum===F.OP_HASH160&&this.chunks[2].buf&&this.chunks[3]&&this.chunks[3].opCodeNum===F.OP_EQUALVERIFY&&this.chunks[4]&&this.chunks[4].opCodeNum===F.OP_CHECKSIG)}isPubKeyHashIn(){return!(2!==this.chunks.length||!this.chunks[0].buf&&this.chunks[0].opCodeNum!==F.OP_0||!this.chunks[1].buf&&this.chunks[0].opCodeNum!==F.OP_0)}isScriptHashOut(){const t=this.toBuffer();return 23===t.length&&t[0]===F.OP_HASH160&&20===t[1]&&t[22]===F.OP_EQUAL}isScriptHashIn(){if(!this.isPushOnly())return!1;try{(new J).fromBuffer(this.chunks[this.chunks.length-1].buf)}catch(t){return!1}return!0}isMultiSigOut(){const t=this.chunks[0].opCodeNum-F.OP_1+1;if(!(t>=1&&t<=16))return!1;if(!this.chunks.slice(1,this.chunks.length-2).every(t=>{try{const e=t.buf;return(new V).fromDer(e).validate(),!0}catch(t){return!1}}))return!1;const e=this.chunks[this.chunks.length-2].opCodeNum-F.OP_1+1;return e>=t&&e<=16&&this.chunks[1+e+1].opCodeNum===F.OP_CHECKMULTISIG}isMultiSigIn(){if(this.chunks[0].opCodeNum!==F.OP_0)return!1;const e=this.chunks.slice(1);return!(e.length<1)&&e.every(e=>t.isBuffer(e.buf)&&G.IsTxDer(e.buf))}findAndDelete(t){const e=t.toBuffer();for(let t=0;t<this.chunks.length;t++){const r=new J([this.chunks[t]]).toBuffer();k(e,r)&&this.chunks.splice(t,1)}return this}writeScript(t){return this.chunks=this.chunks.concat(t.chunks),this}static writeScript(t){return(new this).writeScript(t)}writeString(t){const e=(new J).fromString(t);return this.chunks=this.chunks.concat(e.chunks),this}static writeString(t){return(new this).writeString(t)}writeOpCode(t){return this.chunks.push({opCodeNum:t}),this}static writeOpCode(t){return(new this).writeOpCode(t)}setChunkOpCode(t,e){return this.chunks[t]={opCodeNum:e},this}writeBn(t){if(t.cmp(0)===F.OP_0)this.chunks.push({opCodeNum:F.OP_0});else if(0===t.cmp(-1))this.chunks.push({opCodeNum:F.OP_1NEGATE});else if(t.cmp(1)>=0&&t.cmp(16)<=0)this.chunks.push({opCodeNum:t.toNumber()+F.OP_1-1});else{const e=t.toSm({endian:"little"});this.writeBuffer(e)}return this}static writeBn(t){return(new this).writeBn(t)}writeNumber(t){return this.writeBn((new v).fromNumber(t)),this}static writeNumber(t){return(new this).writeNumber(t)}setChunkBn(t,e){return this.chunks[t]=(new J).writeBn(e).chunks[0],this}writeBuffer(t){let e;const r=t.length;if(t.length>0&&t.length<F.OP_PUSHDATA1)e=t.length;else if(0===t.length)e=F.OP_0;else if(t.length<Math.pow(2,8))e=F.OP_PUSHDATA1;else if(t.length<Math.pow(2,16))e=F.OP_PUSHDATA2;else{if(!(t.length<Math.pow(2,32)))throw new Error("You can't push that much data");e=F.OP_PUSHDATA4}return this.chunks.push({buf:t,len:r,opCodeNum:e}),this}static writeBuffer(t){return(new this).writeBuffer(t)}setChunkBuffer(t,e){return this.chunks[t]=(new J).writeBuffer(e).chunks[0],this}checkMinimalPush(t){const e=this.chunks[t],r=e.buf,i=e.opCodeNum;return!r||(0===r.length?i===F.OP_0:1===r.length&&r[0]>=1&&r[0]<=16?i===F.OP_1+(r[0]-1):1===r.length&&129===r[0]?i===F.OP_1NEGATE:r.length<=75?i===r.length:r.length<=255?i===F.OP_PUSHDATA1:!(r.length<=65535)||i===F.OP_PUSHDATA2)}}class q extends B{constructor(t,e,r=null){super({versionByteNum:t,hashBuf:e}),r=r||H.Default.Address,this.Constants=r}fromBuffer(t){if(21!==t.length)throw new Error("address buffers must be exactly 21 bytes");if(t[0]!==this.Constants.pubKeyHash)throw new Error("address: invalid versionByteNum byte");return this.versionByteNum=t[0],this.hashBuf=t.slice(1),this}fromPubKeyHashBuf(t){return this.hashBuf=t,this.versionByteNum=this.Constants.pubKeyHash,this}static fromPubKeyHashBuf(t){return(new this).fromPubKeyHashBuf(t)}fromPubKey(t){const e=M.sha256Ripemd160(t.toBuffer());return this.fromPubKeyHashBuf(e)}static fromPubKey(t){return(new this).fromPubKey(t)}async asyncFromPubKey(t){const e=[t],r=await A.asyncObjectMethod(this,"fromPubKey",e);return this.fromFastBuffer(r.resbuf)}static asyncFromPubKey(t){return(new this).asyncFromPubKey(t)}fromPrivKey(t){const e=(new V).fromPrivKey(t),r=M.sha256Ripemd160(e.toBuffer());return this.fromPubKeyHashBuf(r)}static fromPrivKey(t){return(new this).fromPrivKey(t)}async asyncFromPrivKey(t){const e=[t],r=await A.asyncObjectMethod(this,"fromPrivKey",e);return this.fromFastBuffer(r.resbuf)}static asyncFromPrivKey(t){return(new this).fromPrivKey(t)}fromRandom(){const t=(new Y).fromRandom();return this.fromPrivKey(t)}static fromRandom(){return(new this).fromRandom()}async asyncFromRandom(){const t=await A.asyncObjectMethod(this,"fromRandom",[]);return this.fromFastBuffer(t.resbuf)}static asyncFromRandom(){return(new this).fromRandom()}fromString(t){const e=x.decode(t);return this.fromBuffer(e)}async asyncFromString(t){const e=[t],r=await A.asyncObjectMethod(this,"fromString",e);return this.fromFastBuffer(r.resbuf)}static asyncFromString(t){return(new this).asyncFromString(t)}static isValid(t){let e;try{e=(new q).fromString(t)}catch(t){return!1}return e.isValid()}isValid(){try{return this.validate(),!0}catch(t){return!1}}toTxOutScript(){const t=new J;return t.writeOpCode(F.OP_DUP),t.writeOpCode(F.OP_HASH160),t.writeBuffer(this.hashBuf),t.writeOpCode(F.OP_EQUALVERIFY),t.writeOpCode(F.OP_CHECKSIG),t}fromTxInScript(e){const r=M.sha256Ripemd160(e.chunks[1].buf||t.from("00".repeat(32),"hex"));return this.fromPubKeyHashBuf(r)}static fromTxInScript(t){return(new this).fromTxInScript(t)}fromTxOutScript(t){return this.fromPubKeyHashBuf(t.chunks[2].buf)}static fromTxOutScript(t){return(new this).fromTxOutScript(t)}toBuffer(){const e=t.from([this.versionByteNum]);return t.concat([e,this.hashBuf])}toJSON(){const t={};return this.hashBuf&&(t.hashBuf=this.hashBuf.toString("hex")),void 0!==this.versionByteNum&&(t.versionByteNum=this.versionByteNum),t}fromJSON(e){return e.hashBuf&&(this.hashBuf=t.from(e.hashBuf,"hex")),void 0!==e.versionByteNum&&(this.versionByteNum=e.versionByteNum),this}toString(){return x.encode(this.toBuffer())}async asyncToString(){const t=await A.asyncObjectMethod(this,"toString",[]);return JSON.parse(t.resbuf.toString())}validate(){if(!t.isBuffer(this.hashBuf)||20!==this.hashBuf.length)throw new Error("hashBuf must be a buffer of 20 bytes");if(this.versionByteNum!==this.Constants.pubKeyHash)throw new Error("invalid versionByteNum");return this}}q.Mainnet=class extends q{constructor(t,e){super(t,e,H.Mainnet.Address)}},q.Testnet=class extends q{constructor(t,e){super(t,e,H.Testnet.Address)}};class z extends B{constructor(t,e,r,i,s,n,o,h=null,u=Y){super({versionBytesNum:t,depth:e,parentFingerPrint:r,childIndex:i,chainCode:s,privKey:n,pubKey:o}),h=h||H.Default.Bip32,this.Constants=h,this.PrivKey=u}fromRandom(){return this.versionBytesNum=this.Constants.privKey,this.depth=0,this.parentFingerPrint=t.from([0,0,0,0]),this.childIndex=0,this.chainCode=j.getRandomBuffer(32),this.privKey=(new this.PrivKey).fromRandom(),this.pubKey=(new V).fromPrivKey(this.privKey),this}static fromRandom(){return(new this).fromRandom()}fromString(t){return this.fromBuffer(x.decode(t))}async asyncFromString(t){const e=[t],r=await A.asyncObjectMethod(this,"fromString",e);return this.fromFastBuffer(r.resbuf)}fromSeed(e){if(!t.isBuffer(e))throw new Error("bytes must be a buffer");if(e.length<16)throw new Error("Need more than 128 bits of entropy");if(e.length>64)throw new Error("More than 512 bits of entropy is nonstandard");const r=M.sha512Hmac(e,t.from("Bitcoin seed"));return this.depth=0,this.parentFingerPrint=t.from([0,0,0,0]),this.childIndex=0,this.chainCode=r.slice(32,64),this.versionBytesNum=this.Constants.privKey,this.privKey=(new this.PrivKey).fromBn(v().fromBuffer(r.slice(0,32))),this.pubKey=(new V).fromPrivKey(this.privKey),this}static fromSeed(t){return(new this).fromSeed(t)}async asyncFromSeed(t){const e=await A.asyncObjectMethod(this,"fromSeed",[t]);return this.fromFastBuffer(e.resbuf)}static asyncFromSeed(t){return(new this).asyncFromSeed(t)}fromBuffer(t){if(78!==t.length)throw new Error("incorrect bip32 data length");this.versionBytesNum=t.slice(0,4).readUInt32BE(0),this.depth=t.slice(4,5).readUInt8(0),this.parentFingerPrint=t.slice(5,9),this.childIndex=t.slice(9,13).readUInt32BE(0),this.chainCode=t.slice(13,45);const e=t.slice(45,78),r=this.versionBytesNum===this.Constants.privKey,i=this.versionBytesNum===this.Constants.pubKey;if(r&&0===e[0])this.privKey=(new this.PrivKey).fromBn(v().fromBuffer(e.slice(1,33))),this.pubKey=(new V).fromPrivKey(this.privKey);else{if(!i||2!==e[0]&&3!==e[0])throw new Error("Invalid key");this.pubKey=(new V).fromDer(e)}return this}fromFastBuffer(t){if(0===t.length)return this;if(78!==t.length&&111!==t.length)throw new Error("incorrect bip32 fastBuffer data length: "+t.length);this.versionBytesNum=t.slice(0,4).readUInt32BE(0),this.depth=t.slice(4,5).readUInt8(0),this.parentFingerPrint=t.slice(5,9),this.childIndex=t.slice(9,13).readUInt32BE(0),this.chainCode=t.slice(13,45);const e=t.slice(45,t.length),r=this.versionBytesNum===this.Constants.privKey,i=this.versionBytesNum===this.Constants.pubKey;if(r&&0===e[0]&&78===t.length)this.privKey=(new this.PrivKey).fromBn(v().fromBuffer(e.slice(1,33))),this.pubKey=(new V).fromPrivKey(this.privKey);else{if(!i||111!==t.length)throw new Error("Invalid key");this.pubKey=(new V).fromFastBuffer(e),this.pubKey.compressed=!0}return this}derive(t){const e=t.split("/");if("m"===t)return this;let r=this;for(const t in e){const i=e[t];if("0"===t){if("m"!==i)throw new Error("invalid path");continue}if(parseInt(i.replace("'",""),10).toString()!==i.replace("'",""))throw new Error("invalid path");const s=i.length>1&&"'"===i[i.length-1];let n=2147483647&parseInt(s?i.slice(0,i.length-1):i,10);s&&(n+=2147483648),r=r.deriveChild(n)}return r}async asyncDerive(t){const e=await A.asyncObjectMethod(this,"derive",[t]);return(new this.constructor).fromFastBuffer(e.resbuf)}deriveChild(e){if("number"!=typeof e)throw new Error("i must be a number");let r=[];r.push(e>>24&255),r.push(e>>16&255),r.push(e>>8&255),r.push(255&e),r=t.from(r);const i=0!=(2147483648&e),s=this.versionBytesNum===this.Constants.privKey;if(i&&(!this.privKey||!s))throw new Error("Cannot do private key derivation without private key");let n=null;if(this.privKey){let e=null;e=i?t.concat([t.from([0]),this.privKey.bn.toBuffer({size:32}),r]):t.concat([this.pubKey.toBuffer({size:32}),r]);const s=M.sha512Hmac(e,this.chainCode),o=v().fromBuffer(s.slice(0,32),{size:32}),h=s.slice(32,64),u=o.add(this.privKey.bn).mod(D.getN());n=new this.constructor,n.chainCode=h,n.privKey=(new this.PrivKey).fromBn(u),n.pubKey=(new V).fromPrivKey(n.privKey)}else{const e=t.concat([this.pubKey.toBuffer(),r]),i=M.sha512Hmac(e,this.chainCode),s=v().fromBuffer(i.slice(0,32)),o=i.slice(32,64),h=D.getG().mul(s),u=this.pubKey.point,a=h.add(u),c=new V;c.point=a,n=new this.constructor,n.chainCode=o,n.pubKey=c}n.childIndex=e;const o=M.sha256Ripemd160(this.pubKey.toBuffer());return n.parentFingerPrint=o.slice(0,4),n.versionBytesNum=this.versionBytesNum,n.depth=this.depth+1,n}toPublic(){const t=(new this.constructor).fromObject(this);return t.versionBytesNum=this.Constants.pubKey,t.privKey=void 0,t}toBuffer(){const t=this.versionBytesNum===this.Constants.privKey,e=this.versionBytesNum===this.Constants.pubKey;if(t)return(new I).writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).writeUInt8(0).write(this.privKey.bn.toBuffer({size:32})).toBuffer();if(e){if(!1===this.pubKey.compressed)throw new Error("cannot convert bip32 to buffer if pubKey is not compressed");return(new I).writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).write(this.pubKey.toBuffer()).toBuffer()}throw new Error("bip32: invalid versionBytesNum byte")}toFastBuffer(){if(!this.versionBytesNum)return t.alloc(0);const e=this.versionBytesNum===this.Constants.privKey,r=this.versionBytesNum===this.Constants.pubKey;if(e)return(new I).writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).writeUInt8(0).write(this.privKey.bn.toBuffer({size:32})).toBuffer();if(r)return(new I).writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).write(this.pubKey.toFastBuffer()).toBuffer();throw new Error("bip32: invalid versionBytesNum byte")}toString(){return x.encode(this.toBuffer())}async asyncToString(){const t=await A.asyncObjectMethod(this,"toString",[]);return JSON.parse(t.resbuf.toString())}toJSON(){return this.toFastHex()}fromJSON(t){return this.fromFastHex(t)}isPrivate(){return this.versionBytesNum===this.Constants.privKey}}z.Mainnet=class extends z{constructor(t,e,r,i,s,n,o){super(t,e,r,i,s,n,o,H.Mainnet.Bip32,Y.Mainnet)}},z.Testnet=class extends z{constructor(t,e,r,i,s,n,o){super(t,e,r,i,s,n,o,H.Testnet.Bip32,Y.Testnet)}};const Q=["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"];Q.space=" ";class W extends B{constructor(t,e,r=Q){super({mnemonic:t,seed:e}),this.Wordlist=r}toBw(e){if(e||(e=new I),this.mnemonic){const r=t.from(this.mnemonic);e.writeVarIntNum(r.length),e.write(r)}else e.writeVarIntNum(0);return this.seed?(e.writeVarIntNum(this.seed.length),e.write(this.seed)):e.writeVarIntNum(0),e}fromBr(t){const e=t.readVarIntNum();e>0&&(this.mnemonic=t.read(e).toString());const r=t.readVarIntNum();return r>0&&(this.seed=t.read(r)),this}fromRandom(t){if(t||(t=128),t%32!=0)throw new Error("bits must be multiple of 32");if(t<128)throw new Error("bits must be at least 128");const e=j.getRandomBuffer(t/8);return this.entropy2Mnemonic(e),this.mnemonic2Seed(),this}static fromRandom(t){return(new this).fromRandom(t)}async asyncFromRandom(t){t||(t=128);const e=j.getRandomBuffer(t/8);let r=await A.asyncObjectMethod(this,"entropy2Mnemonic",[e]);const i=(new W).fromFastBuffer(r.resbuf);return r=await A.asyncObjectMethod(i,"mnemonic2Seed",[]),this.fromFastBuffer(r.resbuf)}static asyncFromRandom(t){return(new this).asyncFromRandom(t)}fromEntropy(t){return this.entropy2Mnemonic(t),this}static fromEntropy(t){return(new this).fromEntropy(t)}async asyncFromEntropy(t){const e=await A.asyncObjectMethod(this,"fromEntropy",[t]);return this.fromFastBuffer(e.resbuf)}static asyncFromEntropy(t){return(new this).asyncFromEntropy(t)}fromString(t){return this.mnemonic=t,this}toString(){return this.mnemonic}toSeed(t){return this.mnemonic2Seed(t),this.seed}async asyncToSeed(t){void 0===t&&(t="");const e=[t];return(await A.asyncObjectMethod(this,"toSeed",e)).resbuf}entropy2Mnemonic(e){if(!t.isBuffer(e)||e.length<16)throw new Error("Entropy is less than 128 bits. It must be 128 bits or more.");const r=M.sha256(e);let i="";const s=8*e.length;for(let t=0;t<e.length;t++)i+=("00000000"+e[t].toString(2)).slice(-8);let n=r[0].toString(2);if(n=("00000000"+n).slice(-8).slice(0,s/32),i+=n,i.length%11!=0)throw new Error("internal error - entropy not an even multiple of 11 bits - "+i.length);let o="";for(let t=0;t<i.length/11;t++){""!==o&&(o+=this.Wordlist.space);const e=parseInt(i.slice(11*t,11*(t+1)),2);o+=this.Wordlist[e]}return this.mnemonic=o,this}check(){const e=this.mnemonic.split(this.Wordlist.space);let r="";for(let t=0;t<e.length;t++){const i=this.Wordlist.indexOf(e[t]);if(i<0)return!1;r+=("00000000000"+i.toString(2)).slice(-11)}if(r.length%11!=0)throw new Error("internal error - entropy not an even multiple of 11 bits - "+r.length);const i=r.length/33,s=r.slice(-i),n=r.slice(0,r.length-i),o=t.alloc(n.length/8);for(let t=0;t<n.length/8;t++)o.writeUInt8(parseInt(r.slice(8*t,8*(t+1)),2),t);let h=M.sha256(o)[0].toString(2);return h=("00000000"+h).slice(-8).slice(0,i),h===s}mnemonic2Seed(e=""){let r=this.mnemonic;if(!this.check())throw new Error("Mnemonic does not pass the check - was the mnemonic typed incorrectly? Are there extra spaces?");if("string"!=typeof e)throw new Error("passphrase must be a string or undefined");r=r.normalize("NFKD"),e=e.normalize("NFKD");const i=t.from(r),s=t.concat([t.from("mnemonic"),t.from(e)]);return this.seed=d.a.pbkdf2Sync(i,s,2048,64,"sha512"),this}isValid(t=""){let e;try{e=!!this.mnemonic2Seed(t)}catch(t){e=!1}return e}static isValid(t,e=""){return new W(t).isValid(e)}}const X=["あいこくしん","あいさつ","あいだ","あおぞら","あかちゃん","あきる","あけがた","あける","あこがれる","あさい","あさひ","あしあと","あじわう","あずかる","あずき","あそぶ","あたえる","あたためる","あたりまえ","あたる","あつい","あつかう","あっしゅく","あつまり","あつめる","あてな","あてはまる","あひる","あぶら","あぶる","あふれる","あまい","あまど","あまやかす","あまり","あみもの","あめりか","あやまる","あゆむ","あらいぐま","あらし","あらすじ","あらためる","あらゆる","あらわす","ありがとう","あわせる","あわてる","あんい","あんがい","あんこ","あんぜん","あんてい","あんない","あんまり","いいだす","いおん","いがい","いがく","いきおい","いきなり","いきもの","いきる","いくじ","いくぶん","いけばな","いけん","いこう","いこく","いこつ","いさましい","いさん","いしき","いじゅう","いじょう","いじわる","いずみ","いずれ","いせい","いせえび","いせかい","いせき","いぜん","いそうろう","いそがしい","いだい","いだく","いたずら","いたみ","いたりあ","いちおう","いちじ","いちど","いちば","いちぶ","いちりゅう","いつか","いっしゅん","いっせい","いっそう","いったん","いっち","いってい","いっぽう","いてざ","いてん","いどう","いとこ","いない","いなか","いねむり","いのち","いのる","いはつ","いばる","いはん","いびき","いひん","いふく","いへん","いほう","いみん","いもうと","いもたれ","いもり","いやがる","いやす","いよかん","いよく","いらい","いらすと","いりぐち","いりょう","いれい","いれもの","いれる","いろえんぴつ","いわい","いわう","いわかん","いわば","いわゆる","いんげんまめ","いんさつ","いんしょう","いんよう","うえき","うえる","うおざ","うがい","うかぶ","うかべる","うきわ","うくらいな","うくれれ","うけたまわる","うけつけ","うけとる","うけもつ","うける","うごかす","うごく","うこん","うさぎ","うしなう","うしろがみ","うすい","うすぎ","うすぐらい","うすめる","うせつ","うちあわせ","うちがわ","うちき","うちゅう","うっかり","うつくしい","うったえる","うつる","うどん","うなぎ","うなじ","うなずく","うなる","うねる","うのう","うぶげ","うぶごえ","うまれる","うめる","うもう","うやまう","うよく","うらがえす","うらぐち","うらない","うりあげ","うりきれ","うるさい","うれしい","うれゆき","うれる","うろこ","うわき","うわさ","うんこう","うんちん","うんてん","うんどう","えいえん","えいが","えいきょう","えいご","えいせい","えいぶん","えいよう","えいわ","えおり","えがお","えがく","えきたい","えくせる","えしゃく","えすて","えつらん","えのぐ","えほうまき","えほん","えまき","えもじ","えもの","えらい","えらぶ","えりあ","えんえん","えんかい","えんぎ","えんげき","えんしゅう","えんぜつ","えんそく","えんちょう","えんとつ","おいかける","おいこす","おいしい","おいつく","おうえん","おうさま","おうじ","おうせつ","おうたい","おうふく","おうべい","おうよう","おえる","おおい","おおう","おおどおり","おおや","おおよそ","おかえり","おかず","おがむ","おかわり","おぎなう","おきる","おくさま","おくじょう","おくりがな","おくる","おくれる","おこす","おこなう","おこる","おさえる","おさない","おさめる","おしいれ","おしえる","おじぎ","おじさん","おしゃれ","おそらく","おそわる","おたがい","おたく","おだやか","おちつく","おっと","おつり","おでかけ","おとしもの","おとなしい","おどり","おどろかす","おばさん","おまいり","おめでとう","おもいで","おもう","おもたい","おもちゃ","おやつ","おやゆび","およぼす","おらんだ","おろす","おんがく","おんけい","おんしゃ","おんせん","おんだん","おんちゅう","おんどけい","かあつ","かいが","がいき","がいけん","がいこう","かいさつ","かいしゃ","かいすいよく","かいぜん","かいぞうど","かいつう","かいてん","かいとう","かいふく","がいへき","かいほう","かいよう","がいらい","かいわ","かえる","かおり","かかえる","かがく","かがし","かがみ","かくご","かくとく","かざる","がぞう","かたい","かたち","がちょう","がっきゅう","がっこう","がっさん","がっしょう","かなざわし","かのう","がはく","かぶか","かほう","かほご","かまう","かまぼこ","かめれおん","かゆい","かようび","からい","かるい","かろう","かわく","かわら","がんか","かんけい","かんこう","かんしゃ","かんそう","かんたん","かんち","がんばる","きあい","きあつ","きいろ","ぎいん","きうい","きうん","きえる","きおう","きおく","きおち","きおん","きかい","きかく","きかんしゃ","ききて","きくばり","きくらげ","きけんせい","きこう","きこえる","きこく","きさい","きさく","きさま","きさらぎ","ぎじかがく","ぎしき","ぎじたいけん","ぎじにってい","ぎじゅつしゃ","きすう","きせい","きせき","きせつ","きそう","きぞく","きぞん","きたえる","きちょう","きつえん","ぎっちり","きつつき","きつね","きてい","きどう","きどく","きない","きなが","きなこ","きぬごし","きねん","きのう","きのした","きはく","きびしい","きひん","きふく","きぶん","きぼう","きほん","きまる","きみつ","きむずかしい","きめる","きもだめし","きもち","きもの","きゃく","きやく","ぎゅうにく","きよう","きょうりゅう","きらい","きらく","きりん","きれい","きれつ","きろく","ぎろん","きわめる","ぎんいろ","きんかくじ","きんじょ","きんようび","ぐあい","くいず","くうかん","くうき","くうぐん","くうこう","ぐうせい","くうそう","ぐうたら","くうふく","くうぼ","くかん","くきょう","くげん","ぐこう","くさい","くさき","くさばな","くさる","くしゃみ","くしょう","くすのき","くすりゆび","くせげ","くせん","ぐたいてき","くださる","くたびれる","くちこみ","くちさき","くつした","ぐっすり","くつろぐ","くとうてん","くどく","くなん","くねくね","くのう","くふう","くみあわせ","くみたてる","くめる","くやくしょ","くらす","くらべる","くるま","くれる","くろう","くわしい","ぐんかん","ぐんしょく","ぐんたい","ぐんて","けあな","けいかく","けいけん","けいこ","けいさつ","げいじゅつ","けいたい","げいのうじん","けいれき","けいろ","けおとす","けおりもの","げきか","げきげん","げきだん","げきちん","げきとつ","げきは","げきやく","げこう","げこくじょう","げざい","けさき","げざん","けしき","けしごむ","けしょう","げすと","けたば","けちゃっぷ","けちらす","けつあつ","けつい","けつえき","けっこん","けつじょ","けっせき","けってい","けつまつ","げつようび","げつれい","けつろん","げどく","けとばす","けとる","けなげ","けなす","けなみ","けぬき","げねつ","けねん","けはい","げひん","けぶかい","げぼく","けまり","けみかる","けむし","けむり","けもの","けらい","けろけろ","けわしい","けんい","けんえつ","けんお","けんか","げんき","けんげん","けんこう","けんさく","けんしゅう","けんすう","げんそう","けんちく","けんてい","けんとう","けんない","けんにん","げんぶつ","けんま","けんみん","けんめい","けんらん","けんり","こあくま","こいぬ","こいびと","ごうい","こうえん","こうおん","こうかん","ごうきゅう","ごうけい","こうこう","こうさい","こうじ","こうすい","ごうせい","こうそく","こうたい","こうちゃ","こうつう","こうてい","こうどう","こうない","こうはい","ごうほう","ごうまん","こうもく","こうりつ","こえる","こおり","ごかい","ごがつ","ごかん","こくご","こくさい","こくとう","こくない","こくはく","こぐま","こけい","こける","ここのか","こころ","こさめ","こしつ","こすう","こせい","こせき","こぜん","こそだて","こたい","こたえる","こたつ","こちょう","こっか","こつこつ","こつばん","こつぶ","こてい","こてん","ことがら","ことし","ことば","ことり","こなごな","こねこね","このまま","このみ","このよ","ごはん","こひつじ","こふう","こふん","こぼれる","ごまあぶら","こまかい","ごますり","こまつな","こまる","こむぎこ","こもじ","こもち","こもの","こもん","こやく","こやま","こゆう","こゆび","こよい","こよう","こりる","これくしょん","ころっけ","こわもて","こわれる","こんいん","こんかい","こんき","こんしゅう","こんすい","こんだて","こんとん","こんなん","こんびに","こんぽん","こんまけ","こんや","こんれい","こんわく","ざいえき","さいかい","さいきん","ざいげん","ざいこ","さいしょ","さいせい","ざいたく","ざいちゅう","さいてき","ざいりょう","さうな","さかいし","さがす","さかな","さかみち","さがる","さぎょう","さくし","さくひん","さくら","さこく","さこつ","さずかる","ざせき","さたん","さつえい","ざつおん","ざっか","ざつがく","さっきょく","ざっし","さつじん","ざっそう","さつたば","さつまいも","さてい","さといも","さとう","さとおや","さとし","さとる","さのう","さばく","さびしい","さべつ","さほう","さほど","さます","さみしい","さみだれ","さむけ","さめる","さやえんどう","さゆう","さよう","さよく","さらだ","ざるそば","さわやか","さわる","さんいん","さんか","さんきゃく","さんこう","さんさい","ざんしょ","さんすう","さんせい","さんそ","さんち","さんま","さんみ","さんらん","しあい","しあげ","しあさって","しあわせ","しいく","しいん","しうち","しえい","しおけ","しかい","しかく","じかん","しごと","しすう","じだい","したうけ","したぎ","したて","したみ","しちょう","しちりん","しっかり","しつじ","しつもん","してい","してき","してつ","じてん","じどう","しなぎれ","しなもの","しなん","しねま","しねん","しのぐ","しのぶ","しはい","しばかり","しはつ","しはらい","しはん","しひょう","しふく","じぶん","しへい","しほう","しほん","しまう","しまる","しみん","しむける","じむしょ","しめい","しめる","しもん","しゃいん","しゃうん","しゃおん","じゃがいも","しやくしょ","しゃくほう","しゃけん","しゃこ","しゃざい","しゃしん","しゃせん","しゃそう","しゃたい","しゃちょう","しゃっきん","じゃま","しゃりん","しゃれい","じゆう","じゅうしょ","しゅくはく","じゅしん","しゅっせき","しゅみ","しゅらば","じゅんばん","しょうかい","しょくたく","しょっけん","しょどう","しょもつ","しらせる","しらべる","しんか","しんこう","じんじゃ","しんせいじ","しんちく","しんりん","すあげ","すあし","すあな","ずあん","すいえい","すいか","すいとう","ずいぶん","すいようび","すうがく","すうじつ","すうせん","すおどり","すきま","すくう","すくない","すける","すごい","すこし","ずさん","すずしい","すすむ","すすめる","すっかり","ずっしり","ずっと","すてき","すてる","すねる","すのこ","すはだ","すばらしい","ずひょう","ずぶぬれ","すぶり","すふれ","すべて","すべる","ずほう","すぼん","すまい","すめし","すもう","すやき","すらすら","するめ","すれちがう","すろっと","すわる","すんぜん","すんぽう","せあぶら","せいかつ","せいげん","せいじ","せいよう","せおう","せかいかん","せきにん","せきむ","せきゆ","せきらんうん","せけん","せこう","せすじ","せたい","せたけ","せっかく","せっきゃく","ぜっく","せっけん","せっこつ","せっさたくま","せつぞく","せつだん","せつでん","せっぱん","せつび","せつぶん","せつめい","せつりつ","せなか","せのび","せはば","せびろ","せぼね","せまい","せまる","せめる","せもたれ","せりふ","ぜんあく","せんい","せんえい","せんか","せんきょ","せんく","せんげん","ぜんご","せんさい","せんしゅ","せんすい","せんせい","せんぞ","せんたく","せんちょう","せんてい","せんとう","せんぬき","せんねん","せんぱい","ぜんぶ","ぜんぽう","せんむ","せんめんじょ","せんもん","せんやく","せんゆう","せんよう","ぜんら","ぜんりゃく","せんれい","せんろ","そあく","そいとげる","そいね","そうがんきょう","そうき","そうご","そうしん","そうだん","そうなん","そうび","そうめん","そうり","そえもの","そえん","そがい","そげき","そこう","そこそこ","そざい","そしな","そせい","そせん","そそぐ","そだてる","そつう","そつえん","そっかん","そつぎょう","そっけつ","そっこう","そっせん","そっと","そとがわ","そとづら","そなえる","そなた","そふぼ","そぼく","そぼろ","そまつ","そまる","そむく","そむりえ","そめる","そもそも","そよかぜ","そらまめ","そろう","そんかい","そんけい","そんざい","そんしつ","そんぞく","そんちょう","ぞんび","ぞんぶん","そんみん","たあい","たいいん","たいうん","たいえき","たいおう","だいがく","たいき","たいぐう","たいけん","たいこ","たいざい","だいじょうぶ","だいすき","たいせつ","たいそう","だいたい","たいちょう","たいてい","だいどころ","たいない","たいねつ","たいのう","たいはん","だいひょう","たいふう","たいへん","たいほ","たいまつばな","たいみんぐ","たいむ","たいめん","たいやき","たいよう","たいら","たいりょく","たいる","たいわん","たうえ","たえる","たおす","たおる","たおれる","たかい","たかね","たきび","たくさん","たこく","たこやき","たさい","たしざん","だじゃれ","たすける","たずさわる","たそがれ","たたかう","たたく","ただしい","たたみ","たちばな","だっかい","だっきゃく","だっこ","だっしゅつ","だったい","たてる","たとえる","たなばた","たにん","たぬき","たのしみ","たはつ","たぶん","たべる","たぼう","たまご","たまる","だむる","ためいき","ためす","ためる","たもつ","たやすい","たよる","たらす","たりきほんがん","たりょう","たりる","たると","たれる","たれんと","たろっと","たわむれる","だんあつ","たんい","たんおん","たんか","たんき","たんけん","たんご","たんさん","たんじょうび","だんせい","たんそく","たんたい","だんち","たんてい","たんとう","だんな","たんにん","だんねつ","たんのう","たんぴん","だんぼう","たんまつ","たんめい","だんれつ","だんろ","だんわ","ちあい","ちあん","ちいき","ちいさい","ちえん","ちかい","ちから","ちきゅう","ちきん","ちけいず","ちけん","ちこく","ちさい","ちしき","ちしりょう","ちせい","ちそう","ちたい","ちたん","ちちおや","ちつじょ","ちてき","ちてん","ちぬき","ちぬり","ちのう","ちひょう","ちへいせん","ちほう","ちまた","ちみつ","ちみどろ","ちめいど","ちゃんこなべ","ちゅうい","ちゆりょく","ちょうし","ちょさくけん","ちらし","ちらみ","ちりがみ","ちりょう","ちるど","ちわわ","ちんたい","ちんもく","ついか","ついたち","つうか","つうじょう","つうはん","つうわ","つかう","つかれる","つくね","つくる","つけね","つける","つごう","つたえる","つづく","つつじ","つつむ","つとめる","つながる","つなみ","つねづね","つのる","つぶす","つまらない","つまる","つみき","つめたい","つもり","つもる","つよい","つるぼ","つるみく","つわもの","つわり","てあし","てあて","てあみ","ていおん","ていか","ていき","ていけい","ていこく","ていさつ","ていし","ていせい","ていたい","ていど","ていねい","ていひょう","ていへん","ていぼう","てうち","ておくれ","てきとう","てくび","でこぼこ","てさぎょう","てさげ","てすり","てそう","てちがい","てちょう","てつがく","てつづき","でっぱ","てつぼう","てつや","でぬかえ","てぬき","てぬぐい","てのひら","てはい","てぶくろ","てふだ","てほどき","てほん","てまえ","てまきずし","てみじか","てみやげ","てらす","てれび","てわけ","てわたし","でんあつ","てんいん","てんかい","てんき","てんぐ","てんけん","てんごく","てんさい","てんし","てんすう","でんち","てんてき","てんとう","てんない","てんぷら","てんぼうだい","てんめつ","てんらんかい","でんりょく","でんわ","どあい","といれ","どうかん","とうきゅう","どうぐ","とうし","とうむぎ","とおい","とおか","とおく","とおす","とおる","とかい","とかす","ときおり","ときどき","とくい","とくしゅう","とくてん","とくに","とくべつ","とけい","とける","とこや","とさか","としょかん","とそう","とたん","とちゅう","とっきゅう","とっくん","とつぜん","とつにゅう","とどける","ととのえる","とない","となえる","となり","とのさま","とばす","どぶがわ","とほう","とまる","とめる","ともだち","ともる","どようび","とらえる","とんかつ","どんぶり","ないかく","ないこう","ないしょ","ないす","ないせん","ないそう","なおす","ながい","なくす","なげる","なこうど","なさけ","なたでここ","なっとう","なつやすみ","ななおし","なにごと","なにもの","なにわ","なのか","なふだ","なまいき","なまえ","なまみ","なみだ","なめらか","なめる","なやむ","ならう","ならび","ならぶ","なれる","なわとび","なわばり","にあう","にいがた","にうけ","におい","にかい","にがて","にきび","にくしみ","にくまん","にげる","にさんかたんそ","にしき","にせもの","にちじょう","にちようび","にっか","にっき","にっけい","にっこう","にっさん","にっしょく","にっすう","にっせき","にってい","になう","にほん","にまめ","にもつ","にやり","にゅういん","にりんしゃ","にわとり","にんい","にんか","にんき","にんげん","にんしき","にんずう","にんそう","にんたい","にんち","にんてい","にんにく","にんぷ","にんまり","にんむ","にんめい","にんよう","ぬいくぎ","ぬかす","ぬぐいとる","ぬぐう","ぬくもり","ぬすむ","ぬまえび","ぬめり","ぬらす","ぬんちゃく","ねあげ","ねいき","ねいる","ねいろ","ねぐせ","ねくたい","ねくら","ねこぜ","ねこむ","ねさげ","ねすごす","ねそべる","ねだん","ねつい","ねっしん","ねつぞう","ねったいぎょ","ねぶそく","ねふだ","ねぼう","ねほりはほり","ねまき","ねまわし","ねみみ","ねむい","ねむたい","ねもと","ねらう","ねわざ","ねんいり","ねんおし","ねんかん","ねんきん","ねんぐ","ねんざ","ねんし","ねんちゃく","ねんど","ねんぴ","ねんぶつ","ねんまつ","ねんりょう","ねんれい","のいず","のおづま","のがす","のきなみ","のこぎり","のこす","のこる","のせる","のぞく","のぞむ","のたまう","のちほど","のっく","のばす","のはら","のべる","のぼる","のみもの","のやま","のらいぬ","のらねこ","のりもの","のりゆき","のれん","のんき","ばあい","はあく","ばあさん","ばいか","ばいく","はいけん","はいご","はいしん","はいすい","はいせん","はいそう","はいち","ばいばい","はいれつ","はえる","はおる","はかい","ばかり","はかる","はくしゅ","はけん","はこぶ","はさみ","はさん","はしご","ばしょ","はしる","はせる","ぱそこん","はそん","はたん","はちみつ","はつおん","はっかく","はづき","はっきり","はっくつ","はっけん","はっこう","はっさん","はっしん","はったつ","はっちゅう","はってん","はっぴょう","はっぽう","はなす","はなび","はにかむ","はぶらし","はみがき","はむかう","はめつ","はやい","はやし","はらう","はろうぃん","はわい","はんい","はんえい","はんおん","はんかく","はんきょう","ばんぐみ","はんこ","はんしゃ","はんすう","はんだん","ぱんち","ぱんつ","はんてい","はんとし","はんのう","はんぱ","はんぶん","はんぺん","はんぼうき","はんめい","はんらん","はんろん","ひいき","ひうん","ひえる","ひかく","ひかり","ひかる","ひかん","ひくい","ひけつ","ひこうき","ひこく","ひさい","ひさしぶり","ひさん","びじゅつかん","ひしょ","ひそか","ひそむ","ひたむき","ひだり","ひたる","ひつぎ","ひっこし","ひっし","ひつじゅひん","ひっす","ひつぜん","ぴったり","ぴっちり","ひつよう","ひてい","ひとごみ","ひなまつり","ひなん","ひねる","ひはん","ひびく","ひひょう","ひほう","ひまわり","ひまん","ひみつ","ひめい","ひめじし","ひやけ","ひやす","ひよう","びょうき","ひらがな","ひらく","ひりつ","ひりょう","ひるま","ひるやすみ","ひれい","ひろい","ひろう","ひろき","ひろゆき","ひんかく","ひんけつ","ひんこん","ひんしゅ","ひんそう","ぴんち","ひんぱん","びんぼう","ふあん","ふいうち","ふうけい","ふうせん","ぷうたろう","ふうとう","ふうふ","ふえる","ふおん","ふかい","ふきん","ふくざつ","ふくぶくろ","ふこう","ふさい","ふしぎ","ふじみ","ふすま","ふせい","ふせぐ","ふそく","ぶたにく","ふたん","ふちょう","ふつう","ふつか","ふっかつ","ふっき","ふっこく","ぶどう","ふとる","ふとん","ふのう","ふはい","ふひょう","ふへん","ふまん","ふみん","ふめつ","ふめん","ふよう","ふりこ","ふりる","ふるい","ふんいき","ぶんがく","ぶんぐ","ふんしつ","ぶんせき","ふんそう","ぶんぽう","へいあん","へいおん","へいがい","へいき","へいげん","へいこう","へいさ","へいしゃ","へいせつ","へいそ","へいたく","へいてん","へいねつ","へいわ","へきが","へこむ","べにいろ","べにしょうが","へらす","へんかん","べんきょう","べんごし","へんさい","へんたい","べんり","ほあん","ほいく","ぼうぎょ","ほうこく","ほうそう","ほうほう","ほうもん","ほうりつ","ほえる","ほおん","ほかん","ほきょう","ぼきん","ほくろ","ほけつ","ほけん","ほこう","ほこる","ほしい","ほしつ","ほしゅ","ほしょう","ほせい","ほそい","ほそく","ほたて","ほたる","ぽちぶくろ","ほっきょく","ほっさ","ほったん","ほとんど","ほめる","ほんい","ほんき","ほんけ","ほんしつ","ほんやく","まいにち","まかい","まかせる","まがる","まける","まこと","まさつ","まじめ","ますく","まぜる","まつり","まとめ","まなぶ","まぬけ","まねく","まほう","まもる","まゆげ","まよう","まろやか","まわす","まわり","まわる","まんが","まんきつ","まんぞく","まんなか","みいら","みうち","みえる","みがく","みかた","みかん","みけん","みこん","みじかい","みすい","みすえる","みせる","みっか","みつかる","みつける","みてい","みとめる","みなと","みなみかさい","みねらる","みのう","みのがす","みほん","みもと","みやげ","みらい","みりょく","みわく","みんか","みんぞく","むいか","むえき","むえん","むかい","むかう","むかえ","むかし","むぎちゃ","むける","むげん","むさぼる","むしあつい","むしば","むじゅん","むしろ","むすう","むすこ","むすぶ","むすめ","むせる","むせん","むちゅう","むなしい","むのう","むやみ","むよう","むらさき","むりょう","むろん","めいあん","めいうん","めいえん","めいかく","めいきょく","めいさい","めいし","めいそう","めいぶつ","めいれい","めいわく","めぐまれる","めざす","めした","めずらしい","めだつ","めまい","めやす","めんきょ","めんせき","めんどう","もうしあげる","もうどうけん","もえる","もくし","もくてき","もくようび","もちろん","もどる","もらう","もんく","もんだい","やおや","やける","やさい","やさしい","やすい","やすたろう","やすみ","やせる","やそう","やたい","やちん","やっと","やっぱり","やぶる","やめる","ややこしい","やよい","やわらかい","ゆうき","ゆうびんきょく","ゆうべ","ゆうめい","ゆけつ","ゆしゅつ","ゆせん","ゆそう","ゆたか","ゆちゃく","ゆでる","ゆにゅう","ゆびわ","ゆらい","ゆれる","ようい","ようか","ようきゅう","ようじ","ようす","ようちえん","よかぜ","よかん","よきん","よくせい","よくぼう","よけい","よごれる","よさん","よしゅう","よそう","よそく","よっか","よてい","よどがわく","よねつ","よやく","よゆう","よろこぶ","よろしい","らいう","らくがき","らくご","らくさつ","らくだ","らしんばん","らせん","らぞく","らたい","らっか","られつ","りえき","りかい","りきさく","りきせつ","りくぐん","りくつ","りけん","りこう","りせい","りそう","りそく","りてん","りねん","りゆう","りゅうがく","りよう","りょうり","りょかん","りょくちゃ","りょこう","りりく","りれき","りろん","りんご","るいけい","るいさい","るいじ","るいせき","るすばん","るりがわら","れいかん","れいぎ","れいせい","れいぞうこ","れいとう","れいぼう","れきし","れきだい","れんあい","れんけい","れんこん","れんさい","れんしゅう","れんぞく","れんらく","ろうか","ろうご","ろうじん","ろうそく","ろくが","ろこつ","ろじうら","ろしゅつ","ろせん","ろてん","ろめん","ろれつ","ろんぎ","ろんぱ","ろんぶん","ろんり","わかす","わかめ","わかやま","わかれる","わしつ","わじまし","わすれもの","わらう","われる"];X.space="　";class Z extends B{constructor(t,e,r=Y){super({privKey:t,pubKey:e}),this.PrivKey=r}fromJSON(t){return t.privKey&&(this.privKey=this.PrivKey.fromJSON(t.privKey)),t.pubKey&&(this.pubKey=V.fromJSON(t.pubKey)),this}fromBr(t){const e=t.readUInt8();e>0&&(this.privKey=(new this.PrivKey).fromFastBuffer(t.read(e)));const r=t.readUInt8();return r>0&&(this.pubKey=(new V).fromFastBuffer(t.read(r))),this}toBw(t){if(t||(t=new I),this.privKey){const e=this.privKey.toFastBuffer();t.writeUInt8(e.length),t.write(e)}else t.writeUInt8(0);if(this.pubKey){const e=this.pubKey.toFastBuffer();t.writeUInt8(e.length),t.write(e)}else t.writeUInt8(0);return t}fromString(t){return this.fromJSON(JSON.parse(t))}toString(){return JSON.stringify(this.toJSON())}toPublic(){const t=(new Z).fromObject(this);return t.privKey=void 0,t}fromPrivKey(t){return this.privKey=t,this.pubKey=(new V).fromPrivKey(t),this}static fromPrivKey(t){return(new this).fromPrivKey(t)}async asyncFromPrivKey(t){return this.privKey=t,this.pubKey=await(new V).asyncFromPrivKey(t),this}static asyncFromPrivKey(t){return(new this).asyncFromPrivKey(t)}fromRandom(){return this.privKey=(new this.PrivKey).fromRandom(),this.pubKey=(new V).fromPrivKey(this.privKey),this}static fromRandom(){return(new this).fromRandom()}async asyncFromRandom(){return this.privKey=(new this.PrivKey).fromRandom(),this.asyncFromPrivKey(this.privKey)}static asyncFromRandom(){return(new this).asyncFromRandom()}}Z.Mainnet=class extends Z{constructor(t,e){super(t,e,Y.Mainnet)}},Z.Testnet=class extends Z{constructor(t,e){super(t,e,Y.Testnet)}};class $ extends B{constructor(t,e,r,i,s,n){super({sig:t,keyPair:e,hashBuf:r,k:i,endian:s,verified:n})}toJSON(){return{sig:this.sig?this.sig.toString():void 0,keyPair:this.keyPair?this.keyPair.toBuffer().toString("hex"):void 0,hashBuf:this.hashBuf?this.hashBuf.toString("hex"):void 0,k:this.k?this.k.toString():void 0,endian:this.endian,verified:this.verified}}fromJSON(e){return this.sig=e.sig?(new G).fromString(e.sig):void 0,this.keyPair=e.keyPair?(new Z).fromBuffer(t.from(e.keyPair,"hex")):void 0,this.hashBuf=e.hashBuf?t.from(e.hashBuf,"hex"):void 0,this.k=e.k?(new v).fromString(e.k):void 0,this.endian=e.endian,this.verified=e.verified,this}toBuffer(){const e=JSON.stringify(this.toJSON());return t.from(e)}fromBuffer(t){const e=JSON.parse(t.toString());return this.fromJSON(e)}calcrecovery(){for(let t=0;t<4;t++){let e;this.sig.recovery=t;try{e=this.sig2PubKey()}catch(t){continue}if(e.point.eq(this.keyPair.pubKey.point)){const t=this.keyPair.pubKey.compressed;return this.sig.compressed=void 0===this.keyPair.pubKey.compressed||t,this}}throw this.sig.recovery=void 0,new Error("Unable to find valid recovery factor")}async asyncCalcrecovery(){const t=await A.asyncObjectMethod(this,"calcrecovery",[]);return this.fromFastBuffer(t.resbuf)}static calcrecovery(t,e,r){return(new $).fromObject({sig:t,keyPair:(new Z).fromObject({pubKey:e}),hashBuf:r}).calcrecovery().sig}static async asyncCalcrecovery(t,e,r){const i=await A.asyncClassMethod($,"calcrecovery",[t,e,r]);return(new G).fromFastBuffer(i.resbuf)}fromString(e){const r=JSON.parse(e);return r.hashBuf&&(this.hashBuf=t.from(r.hashBuf,"hex")),r.keyPair&&(this.keyPair=(new Z).fromString(r.keyPair)),r.sig&&(this.sig=(new G).fromString(r.sig)),r.k&&(this.k=new v(r.k,10)),this}randomK(){const t=D.getN();let e;do{e=(new v).fromBuffer(j.getRandomBuffer(32))}while(!e.lt(t)||!e.gt(0));return this.k=e,this}deterministicK(e){let r=t.alloc(32);r.fill(1);let i=t.alloc(32);i.fill(0);const s=this.keyPair.privKey.bn.toBuffer({size:32});i=M.sha256Hmac(t.concat([r,t.from([0]),s,this.hashBuf]),i),r=M.sha256Hmac(r,i),i=M.sha256Hmac(t.concat([r,t.from([1]),s,this.hashBuf]),i),r=M.sha256Hmac(r,i),r=M.sha256Hmac(r,i);let n=(new v).fromBuffer(r);const o=D.getN();void 0===e&&(e=0);for(let s=0;s<e||!n.lt(o)||!n.gt(0);s++)i=M.sha256Hmac(t.concat([r,t.from([0])]),i),r=M.sha256Hmac(r,i),r=M.sha256Hmac(r,i),n=(new v).fromBuffer(r);return this.k=n,this}sig2PubKey(){const t=this.sig.recovery;if(0!==t&&1!==t&&2!==t&&3!==t)throw new Error("i must be equal to 0, 1, 2, or 3");const e=(new v).fromBuffer(this.hashBuf),r=this.sig.r,i=this.sig.s,s=1&t,n=t>>1,o=D.getN(),h=D.getG(),u=n?r.add(o):r,a=D.fromX(s,u);let c="";try{a.mul(o)}catch(t){c=t.message}if("point mul out of range"!==c)throw new Error("nR is not a valid curve point");const f=e.neg().umod(o),l=r.invm(o),p=a.mul(i).add(h.mul(f)).mul(l),m=new V(p);return m.compressed=this.sig.compressed,m.validate(),m}async asyncSig2PubKey(){const t=await A.asyncObjectMethod(this,"sig2PubKey",[]);return V.fromFastBuffer(t.resbuf)}static sig2PubKey(t,e){return(new $).fromObject({sig:t,hashBuf:e}).sig2PubKey()}static async asyncSig2PubKey(t,e){const r=(new $).fromObject({sig:t,hashBuf:e});return await r.asyncSig2PubKey()}verifyStr(e=!0){if(!t.isBuffer(this.hashBuf)||32!==this.hashBuf.length)return"hashBuf must be a 32 byte buffer";try{this.keyPair.pubKey.validate()}catch(s){return"Invalid pubKey: "+s}const r=this.sig.r,i=this.sig.s;if(!(r.gt(0)&&r.lt(D.getN())&&i.gt(0)&&i.lt(D.getN())))return"r and s not in range";if(e&&!this.sig.hasLowS())return"s is too high and does not satisfy low s contraint - see bip 62";const s=(new v).fromBuffer(this.hashBuf,this.endian?{endian:this.endian}:void 0),n=D.getN(),o=i.invm(n),h=o.mul(s).mod(n),u=o.mul(r).mod(n),a=D.getG().mulAdd(h,this.keyPair.pubKey.point,u);return a.isInfinity()?"p is infinity":0!==a.getX().mod(n).cmp(r)&&"Invalid signature"}sign(){const e="little"===this.endian?new E(this.hashBuf).readReverse():this.hashBuf,r=this.keyPair.privKey,i=r.bn;if(!e||!r||!i)throw new Error("invalid parameters");if(!t.isBuffer(e)||32!==e.length)throw new Error("hashBuf must be a 32 byte buffer");const s=D.getN(),n=D.getG(),o=(new v).fromBuffer(e);let h,u,a,c,f=0;do{(!this.k||f>0)&&this.deterministicK(f),f++,h=this.k,u=n.mul(h),a=u.getX().mod(s),c=h.invm(s).mul(o.add(i.mul(a))).mod(s)}while(a.cmp(0)<=0||c.cmp(0)<=0);return c.gt((new v).fromBuffer(t.from("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0","hex")))&&(c=D.getN().sub(c)),this.sig=G.fromObject({r:a,s:c,compressed:this.keyPair.pubKey.compressed}),this}async asyncSign(){const t=await A.asyncObjectMethod(this,"sign",[]);return this.fromFastBuffer(t.resbuf)}signRandomK(){return this.randomK(),this.sign()}toString(){const t={};return this.hashBuf&&(t.hashBuf=this.hashBuf.toString("hex")),this.keyPair&&(t.keyPair=this.keyPair.toString()),this.sig&&(t.sig=this.sig.toString()),this.k&&(t.k=this.k.toString()),JSON.stringify(t)}verify(t=!0){return this.verifyStr(t)?this.verified=!1:this.verified=!0,this}async asyncVerify(t=!0){const e=await A.asyncObjectMethod(this,"verify",[t]);return this.fromFastBuffer(e.resbuf)}static sign(t,e,r){return(new $).fromObject({hashBuf:t,endian:r,keyPair:e}).sign().sig}static async asyncSign(t,e,r){const i=(new $).fromObject({hashBuf:t,endian:r,keyPair:e});return await i.asyncSign(),i.sig}static verify(t,e,r,i,s=!0){return(new $).fromObject({hashBuf:t,endian:i,sig:e,keyPair:(new Z).fromObject({pubKey:r})}).verify(s).verified}static async asyncVerify(t,e,r,i,s=!0){const n=(new $).fromObject({hashBuf:t,endian:i,sig:e,keyPair:(new Z).fromObject({pubKey:r})});return await n.asyncVerify(s),n.verified}}class tt extends B{constructor(t,e,r,i,s){super({messageBuf:t,keyPair:e,sig:r,address:i,verified:s})}static magicHash(e){if(!t.isBuffer(e))throw new Error("messageBuf must be a buffer");const r=new I;r.writeVarIntNum(tt.magicBytes.length),r.write(tt.magicBytes),r.writeVarIntNum(e.length),r.write(e);const i=r.toBuffer();return M.sha256Sha256(i)}static async asyncMagicHash(t){const e=[t];return(await A.asyncClassMethod(tt,"magicHash",e)).resbuf}static sign(t,e){const r=new tt(t,e);r.sign();return r.sig.toCompact().toString("base64")}static async asyncSign(t,e){const r=[t,e],i=await A.asyncClassMethod(tt,"sign",r);return JSON.parse(i.resbuf.toString())}static verify(e,r,i){const s=t.from(r,"base64"),n=new tt;return n.messageBuf=e,n.sig=(new G).fromCompact(s),n.address=i,n.verify().verified}static async asyncVerify(t,e,r){const i=[t,e,r],s=await A.asyncClassMethod(tt,"verify",i);return JSON.parse(s.resbuf.toString())}sign(){const t=tt.magicHash(this.messageBuf),e=(new $).fromObject({hashBuf:t,keyPair:this.keyPair});return e.sign(),e.calcrecovery(),this.sig=e.sig,this}verify(){const t=tt.magicHash(this.messageBuf),e=new $;if(e.hashBuf=t,e.sig=this.sig,e.keyPair=new Z,e.keyPair.pubKey=e.sig2PubKey(),!e.verify())return this.verified=!1,this;const r=(new q).fromPubKey(e.keyPair.pubKey,void 0,this.sig.compressed);return k(r.hashBuf,this.address.hashBuf)?this.verified=!0:this.verified=!1,this}}tt.magicBytes=t.from("Bitcoin Signed Message:\n");class et extends B{constructor(t,e,r,i,s,n){super({versionBytesNum:t,prevBlockHashBuf:e,merkleRootBuf:r,time:i,bits:s,nonce:n})}fromJSON(e){return this.fromObject({versionBytesNum:e.versionBytesNum,prevBlockHashBuf:t.from(e.prevBlockHashBuf,"hex"),merkleRootBuf:t.from(e.merkleRootBuf,"hex"),time:e.time,bits:e.bits,nonce:e.nonce}),this}toJSON(){return{versionBytesNum:this.versionBytesNum,prevBlockHashBuf:this.prevBlockHashBuf.toString("hex"),merkleRootBuf:this.merkleRootBuf.toString("hex"),time:this.time,bits:this.bits,nonce:this.nonce}}fromBr(t){return this.versionBytesNum=t.readUInt32LE(),this.prevBlockHashBuf=t.read(32),this.merkleRootBuf=t.read(32),this.time=t.readUInt32LE(),this.bits=t.readUInt32LE(),this.nonce=t.readUInt32LE(),this}toBw(t){return t||(t=new I),t.writeUInt32LE(this.versionBytesNum),t.write(this.prevBlockHashBuf),t.write(this.merkleRootBuf),t.writeUInt32LE(this.time),t.writeUInt32LE(this.bits),t.writeUInt32LE(this.nonce),t}}class rt extends B{constructor(t,e,r,i){super({hashBuf:t,buf:e,merkle1:r,merkle2:i})}hash(){if(this.hashBuf)return this.hashBuf;if(this.buf)return M.sha256Sha256(this.buf);const e=this.merkle1.hash(),r=this.merkle2.hash();return this.buf=t.concat([e,r]),M.sha256Sha256(this.buf)}fromBuffers(t){if(t.length<1)throw new Error("buffers must have a length");t=t.slice();const e=Math.log2(t.length);if(!Number.isInteger(e)){const i=t[t.length-1];var r=Math.pow(2,Math.ceil(e));for(let e=t.length;e<r;e++)t.push(i)}const i=t.slice(0,t.length/2),s=t.slice(t.length/2);return this.fromBufferArrays(i,s),this}static fromBuffers(t){return(new this).fromBuffers(t)}fromBufferArrays(t,e){if(1===t.length)return this.merkle1=new rt(void 0,t[0]),this.merkle2=new rt(void 0,e[0]),this;const r=t.slice(0,t.length/2),i=t.slice(t.length/2);this.merkle1=(new rt).fromBufferArrays(r,i);const s=e.slice(0,e.length/2),n=e.slice(e.length/2);return this.merkle2=(new rt).fromBufferArrays(s,n),this}static fromBufferArrays(t,e){return(new this).fromBufferArrays(t,e)}leavesNum(){if(this.merkle1)return this.merkle1.leavesNum()+this.merkle2.leavesNum();if(this.buf)return 1;throw new Error("invalid number of leaves")}}class it extends B{constructor(t,e,r){super(),this.fromObject({prevoutsHashBuf:t,sequenceHashBuf:e,outputsHashBuf:r})}fromBuffer(t){return this.fromJSON(JSON.parse(t.toString()))}toBuffer(){return t.from(JSON.stringify(this.toJSON()))}fromJSON(e){return this.prevoutsHashBuf=e.prevoutsHashBuf?t.from(e.prevoutsHashBuf,"hex"):void 0,this.sequenceHashBuf=e.sequenceHashBuf?t.from(e.sequenceHashBuf,"hex"):void 0,this.outputsHashBuf=e.outputsHashBuf?t.from(e.outputsHashBuf,"hex"):void 0,this}toJSON(){return{prevoutsHashBuf:this.prevoutsHashBuf?this.prevoutsHashBuf.toString("hex"):void 0,sequenceHashBuf:this.sequenceHashBuf?this.sequenceHashBuf.toString("hex"):void 0,outputsHashBuf:this.outputsHashBuf?this.outputsHashBuf.toString("hex"):void 0}}}class st extends B{constructor(t){super({buf:t})}fromJSON(e){return this.fromObject({buf:t.from(e,"hex")}),this}toJSON(){return this.buf.toString("hex")}fromBuffer(t){return this.buf=t,this}fromBr(t){return this.buf=t.readVarIntBuf(),this}fromBn(t){return this.buf=(new I).writeVarIntBn(t).toBuffer(),this}static fromBn(t){return(new this).fromBn(t)}fromNumber(t){return this.buf=(new I).writeVarIntNum(t).toBuffer(),this}static fromNumber(t){return(new this).fromNumber(t)}toBuffer(){return this.buf}toBn(){return new E(this.buf).readVarIntBn()}toNumber(){return new E(this.buf).readVarIntNum()}}class nt extends B{constructor(t,e,r,i,s=4294967295){super({txHashBuf:t,txOutNum:e,scriptVi:r,script:i,nSequence:s})}setScript(t){return this.scriptVi=st.fromNumber(t.toBuffer().length),this.script=t,this}fromProperties(t,e,r,i){return this.fromObject({txHashBuf:t,txOutNum:e,nSequence:i}),this.setScript(r),this}static fromProperties(t,e,r,i){return(new this).fromProperties(t,e,r,i)}fromJSON(e){return this.fromObject({txHashBuf:void 0!==e.txHashBuf?t.from(e.txHashBuf,"hex"):void 0,txOutNum:e.txOutNum,scriptVi:void 0!==e.scriptVi?st.fromJSON(e.scriptVi):void 0,script:void 0!==e.script?J.fromJSON(e.script):void 0,nSequence:e.nSequence}),this}toJSON(){return{txHashBuf:void 0!==this.txHashBuf?this.txHashBuf.toString("hex"):void 0,txOutNum:this.txOutNum,scriptVi:void 0!==this.scriptVi?this.scriptVi.toJSON():void 0,script:void 0!==this.script?this.script.toJSON():void 0,nSequence:this.nSequence}}fromBr(t){return this.txHashBuf=t.read(32),this.txOutNum=t.readUInt32LE(),this.scriptVi=st.fromBuffer(t.readVarIntBuf()),this.script=J.fromBuffer(t.read(this.scriptVi.toNumber())),this.nSequence=t.readUInt32LE(),this}toBw(t){return t||(t=new I),t.write(this.txHashBuf),t.writeUInt32LE(this.txOutNum),t.write(this.scriptVi.buf),t.write(this.script.toBuffer()),t.writeUInt32LE(this.nSequence),t}fromPubKeyHashTxOut(t,e,r,i){const s=new J;if(!r.script.isPubKeyHashOut())throw new Error("txOut must be of type pubKeyHash");return s.writeOpCode(F.OP_0),i?s.writeBuffer(i.toBuffer()):s.writeOpCode(F.OP_0),this.txHashBuf=t,this.txOutNum=e,this.setScript(s),this}hasNullInput(){return"0000000000000000000000000000000000000000000000000000000000000000"===this.txHashBuf.toString("hex")&&4294967295===this.txOutNum}setNullInput(){this.txHashBuf=t.alloc(32),this.txHashBuf.fill(0),this.txOutNum=4294967295}}nt.LOCKTIME_VERIFY_SEQUENCE=1,nt.SEQUENCE_FINAL=4294967295,nt.SEQUENCE_LOCKTIME_DISABLE_FLAG=1<<31,nt.SEQUENCE_LOCKTIME_TYPE_FLAG=1<<22,nt.SEQUENCE_LOCKTIME_MASK=65535,nt.SEQUENCE_LOCKTIME_GRANULARITY=9;class ot extends B{constructor(t,e,r){super({valueBn:t,scriptVi:e,script:r})}setScript(t){return this.scriptVi=st.fromNumber(t.toBuffer().length),this.script=t,this}fromProperties(t,e){return this.fromObject({valueBn:t}),this.setScript(e),this}static fromProperties(t,e){return(new this).fromProperties(t,e)}fromJSON(t){return this.fromObject({valueBn:(new v).fromJSON(t.valueBn),scriptVi:(new st).fromJSON(t.scriptVi),script:(new J).fromJSON(t.script)}),this}toJSON(){return{valueBn:this.valueBn.toJSON(),scriptVi:this.scriptVi.toJSON(),script:this.script.toJSON()}}fromBr(t){return this.valueBn=t.readUInt64LEBn(),this.scriptVi=st.fromNumber(t.readVarIntNum()),this.script=(new J).fromBuffer(t.read(this.scriptVi.toNumber())),this}toBw(t){return t||(t=new I),t.writeUInt64LEBn(this.valueBn),t.write(this.scriptVi.buf),t.write(this.script.toBuffer()),t}}class ht extends B{constructor(t=1,e=st.fromNumber(0),r=[],i=st.fromNumber(0),s=[],n=0){super({versionBytesNum:t,txInsVi:e,txIns:r,txOutsVi:i,txOuts:s,nLockTime:n})}fromJSON(t){const e=[];t.txIns.forEach((function(t){e.push((new nt).fromJSON(t))}));const r=[];return t.txOuts.forEach((function(t){r.push((new ot).fromJSON(t))})),this.fromObject({versionBytesNum:t.versionBytesNum,txInsVi:(new st).fromJSON(t.txInsVi),txIns:e,txOutsVi:(new st).fromJSON(t.txOutsVi),txOuts:r,nLockTime:t.nLockTime}),this}toJSON(){const t=[];this.txIns.forEach((function(e){t.push(e.toJSON())}));const e=[];return this.txOuts.forEach((function(t){e.push(t.toJSON())})),{versionBytesNum:this.versionBytesNum,txInsVi:this.txInsVi.toJSON(),txIns:t,txOutsVi:this.txOutsVi.toJSON(),txOuts:e,nLockTime:this.nLockTime}}fromBr(t){this.versionBytesNum=t.readUInt32LE(),this.txInsVi=new st(t.readVarIntBuf());const e=this.txInsVi.toNumber();this.txIns=[];for(let r=0;r<e;r++)this.txIns.push((new nt).fromBr(t));this.txOutsVi=new st(t.readVarIntBuf());const r=this.txOutsVi.toNumber();this.txOuts=[];for(let e=0;e<r;e++)this.txOuts.push((new ot).fromBr(t));return this.nLockTime=t.readUInt32LE(),this}toBw(t){t||(t=new I),t.writeUInt32LE(this.versionBytesNum),t.write(this.txInsVi.buf);for(let e=0;e<this.txIns.length;e++)this.txIns[e].toBw(t);t.write(this.txOutsVi.buf);for(let e=0;e<this.txOuts.length;e++)this.txOuts[e].toBw(t);return t.writeUInt32LE(this.nLockTime),t}hashPrevouts(){const t=new I;for(const e in this.txIns){const r=this.txIns[e];t.write(r.txHashBuf),t.writeUInt32LE(r.txOutNum)}return M.sha256Sha256(t.toBuffer())}hashSequence(){const t=new I;for(const e in this.txIns){const r=this.txIns[e];t.writeUInt32LE(r.nSequence)}return M.sha256Sha256(t.toBuffer())}hashOutputs(){const t=new I;for(const e in this.txOuts){const r=this.txOuts[e];t.write(r.toBuffer())}return M.sha256Sha256(t.toBuffer())}sighash(e,r,i,s,n=0,o=new it){if(e&G.SIGHASH_FORKID&&n&ht.SCRIPT_ENABLE_SIGHASH_FORKID){let n=t.alloc(32,0),h=t.alloc(32,0),u=t.alloc(32,0);e&G.SIGHASH_ANYONECANPAY||(n=o.prevoutsHashBuf?o.prevoutsHashBuf:o.prevoutsHashBuf=this.hashPrevouts()),e&G.SIGHASH_ANYONECANPAY||(31&e)===G.SIGHASH_SINGLE||(31&e)===G.SIGHASH_NONE||(h=o.sequenceHashBuf?o.sequenceHashBuf:o.sequenceHashBuf=this.hashSequence()),(31&e)!==G.SIGHASH_SINGLE&&(31&e)!==G.SIGHASH_NONE?u=o.outputsHashBuf?o.outputsHashBuf:o.outputsHashBuf=this.hashOutputs():(31&e)===G.SIGHASH_SINGLE&&r<this.txOuts.length&&(u=M.sha256Sha256(this.txOuts[r].toBuffer()));const a=new I;return a.writeUInt32LE(this.versionBytesNum),a.write(n),a.write(h),a.write(this.txIns[r].txHashBuf),a.writeUInt32LE(this.txIns[r].txOutNum),a.writeVarIntNum(i.toBuffer().length),a.write(i.toBuffer()),a.writeUInt64LEBn(s),a.writeUInt32LE(this.txIns[r].nSequence),a.write(u),a.writeUInt32LE(this.nLockTime),a.writeUInt32LE(e>>>0),new E(M.sha256Sha256(a.toBuffer())).readReverse()}const h=this.cloneByBuffer();(i=(new J).fromBuffer(i.toBuffer())).removeCodeseparators();for(let t=0;t<h.txIns.length;t++)h.txIns[t]=nt.fromBuffer(h.txIns[t].toBuffer()).setScript(new J);if(h.txIns[r]=nt.fromBuffer(h.txIns[r].toBuffer()).setScript(i),(31&e)===G.SIGHASH_NONE){h.txOuts.length=0,h.txOutsVi=st.fromNumber(0);for(let t=0;t<h.txIns.length;t++)t!==r&&(h.txIns[t].nSequence=0)}else if((31&e)===G.SIGHASH_SINGLE){if(r>h.txOuts.length-1)return t.from("0000000000000000000000000000000000000000000000000000000000000001","hex");h.txOuts.length=r+1,h.txOutsVi=st.fromNumber(r+1);for(let e=0;e<h.txOuts.length;e++)e<r&&(h.txOuts[e]=ot.fromProperties((new v).fromBuffer(t.from("ffffffffffffffff","hex")),new J));for(let t=0;t<h.txIns.length;t++)t!==r&&(h.txIns[t].nSequence=0)}e&G.SIGHASH_ANYONECANPAY&&(h.txIns[0]=h.txIns[r],h.txIns.length=1,h.txInsVi=st.fromNumber(1));const u=(new I).write(h.toBuffer()).writeInt32LE(e).toBuffer();return new E(M.sha256Sha256(u)).readReverse()}async asyncSighash(t,e,r,i,s=0,n={}){return(await A.asyncObjectMethod(this,"sighash",[t,e,r,i,s,n])).resbuf}sign(t,e=G.SIGHASH_ALL|G.SIGHASH_FORKID,r,i,s,n=ht.SCRIPT_ENABLE_SIGHASH_FORKID,o={}){const h=this.sighash(e,r,i,s,n,o);return $.sign(h,t,"little").fromObject({nHashType:e})}async asyncSign(t,e=G.SIGHASH_ALL|G.SIGHASH_FORKID,r,i,s,n=ht.SCRIPT_ENABLE_SIGHASH_FORKID,o={}){const h=await A.asyncObjectMethod(this,"sign",[t,e,r,i,s,n,o]);return(new G).fromFastBuffer(h.resbuf)}verify(t,e,r,i,s=!1,n,o=ht.SCRIPT_ENABLE_SIGHASH_FORKID,h={}){const u=this.sighash(t.nHashType,r,i,n,o,h);return $.verify(u,t,e,"little",s)}async asyncVerify(t,e,r,i,s=!1,n,o=ht.SCRIPT_ENABLE_SIGHASH_FORKID,h={}){const u=await A.asyncObjectMethod(this,"verify",[t,e,r,i,s,n,o,h]);return JSON.parse(u.resbuf.toString())}hash(){return M.sha256Sha256(this.toBuffer())}async asyncHash(){return(await A.asyncObjectMethod(this,"hash",[])).resbuf}id(){return new E(this.hash()).readReverse().toString("hex")}async asyncId(){const t=await A.asyncObjectMethod(this,"id",[]);return JSON.parse(t.resbuf.toString())}addTxIn(t,e,r,i){let s;return s=t instanceof nt?t:(new nt).fromObject({txHashBuf:t,txOutNum:e,nSequence:i}).setScript(r),this.txIns.push(s),this.txInsVi=st.fromNumber(this.txInsVi.toNumber()+1),this}addTxOut(t,e){let r;return r=t instanceof ot?t:(new ot).fromObject({valueBn:t}).setScript(e),this.txOuts.push(r),this.txOutsVi=st.fromNumber(this.txOutsVi.toNumber()+1),this}isCoinbase(){return 1===this.txIns.length&&this.txIns[0].hasNullInput()}sort(){return this.txIns.sort((t,e)=>new E(t.txHashBuf).readReverse().compare(new E(e.txHashBuf).readReverse())||t.txOutNum-e.txOutNum),this.txOuts.sort((t,e)=>t.valueBn.sub(e.valueBn).toNumber()||t.script.toBuffer().compare(e.script.toBuffer())),this}}ht.MAX_MONEY=21e14,ht.SCRIPT_ENABLE_SIGHASH_FORKID=65536;class ut extends B{constructor(t,e,r){super({blockHeader:t,txsVi:e,txs:r})}fromJSON(t){const e=[];return t.txs.forEach((function(t){e.push((new ht).fromJSON(t))})),this.fromObject({blockHeader:(new et).fromJSON(t.blockHeader),txsVi:(new st).fromJSON(t.txsVi),txs:e}),this}toJSON(){const t=[];return this.txs.forEach((function(e){t.push(e.toJSON())})),{blockHeader:this.blockHeader.toJSON(),txsVi:this.txsVi.toJSON(),txs:t}}fromBr(t){this.blockHeader=(new et).fromBr(t),this.txsVi=new st(t.readVarIntBuf());const e=this.txsVi.toNumber();this.txs=[];for(let r=0;r<e;r++)this.txs.push((new ht).fromBr(t));return this}toBw(t){t||(t=new I),t.write(this.blockHeader.toBuffer()),t.write(this.txsVi.buf);const e=this.txsVi.toNumber();for(let r=0;r<e;r++)this.txs[r].toBw(t);return t}hash(){return M.sha256Sha256(this.blockHeader.toBuffer())}async asyncHash(){return(await A.asyncObjectMethod(this,"hash",[])).resbuf}id(){return new E(this.hash()).readReverse().toString("hex")}async asyncId(){const t=await A.asyncObjectMethod(this,"id",[]);return JSON.parse(t.resbuf.toString())}verifyMerkleRoot(){const e=this.txs.map(t=>t.toBuffer()),r=rt.fromBuffers(e).hash();return t.compare(r,this.blockHeader.merkleRootBuf)}static iterateTxs(t){const e=new E(t),r=(new et).fromBr(e),i=new st(e.readVarIntBuf()),s=i.toNumber();return{blockHeader:r,txsVi:i,txsNum:s,*[Symbol.iterator](){for(let t=0;t<s;t++)yield(new ht).fromBr(e)}}}}ut.MAX_BLOCK_SIZE=1e6;class at extends B{constructor(t,e,r,i=[],s=[],n=0,o=0,h=0,u=[],a="",c=at.defaultFlags,f=new v(0)){super({script:t,tx:e,nIn:r,stack:i,altStack:s,pc:n,pBeginCodeHash:o,nOpCount:h,ifStack:u,errStr:a,flags:c,valueBn:f})}initialize(){return this.stack=[],this.altStack=[],this.pc=0,this.pBeginCodeHash=0,this.nOpCount=0,this.ifStack=[],this.errStr="",this.flags=at.defaultFlags,this}fromJSON(t){return this.fromJSONNoTx(t),this.tx=t.tx?(new ht).fromJSON(t.tx):void 0,this}fromJSONNoTx(e){return this.fromObject({script:void 0!==e.script?(new J).fromJSON(e.script):void 0,nIn:e.nIn}),this.stack=[],e.stack.forEach(function(e){this.stack.push(t.from(e,"hex"))}.bind(this)),this.altStack=[],e.altStack.forEach(function(e){this.altStack.push(t.from(e,"hex"))}.bind(this)),this.fromObject({pc:e.pc,pBeginCodeHash:e.pBeginCodeHash,nOpCount:e.nOpCount,ifStack:e.ifStack,errStr:e.errStr,flags:e.flags}),this}fromBr(t){let e=t.readVarIntNum(),r=t.read(e);this.fromJSONNoTx(JSON.parse(r.toString()));let i=t.readVarIntNum();if(i>0){let e=t.read(i);this.tx=(new ht).fromFastBuffer(e)}return this}toJSON(){let t=this.toJSONNoTx();return t.tx=this.tx?this.tx.toJSON():void 0,t}toJSONNoTx(){let t=[];this.stack.forEach((function(e){t.push(e.toString("hex"))}));let e=[];return this.altStack.forEach((function(t){e.push(t.toString("hex"))})),{script:this.script?this.script.toJSON():void 0,nIn:this.nIn,stack:t,altStack:e,pc:this.pc,pBeginCodeHash:this.pBeginCodeHash,nOpCount:this.nOpCount,ifStack:this.ifStack,errStr:this.errStr,flags:this.flags}}toBw(e){e||(e=new I);let r=t.from(JSON.stringify(this.toJSONNoTx()));if(e.writeVarIntNum(r.length),e.write(r),this.tx){let t=this.tx.toFastBuffer();e.writeVarIntNum(t.length),e.write(t)}else e.writeVarIntNum(0);return e}static getFlags(t){let e=0;return-1!==t.indexOf("NONE")&&(e|=at.SCRIPT_VERIFY_NONE),-1!==t.indexOf("P2SH")&&(e|=at.SCRIPT_VERIFY_P2SH),-1!==t.indexOf("STRICTENC")&&(e|=at.SCRIPT_VERIFY_STRICTENC),-1!==t.indexOf("DERSIG")&&(e|=at.SCRIPT_VERIFY_DERSIG),-1!==t.indexOf("LOW_S")&&(e|=at.SCRIPT_VERIFY_LOW_S),-1!==t.indexOf("NULLDUMMY")&&(e|=at.SCRIPT_VERIFY_NULLDUMMY),-1!==t.indexOf("SIGPUSHONLY")&&(e|=at.SCRIPT_VERIFY_SIGPUSHONLY),-1!==t.indexOf("MINIMALDATA")&&(e|=at.SCRIPT_VERIFY_MINIMALDATA),-1!==t.indexOf("DISCOURAGE_UPGRADABLE_NOPS")&&(e|=at.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS),-1!==t.indexOf("CLEANSTACK")&&(e|=at.SCRIPT_VERIFY_CLEANSTACK),-1!==t.indexOf("CHECKLOCKTIMEVERIFY")&&(e|=at.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY),-1!==t.indexOf("CHECKSEQUENCEVERIFY")&&(e|=at.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY),-1!==t.indexOf("SIGHASH_FORKID")&&(e|=at.SCRIPT_ENABLE_SIGHASH_FORKID),e}static castToBool(t){for(let e=0;e<t.length;e++)if(0!==t[e])return e!==t.length-1||128!==t[e];return!1}checkSigEncoding(t){if(0===t.length)return!0;if(0!=(this.flags&(at.SCRIPT_VERIFY_DERSIG|at.SCRIPT_VERIFY_LOW_S|at.SCRIPT_VERIFY_STRICTENC))&&!G.IsTxDer(t))return this.errStr="SCRIPT_ERR_SIG_DER",!1;if(0!=(this.flags&at.SCRIPT_VERIFY_LOW_S)){if(!(new G).fromTxFormat(t).hasLowS())return this.errStr="SCRIPT_ERR_SIG_DER",!1}else if(0!=(this.flags&at.SCRIPT_VERIFY_STRICTENC)){if(!(new G).fromTxFormat(t).hasDefinedHashType())return this.errStr="SCRIPT_ERR_SIG_HASHTYPE",!1}return!0}checkPubKeyEncoding(t){return!(0!=(this.flags&at.SCRIPT_VERIFY_STRICTENC)&&!V.isCompressedOrUncompressed(t))||(this.errStr="SCRIPT_ERR_PUBKEYTYPE",!1)}checkLockTime(t){return(this.tx.nLockTime<at.LOCKTIME_THRESHOLD&&t<at.LOCKTIME_THRESHOLD||this.tx.nLockTime>=at.LOCKTIME_THRESHOLD&&t>=at.LOCKTIME_THRESHOLD)&&(!(t>this.tx.nLockTime)&&nt.SEQUENCE_FINAL!==this.tx.txIns[this.nIn].nSequence)}checkSequence(t){let e=this.tx.txIns[this.nIn].nSequence;if(this.tx.versionBytesNum<2)return!1;if(e&nt.SEQUENCE_LOCKTIME_DISABLE_FLAG)return!1;let r=nt.SEQUENCE_LOCKTIME_TYPE_FLAG|nt.SEQUENCE_LOCKTIME_MASK,i=e&r,s=t&r;return(i<nt.SEQUENCE_LOCKTIME_TYPE_FLAG&&s<nt.SEQUENCE_LOCKTIME_TYPE_FLAG||i>=nt.SEQUENCE_LOCKTIME_TYPE_FLAG&&s>=nt.SEQUENCE_LOCKTIME_TYPE_FLAG)&&!(s>i)}*eval(){this.script.toBuffer().length>1e4&&(this.errStr="SCRIPT_ERR_SCRIPT_SIZE",yield!1);try{for(;this.pc<this.script.chunks.length;){let t=this.step();t?yield t:yield!1}this.stack.length+this.altStack.length>1e3&&(this.errStr="SCRIPT_ERR_STACK_SIZE",yield!1)}catch(t){this.errStr="SCRIPT_ERR_UNKNOWN_ERROR: "+t,yield!1}this.ifStack.length>0&&(this.errStr="SCRIPT_ERR_UNBALANCED_CONDITIONAL",yield!1),yield!0}step(){let e=0!=(this.flags&at.SCRIPT_VERIFY_MINIMALDATA),r=!(this.ifStack.indexOf(!1)+1),i=this.script.chunks[this.pc];this.pc++;let s=i.opCodeNum;if(void 0===s)return this.errStr="SCRIPT_ERR_BAD_OPCODE",!1;if(i.buf&&i.buf.length>at.MAX_SCRIPT_ELEMENT_SIZE)return this.errStr="SCRIPT_ERR_PUSH_SIZE",!1;if(s>F.OP_16&&++this.nOpCount>201)return this.errStr="SCRIPT_ERR_OP_COUNT",!1;if(s===F.OP_LEFT||s===F.OP_RIGHT||s===F.OP_2MUL||s===F.OP_2DIV)return this.errStr="SCRIPT_ERR_DISABLED_OPCODE",!1;if(r&&s>=0&&s<=F.OP_PUSHDATA4){if(e&&!this.script.checkMinimalPush(this.pc-1))return this.errStr="SCRIPT_ERR_MINIMALDATA",!1;if(i.buf){if(i.len!==i.buf.length)throw new Error("LEngth of push value not equal to length of data");this.stack.push(i.buf)}else this.stack.push(at.false)}else if(r||F.OP_IF<=s&&s<=F.OP_ENDIF)switch(s){case F.OP_1NEGATE:case F.OP_1:case F.OP_2:case F.OP_3:case F.OP_4:case F.OP_5:case F.OP_6:case F.OP_7:case F.OP_8:case F.OP_9:case F.OP_10:case F.OP_11:case F.OP_12:case F.OP_13:case F.OP_14:case F.OP_15:case F.OP_16:{let t=new v(s-(F.OP_1-1)).toScriptNumBuffer();this.stack.push(t)}break;case F.OP_NOP:break;case F.OP_CHECKLOCKTIMEVERIFY:{if(!(this.flags&at.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)){if(this.flags&at.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)return this.errStr="SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS",!1;break}if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-1],r=(new v).fromScriptNumBuffer(t,e,5).toNumber();if(r<0)return this.errStr="SCRIPT_ERR_NEGATIVE_LOCKTIME",!1;if(!this.checkLockTime(r))return this.errStr="SCRIPT_ERR_UNSATISFIED_LOCKTIME",!1}break;case F.OP_CHECKSEQUENCEVERIFY:{if(!(this.flags&at.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)){if(this.flags&at.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)return this.errStr="SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS",!1;break}if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-1],r=(new v).fromScriptNumBuffer(t,e,5).toNumber();if(r<0)return this.errStr="SCRIPT_ERR_NEGATIVE_LOCKTIME",!1;if(0!=(r&nt.SEQUENCE_LOCKTIME_DISABLE_FLAG))break;if(!this.checkSequence(r))return this.errStr="SCRIPT_ERR_UNSATISFIED_LOCKTIME",!1}break;case F.OP_NOP1:case F.OP_NOP3:case F.OP_NOP4:case F.OP_NOP5:case F.OP_NOP6:case F.OP_NOP7:case F.OP_NOP8:case F.OP_NOP9:case F.OP_NOP10:if(this.flags&at.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)return this.errStr="SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS",!1;break;case F.OP_IF:case F.OP_NOTIF:{let t=!1;if(r){if(this.stack.length<1)return this.errStr="SCRIPT_ERR_UNBALANCED_CONDITIONAL",!1;let e=this.stack.pop();t=at.castToBool(e),s===F.OP_NOTIF&&(t=!t)}this.ifStack.push(t)}break;case F.OP_ELSE:if(0===this.ifStack.length)return this.errStr="SCRIPT_ERR_UNBALANCED_CONDITIONAL",!1;this.ifStack[this.ifStack.length-1]=!this.ifStack[this.ifStack.length-1];break;case F.OP_ENDIF:if(0===this.ifStack.length)return this.errStr="SCRIPT_ERR_UNBALANCED_CONDITIONAL",!1;this.ifStack.pop();break;case F.OP_VERIFY:{if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-1];if(!at.castToBool(t))return this.errStr="SCRIPT_ERR_VERIFY",!1;this.stack.pop()}break;case F.OP_RETURN:return this.errStr="SCRIPT_ERR_OP_RETURN",!1;case F.OP_TOALTSTACK:if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;this.altStack.push(this.stack.pop());break;case F.OP_FROMALTSTACK:if(this.altStack.length<1)return this.errStr="SCRIPT_ERR_INVALID_ALTSTACK_OPERATION",!1;this.stack.push(this.altStack.pop());break;case F.OP_2DROP:if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;this.stack.pop(),this.stack.pop();break;case F.OP_2DUP:{if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-2],e=this.stack[this.stack.length-1];this.stack.push(t),this.stack.push(e)}break;case F.OP_3DUP:{if(this.stack.length<3)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-3],e=this.stack[this.stack.length-2],r=this.stack[this.stack.length-1];this.stack.push(t),this.stack.push(e),this.stack.push(r)}break;case F.OP_2OVER:{if(this.stack.length<4)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-4],e=this.stack[this.stack.length-3];this.stack.push(t),this.stack.push(e)}break;case F.OP_2ROT:{if(this.stack.length<6)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack.splice(this.stack.length-6,2);this.stack.push(t[0]),this.stack.push(t[1])}break;case F.OP_2SWAP:{if(this.stack.length<4)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack.splice(this.stack.length-4,2);this.stack.push(t[0]),this.stack.push(t[1])}break;case F.OP_IFDUP:{if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-1];at.castToBool(t)&&this.stack.push(t)}break;case F.OP_DEPTH:{let t=new v(this.stack.length).toScriptNumBuffer();this.stack.push(t)}break;case F.OP_DROP:if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;this.stack.pop();break;case F.OP_DUP:if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;this.stack.push(this.stack[this.stack.length-1]);break;case F.OP_NIP:if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;this.stack.splice(this.stack.length-2,1);break;case F.OP_OVER:if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;this.stack.push(this.stack[this.stack.length-2]);break;case F.OP_PICK:case F.OP_ROLL:{if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-1],r=(new v).fromScriptNumBuffer(t,e).toNumber();if(this.stack.pop(),r<0||r>=this.stack.length)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;t=this.stack[this.stack.length-r-1],s===F.OP_ROLL&&this.stack.splice(this.stack.length-r-1,1),this.stack.push(t)}break;case F.OP_ROT:{if(this.stack.length<3)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-3],e=this.stack[this.stack.length-2],r=this.stack[this.stack.length-1];this.stack[this.stack.length-3]=e,this.stack[this.stack.length-2]=r,this.stack[this.stack.length-1]=t}break;case F.OP_SWAP:{if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-2],e=this.stack[this.stack.length-1];this.stack[this.stack.length-2]=e,this.stack[this.stack.length-1]=t}break;case F.OP_TUCK:if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;this.stack.splice(this.stack.length-2,0,this.stack[this.stack.length-1]);break;case F.OP_SIZE:{if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=new v(this.stack[this.stack.length-1].length);this.stack.push(t.toScriptNumBuffer())}break;case F.OP_OR:case F.OP_AND:case F.OP_XOR:if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let i=this.stack[this.stack.length-2],n=this.stack[this.stack.length-1];if(i.length!=n.length)return this.errStr="SCRIPT_ERR_INVALID_OPERAND_SIZE",!1;switch(s){case F.OP_AND:for(let t=0;t<i.length;t++)i[t]&=n[t];break;case F.OP_OR:for(let t=0;t<i.length;t++)i[t]|=n[t];break;case F.OP_XOR:for(let t=0;t<i.length;t++)i[t]^=n[t]}this.stack.pop();break;case F.OP_INVERT:if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let o=this.stack[this.stack.length-1];for(let t=0;t<o.length;t++)o[t]=~o[t];break;case F.OP_LSHIFT:case F.OP_RSHIFT:{if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let r=this.stack[this.stack.length-2],i=new v(r),n=(new v).fromScriptNumBuffer(this.stack[this.stack.length-1],e).toNumber();if(n<0)return this.errStr="SCRIPT_ERR_INVALID_NUMBER_RANGE",!1;switch(this.stack.pop(),this.stack.pop(),s){case F.OP_LSHIFT:i=i.ushln(n);break;case F.OP_RSHIFT:i=i.ushrn(n)}let o=i.toBuffer().slice(-r.length);o.length<r.length&&(o=t.concat([t.alloc(r.length-o.length),o])),this.stack.push(o);break}case F.OP_EQUAL:case F.OP_EQUALVERIFY:{if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-2],e=this.stack[this.stack.length-1],r=k(t,e);if(this.stack.pop(),this.stack.pop(),this.stack.push(r?at.true:at.false),s===F.OP_EQUALVERIFY){if(!r)return this.errStr="SCRIPT_ERR_EQUALVERIFY",!1;this.stack.pop()}}break;case F.OP_1ADD:case F.OP_1SUB:case F.OP_NEGATE:case F.OP_ABS:case F.OP_NOT:case F.OP_0NOTEQUAL:{if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=this.stack[this.stack.length-1],r=(new v).fromScriptNumBuffer(t,e);switch(s){case F.OP_1ADD:r=r.add(1);break;case F.OP_1SUB:r=r.sub(1);break;case F.OP_NEGATE:r=r.neg();break;case F.OP_ABS:r.lt(0)&&(r=r.neg());break;case F.OP_NOT:r=new v(r.eq(0)+0);break;case F.OP_0NOTEQUAL:r=new v(r.neq(0)+0)}this.stack.pop(),this.stack.push(r.toScriptNumBuffer())}break;case F.OP_ADD:case F.OP_SUB:case F.OP_MUL:case F.OP_DIV:case F.OP_MOD:case F.OP_BOOLAND:case F.OP_BOOLOR:case F.OP_NUMEQUAL:case F.OP_NUMEQUALVERIFY:case F.OP_NUMNOTEQUAL:case F.OP_LESSTHAN:case F.OP_GREATERTHAN:case F.OP_LESSTHANOREQUAL:case F.OP_GREATERTHANOREQUAL:case F.OP_MIN:case F.OP_MAX:{if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=(new v).fromScriptNumBuffer(this.stack[this.stack.length-2],e),r=(new v).fromScriptNumBuffer(this.stack[this.stack.length-1],e),i=new v(0);switch(s){case F.OP_ADD:i=t.add(r);break;case F.OP_SUB:i=t.sub(r);break;case F.OP_MUL:i=t.mul(r);break;case F.OP_DIV:if(0==r)return this.errStr="SCRIPT_ERR_DIV_BY_ZERO",!1;i=t.div(r);break;case F.OP_MOD:if(0==r)return this.errStr="SCRIPT_ERR_DIV_BY_ZERO",!1;i=t.mod(r);break;case F.OP_BOOLAND:i=new v((t.neq(0)&&r.neq(0))+0);break;case F.OP_BOOLOR:i=new v((t.neq(0)||r.neq(0))+0);break;case F.OP_NUMEQUAL:case F.OP_NUMEQUALVERIFY:i=new v(t.eq(r)+0);break;case F.OP_NUMNOTEQUAL:i=new v(t.neq(r)+0);break;case F.OP_LESSTHAN:i=new v(t.lt(r)+0);break;case F.OP_GREATERTHAN:i=new v(t.gt(r)+0);break;case F.OP_LESSTHANOREQUAL:i=new v(t.leq(r)+0);break;case F.OP_GREATERTHANOREQUAL:i=new v(t.geq(r)+0);break;case F.OP_MIN:i=t.lt(r)?t:r;break;case F.OP_MAX:i=t.gt(r)?t:r}if(this.stack.pop(),this.stack.pop(),this.stack.push(i.toScriptNumBuffer()),s===F.OP_NUMEQUALVERIFY){if(!at.castToBool(this.stack[this.stack.length-1]))return this.errStr="SCRIPT_ERR_NUMEQUALVERIFY",!1;this.stack.pop()}}break;case F.OP_WITHIN:{if(this.stack.length<3)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t=(new v).fromScriptNumBuffer(this.stack[this.stack.length-3],e),r=(new v).fromScriptNumBuffer(this.stack[this.stack.length-2],e),i=(new v).fromScriptNumBuffer(this.stack[this.stack.length-1],e),s=r.leq(t)&&t.lt(i);this.stack.pop(),this.stack.pop(),this.stack.pop(),this.stack.push(s?at.true:at.false)}break;case F.OP_RIPEMD160:case F.OP_SHA1:case F.OP_SHA256:case F.OP_HASH160:case F.OP_HASH256:{if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t,e=this.stack[this.stack.length-1];s===F.OP_RIPEMD160?t=M.ripemd160(e):s===F.OP_SHA1?t=M.sha1(e):s===F.OP_SHA256?t=M.sha256(e):s===F.OP_HASH160?t=M.sha256Ripemd160(e):s===F.OP_HASH256&&(t=M.sha256Sha256(e)),this.stack.pop(),this.stack.push(t)}break;case F.OP_CODESEPARATOR:this.pBeginCodeHash=this.pc;break;case F.OP_CHECKSIG:case F.OP_CHECKSIGVERIFY:{if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let t,e=this.stack[this.stack.length-2],r=this.stack[this.stack.length-1],i=(new J).fromObject({chunks:this.script.chunks.slice(this.pBeginCodeHash)});if((e.length>0?e.readUInt8(e.length-1):0)&G.SIGHASH_FORKID){if(!(this.flags&at.SCRIPT_ENABLE_SIGHASH_FORKID))return this.errStr="SCRIPT_ERR_ILLEGAL_FORKID",!1}else i.findAndDelete((new J).writeBuffer(e));if(!this.checkSigEncoding(e)||!this.checkPubKeyEncoding(r))return!1;try{let s=(new G).fromTxFormat(e),n=(new V).fromBuffer(r,!1);t=this.tx.verify(s,n,this.nIn,i,Boolean(this.flags&at.SCRIPT_VERIFY_LOW_S),this.valueBn,this.flags)}catch(e){t=!1}if(this.stack.pop(),this.stack.pop(),this.stack.push(t?at.true:at.false),s===F.OP_CHECKSIGVERIFY){if(!t)return this.errStr="SCRIPT_ERR_CHECKSIGVERIFY",!1;this.stack.pop()}}break;case F.OP_CHECKMULTISIG:case F.OP_CHECKMULTISIGVERIFY:{let t=1;if(this.stack.length<t)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let r=(new v).fromScriptNumBuffer(this.stack[this.stack.length-t],e).toNumber();if(r<0||r>20)return this.errStr="SCRIPT_ERR_PUBKEY_COUNT",!1;if(this.nOpCount+=r,this.nOpCount>201)return this.errStr="SCRIPT_ERR_OP_COUNT",!1;let i=++t;if(t+=r,this.stack.length<t)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let n=(new v).fromScriptNumBuffer(this.stack[this.stack.length-t],e).toNumber();if(n<0||n>r)return this.errStr="SCRIPT_ERR_SIG_COUNT",!1;let o=++t;if(t+=n,this.stack.length<t)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let h=(new J).fromObject({chunks:this.script.chunks.slice(this.pBeginCodeHash)});for(let t=0;t<n;t++){let e=this.stack[this.stack.length-o-t];if((e.length>0?e.readUInt8(e.length-1):0)&G.SIGHASH_FORKID){if(!(this.flags&at.SCRIPT_ENABLE_SIGHASH_FORKID))return this.errStr="SCRIPT_ERR_ILLEGAL_FORKID",!1}else h.findAndDelete((new J).writeBuffer(e))}let u=!0;for(;u&&n>0;){let t,e=this.stack[this.stack.length-o],s=this.stack[this.stack.length-i];if(!this.checkSigEncoding(e)||!this.checkPubKeyEncoding(s))return!1;try{let r=(new G).fromTxFormat(e),i=(new V).fromBuffer(s,!1);t=this.tx.verify(r,i,this.nIn,h,Boolean(this.flags&at.SCRIPT_VERIFY_LOW_S),this.valueBn,this.flags)}catch(e){t=!1}t&&(o++,n--),i++,r--,n>r&&(u=!1)}for(;t-- >1;)this.stack.pop();if(this.stack.length<1)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;if(this.flags&at.SCRIPT_VERIFY_NULLDUMMY&&this.stack[this.stack.length-1].length)return this.errStr="SCRIPT_ERR_SIG_NULLDUMMY",!1;if(this.stack.pop(),this.stack.push(u?at.true:at.false),s===F.OP_CHECKMULTISIGVERIFY){if(!u)return this.errStr="SCRIPT_ERR_CHECKMULTISIGVERIFY",!1;this.stack.pop()}}break;case F.OP_CAT:if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let h=this.stack[this.stack.length-2],u=this.stack[this.stack.length-1];this.stack[this.stack.length-2]=t.concat([h,u]),this.stack.pop();break;case F.OP_SPLIT:if(this.stack.length<2)return this.errStr="SCRIPT_ERR_INVALID_STACK_OPERATION",!1;let a=this.stack[this.stack.length-2],c=(new v).fromScriptNumBuffer(this.stack[this.stack.length-1],e);if(c.lt(0)||c.gt(a.length))return this.errStr="SCRIPT_ERR_INVALID_SPLIT_RANGE",!1;let f=a.slice(0,c),l=a.slice(c);this.stack.pop(),this.stack.pop(),this.stack.push(f),this.stack.push(l);break;default:return this.errStr="SCRIPT_ERR_BAD_OPCODE",!1}return!0}verify(t,e,r,i,s,n){let o=this.results(t,e,r,i,s,n);for(let t of o)if(!t)return!1;return!0}*results(t,e,r,i,s,n){let o;this.fromObject({script:t,tx:r,nIn:i,flags:s,valueBn:n}),0==(s&at.SCRIPT_VERIFY_SIGPUSHONLY)||t.isPushOnly()||(this.errStr=this.errStr||"SCRIPT_ERR_SIG_PUSHONLY",yield!1),yield*this.eval(),s&at.SCRIPT_VERIFY_P2SH&&(o=this.stack.slice());let h=this.stack;this.initialize(),this.fromObject({script:e,stack:h,tx:r,nIn:i,flags:s,valueBn:n}),yield*this.eval(),0===this.stack.length&&(this.errStr=this.errStr||"SCRIPT_ERR_EVAL_FALSE",yield!1);let u=this.stack[this.stack.length-1];if(at.castToBool(u)||(this.errStr=this.errStr||"SCRIPT_ERR_EVAL_FALSE",yield!1),s&at.SCRIPT_VERIFY_P2SH&&e.isScriptHashOut()){t.isPushOnly()||(this.errStr=this.errStr||"SCRIPT_ERR_SIG_PUSHONLY",yield!1);let e=h;if(h=o,o=e,0===h.length)throw new Error("internal error - stack copy empty");let u=h[h.length-1],a=(new J).fromBuffer(u);h.pop(),this.initialize(),this.fromObject({script:a,stack:h,tx:r,nIn:i,flags:s,valueBn:n}),yield*this.eval(),0===h.length&&(this.errStr=this.errStr||"SCRIPT_ERR_EVAL_FALSE",yield!1),at.castToBool(h[h.length-1])?yield!0:(this.errStr=this.errStr||"SCRIPT_ERR_EVAL_FALSE",yield!1)}if(0!=(s&at.SCRIPT_VERIFY_CLEANSTACK)){if(!(s&at.SCRIPT_VERIFY_P2SH))throw new Error("cannot use CLEANSTACK without P2SH");1!==h.length&&(this.errStr=this.errStr||"SCRIPT_ERR_CLEANSTACK",yield!1)}yield!0}getDebugObject(){let t=this.pc-1;return{errStr:this.errStr,scriptStr:this.script?this.script.toString():"no script found",pc:t,stack:this.stack.map(t=>t.toString("hex")),altStack:this.altStack.map(t=>t.toString("hex")),opCodeStr:this.script?F.fromNumber(this.script.chunks[t].opCodeNum).toString():"no script found"}}getDebugString(){return JSON.stringify(this.getDebugObject(),null,2)}}at.true=t.from([1]),at.false=t.from([]),at.MAX_SCRIPT_ELEMENT_SIZE=520,at.LOCKTIME_THRESHOLD=5e8,at.SCRIPT_VERIFY_NONE=0,at.SCRIPT_VERIFY_P2SH=1,at.SCRIPT_VERIFY_STRICTENC=2,at.SCRIPT_VERIFY_DERSIG=4,at.SCRIPT_VERIFY_LOW_S=8,at.SCRIPT_VERIFY_NULLDUMMY=16,at.SCRIPT_VERIFY_SIGPUSHONLY=32,at.SCRIPT_VERIFY_MINIMALDATA=64,at.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS=128,at.SCRIPT_VERIFY_CLEANSTACK=256,at.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY=512,at.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY=1024,at.SCRIPT_ENABLE_SIGHASH_FORKID=65536,at.defaultFlags=at.SCRIPT_VERIFY_P2SH|at.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;class ct extends B{constructor(t=new Map){super({map:t})}toJSON(){const t={};return this.map.forEach((e,r)=>{t[r]=e.map(t=>({nScriptChunk:t.nScriptChunk,type:t.type,addressStr:t.addressStr,nHashType:t.nHashType,log:t.log}))}),t}fromJSON(t){return Object.keys(t).forEach(e=>{this.map.set(e,t[e].map(t=>({nScriptChunk:t.nScriptChunk,type:t.type,addressStr:t.addressStr,nHashType:t.nHashType,log:t.log})))}),this}setOne(t,e,r,i="sig",s,n=G.SIGHASH_ALL|G.SIGHASH_FORKID){const o=t.toString("hex")+":"+e,h={nScriptChunk:r,type:i,addressStr:s,nHashType:n};return this.map.set(o,[h]),this}setMany(t,e,r){const i=t.toString("hex")+":"+e;return r=r.map(t=>({type:t.type||"sig",nHashType:t.nHashType||G.SIGHASH_ALL|G.SIGHASH_FORKID,...t})),this.map.set(i,r),this}addOne(t,e,r,i="sig",s,n=G.SIGHASH_ALL|G.SIGHASH_FORKID){const o=this.get(t,e)||[];return o.push({nScriptChunk:r,type:i,addressStr:s,nHashType:n}),this.setMany(t,e,o),this}get(t,e){const r=t.toString("hex")+":"+e;return this.map.get(r)}}class ft extends B{constructor(t=new Map){super({map:t})}toJSON(){const t={};return this.map.forEach((e,r)=>{t[r]=e.toHex()}),t}fromJSON(t){return Object.keys(t).forEach(e=>{this.map.set(e,ot.fromHex(t[e]))}),this}set(t,e,r){const i=t.toString("hex")+":"+e;return this.map.set(i,r),this}get(t,e){const r=t.toString("hex")+":"+e;return this.map.get(r)}setTx(t){const e=t.hash().toString("hex");return t.txOuts.forEach((t,r)=>{const i=e+":"+r;this.map.set(i,t)}),this}}const lt=H.Default.TxBuilder;class pt extends B{constructor(t=new ht,e=[],r=[],i=new ft,s=new ct,n,o,h,u=lt.feePerKbNum,a=0,c=1,f=1,l=lt.dust,p=!1,m=new it){super({tx:t,txIns:e,txOuts:r,uTxOutMap:i,sigOperations:s,changeScript:n,changeAmountBn:o,feeAmountBn:h,feePerKbNum:u,nLockTime:a,versionBytesNum:c,sigsPerInput:f,dust:l,dustChangeToFees:p,hashCache:m})}toJSON(){const t={};return t.tx=this.tx.toHex(),t.txIns=this.txIns.map(t=>t.toHex()),t.txOuts=this.txOuts.map(t=>t.toHex()),t.uTxOutMap=this.uTxOutMap.toJSON(),t.sigOperations=this.sigOperations.toJSON(),t.changeScript=this.changeScript?this.changeScript.toHex():void 0,t.changeAmountBn=this.changeAmountBn?this.changeAmountBn.toNumber():void 0,t.feeAmountBn=this.feeAmountBn?this.feeAmountBn.toNumber():void 0,t.feePerKbNum=this.feePerKbNum,t.sigsPerInput=this.sigsPerInput,t.dust=this.dust,t.dustChangeToFees=this.dustChangeToFees,t.hashCache=this.hashCache.toJSON(),t}fromJSON(t){return this.tx=(new ht).fromHex(t.tx),this.txIns=t.txIns.map(t=>nt.fromHex(t)),this.txOuts=t.txOuts.map(t=>ot.fromHex(t)),this.uTxOutMap=(new ft).fromJSON(t.uTxOutMap),this.sigOperations=(new ct).fromJSON(t.sigOperations),this.changeScript=t.changeScript?(new J).fromHex(t.changeScript):void 0,this.changeAmountBn=t.changeAmountBn?new v(t.changeAmountBn):void 0,this.feeAmountBn=t.feeAmountBn?new v(t.feeAmountBn):void 0,this.feePerKbNum=t.feePerKbNum||this.feePerKbNum,this.sigsPerInput=t.sigsPerInput||this.sigsPerInput,this.dust=t.dust||this.dust,this.dustChangeToFees=t.dustChangeToFees||this.dustChangeToFees,this.hashCache=it.fromJSON(t.hashCache),this}setFeePerKbNum(t){if("number"!=typeof t||t<=0)throw new Error("cannot set a fee of zero or less");return this.feePerKbNum=t,this}setChangeAddress(t){return this.changeScript=t.toTxOutScript(),this}setChangeScript(t){return this.changeScript=t,this}setNLocktime(t){return this.nLockTime=t,this}setVersion(t){return this.versionBytesNum=t,this}setDust(t=lt.dust){return this.dust=t,this}sendDustChangeToFees(t=!1){return this.dustChangeToFees=t,this}importPartiallySignedTx(t,e=this.uTxOutMap,r=this.sigOperations){return this.tx=t,this.uTxOutMap=e,this.sigOperations=r,this}inputFromScript(e,r,i,s,n){if(!(t.isBuffer(e)&&"number"==typeof r&&i instanceof ot&&s instanceof J))throw new Error("invalid one of: txHashBuf, txOutNum, txOut, script");return this.txIns.push(nt.fromProperties(e,r,s,n)),this.uTxOutMap.set(e,r,i),this}addSigOperation(t,e,r,i,s,n){return this.sigOperations.addOne(t,e,r,i,s,n),this}inputFromPubKeyHash(e,r,i,s,n,o){if(!(t.isBuffer(e)&&"number"==typeof r&&i instanceof ot))throw new Error("invalid one of: txHashBuf, txOutNum, txOut");this.txIns.push((new nt).fromObject({nSequence:n}).fromPubKeyHashTxOut(e,r,i,s)),this.uTxOutMap.set(e,r,i);const h=q.fromTxOutScript(i.script).toString();return this.addSigOperation(e,r,0,"sig",h,o),this.addSigOperation(e,r,1,"pubKey",h),this}outputToAddress(t,e){if(!(e instanceof q&&t instanceof v))throw new Error("addr must be an Address, and valueBn must be a Bn");const r=(new J).fromPubKeyHash(e.hashBuf);return this.outputToScript(t,r),this}outputToScript(t,e){if(!(e instanceof J&&t instanceof v))throw new Error("script must be a Script, and valueBn must be a Bn");const r=ot.fromProperties(t,e);return this.txOuts.push(r),this}buildOutputs(){let t=new v(0);return this.txOuts.forEach(e=>{if(e.valueBn.lt(this.dust)&&!e.script.isOpReturn()&&!e.script.isSafeDataOut())throw new Error("cannot create output lesser than dust");t=t.add(e.valueBn),this.tx.addTxOut(e)}),t}buildInputs(t,e=0){let r=new v(0);for(const i of this.txIns){const s=this.uTxOutMap.get(i.txHashBuf,i.txOutNum);if(r=r.add(s.valueBn),this.tx.addTxIn(i),r.geq(t)){if(e<=0)break;e--}}if(r.lt(t))throw new Error("not enough funds for outputs: inAmountBn "+r.toNumber()+" outAmountBn "+t.toNumber());return r}estimateSize(){let t=this.tx.toBuffer().length;return this.tx.txIns.forEach(e=>{const{txHashBuf:r,txOutNum:i}=e;this.sigOperations.get(r,i).forEach(r=>{const{nScriptChunk:i,type:s}=r,n=new J([e.script.chunks[i]]).toBuffer().length;if(t-=n,"sig"===s)t+=72;else{if("pubKey"!==r.type)throw new Error("unsupported sig operations type");t+=35}})}),t+=1,Math.round(t)}estimateFee(t=new v(0)){return new v(Math.ceil(this.estimateSize()/1e3*this.feePerKbNum)).add(t)}build(t={useAllInputs:!1}){let e;if(this.txIns.length<=0)throw Error("tx-builder number of inputs must be greater than 0");if(!this.changeScript)throw new Error("must specify change script to use build method");for(let r=t.useAllInputs?this.txIns.length-1:0;r<this.txIns.length;r++){this.tx=new ht;const t=this.buildOutputs(),i=ot.fromProperties(new v(0),this.changeScript);let s;this.tx.addTxOut(i);try{s=this.buildInputs(t,r)}catch(t){throw t.message.includes("not enough funds for outputs")?new Error("unable to gather enough inputs for outputs and fee"):t}if(this.changeAmountBn=s.sub(t),i.valueBn=this.changeAmountBn,e=this.estimateFee(),this.changeAmountBn.geq(e)&&this.changeAmountBn.sub(e).gt(this.dust))break}if(this.changeAmountBn.geq(e)){if(this.feeAmountBn=e,this.changeAmountBn=this.changeAmountBn.sub(this.feeAmountBn),this.tx.txOuts[this.tx.txOuts.length-1].valueBn=this.changeAmountBn,this.changeAmountBn.lt(this.dust)){if(!this.dustChangeToFees)throw new Error("unable to create change amount greater than dust");this.tx.txOuts.pop(),this.tx.txOutsVi=st.fromNumber(this.tx.txOutsVi.toNumber()-1),this.feeAmountBn=this.feeAmountBn.add(this.changeAmountBn),this.changeAmountBn=new v(0)}if(this.tx.nLockTime=this.nLockTime,this.tx.versionBytesNum=this.versionBytesNum,0===this.tx.txOuts.length)throw new Error("outputs length is zero - unable to create any outputs greater than dust");return this}throw new Error("unable to gather enough inputs for outputs and fee")}sort(){return this.tx.sort(),this}static allSigsPresent(t,e){let r=0;for(let t=1;t<e.chunks.length-1;t++)e.chunks[t].buf&&r++;return r===t}static removeBlankSigs(t){t=new J(t.chunks.slice());for(let e=1;e<t.chunks.length-1;e++)t.chunks[e].buf||t.chunks.splice(e,1);return t}fillSig(t,e,r){const i=this.tx.txIns[t];return i.script.chunks[e]=(new J).writeBuffer(r.toTxFormat()).chunks[0],i.scriptVi=st.fromNumber(i.script.toBuffer().length),this}getSig(t,e=G.SIGHASH_ALL|G.SIGHASH_FORKID,r,i,s=ht.SCRIPT_ENABLE_SIGHASH_FORKID){let n;if(e&G.SIGHASH_FORKID&&s&ht.SCRIPT_ENABLE_SIGHASH_FORKID){const t=this.tx.txIns[r].txHashBuf,e=this.tx.txIns[r].txOutNum,i=this.uTxOutMap.get(t,e);if(!i)throw new Error("for SIGHASH_FORKID must provide UTXOs");n=i.valueBn}return this.tx.sign(t,e,r,i,n,s,this.hashCache)}asyncGetSig(t,e=G.SIGHASH_ALL|G.SIGHASH_FORKID,r,i,s=ht.SCRIPT_ENABLE_SIGHASH_FORKID){let n;if(e&G.SIGHASH_FORKID&&s&ht.SCRIPT_ENABLE_SIGHASH_FORKID){const t=this.tx.txIns[r].txHashBuf,e=this.tx.txIns[r].txOutNum,i=this.uTxOutMap.get(t,e);if(!i)throw new Error("for SIGHASH_FORKID must provide UTXOs");n=i.valueBn}return this.tx.asyncSign(t,e,r,i,n,s,this.hashCache)}signTxIn(t,e,r,i,s=G.SIGHASH_ALL|G.SIGHASH_FORKID,n=ht.SCRIPT_ENABLE_SIGHASH_FORKID){const o=this.tx.txIns[t],h=o.script;if(void 0===i&&h.isPubKeyHashIn()&&(i=0),void 0===i)throw new Error("cannot sign unknown script type for input "+t);const u=o.txHashBuf,a=o.txOutNum;r||(r=this.uTxOutMap.get(u,a));const c=r.script,f=this.getSig(e,s,t,c,n,this.hashCache);return this.fillSig(t,i,f),this}async asyncSignTxIn(t,e,r,i,s=G.SIGHASH_ALL|G.SIGHASH_FORKID,n=ht.SCRIPT_ENABLE_SIGHASH_FORKID){const o=this.tx.txIns[t],h=o.script;if(void 0===i&&h.isPubKeyHashIn()&&(i=0),void 0===i)throw new Error("cannot sign unknown script type for input "+t);const u=o.txHashBuf,a=o.txOutNum;r||(r=this.uTxOutMap.get(u,a));const c=r.script,f=await this.asyncGetSig(e,s,t,c,n,this.hashCache);return this.fillSig(t,i,f),this}signWithKeyPairs(t){const e={};for(const r of t){e[q.fromPubKey(r.pubKey).toString()]=r}for(const t in this.tx.txIns){const r=this.tx.txIns[t],i=this.sigOperations.get(r.txHashBuf,r.txOutNum);for(const s of i){const{nScriptChunk:i,type:n,addressStr:o,nHashType:h}=s,u=e[o];if(!u){s.log="cannot find keyPair for addressStr "+o;continue}const a=this.uTxOutMap.get(r.txHashBuf,r.txOutNum);if("sig"===n)this.signTxIn(t,u,a,i,h),s.log="successfully inserted signature";else{if("pubKey"!==n){s.log="cannot perform operation of type "+n;continue}r.script.chunks[i]=(new J).writeBuffer(u.pubKey.toBuffer()).chunks[0],r.setScript(r.script),s.log="successfully inserted public key"}}}return this}}class mt extends B{constructor(t,e,r,i){super({tx:t,txOutMap:e,errStr:r,interp:i})}verify(t=at.SCRIPT_ENABLE_SIGHASH_FORKID){return!this.checkStr()&&!this.verifyStr(t)}async asyncVerify(t){const e=await this.asyncVerifyStr(t);return!this.checkStr()&&!e}static verify(t,e,r){return new mt(t,e).verify(r)}static asyncVerify(t,e,r){return new mt(t,e).asyncVerify(r)}checkStr(){if(0===this.tx.txIns.length||0===this.tx.txInsVi.toNumber())return this.errStr="transaction txIns empty",this.errStr;if(0===this.tx.txOuts.length||0===this.tx.txOutsVi.toNumber())return this.errStr="transaction txOuts empty",this.errStr;if(this.tx.toBuffer().length>ut.MAX_BLOCK_SIZE)return this.errStr="transaction over the maximum block size",this.errStr;let t=new v(0);for(let e=0;e<this.tx.txOuts.length;e++){const r=this.tx.txOuts[e];if(r.valueBn.lt(0))return this.errStr="transaction txOut "+e+" negative",this.errStr;if(r.valueBn.gt(ht.MAX_MONEY))return this.errStr="transaction txOut "+e+" greater than MAX_MONEY",this.errStr;if(t=t.add(r.valueBn),t.gt(ht.MAX_MONEY))return this.errStr="transaction txOut "+e+" total output greater than MAX_MONEY",this.errStr}const e={};for(let t=0;t<this.tx.txIns.length;t++){const r=this.tx.txIns[t],i=r.txHashBuf.toString("hex")+":"+r.txOutNum;if(void 0!==e[i])return this.errStr="transaction input "+t+" duplicate input",this.errStr;e[i]=!0}if(this.tx.isCoinbase()){const t=this.tx.txIns[0].script.toBuffer();if(t.length<2||t.length>100)return this.errStr="coinbase trasaction script size invalid",this.errStr}else for(let t=0;t<this.tx.txIns.length;t++)if(this.tx.txIns[t].hasNullInput())return this.errStr="transaction input "+t+" has null input",this.errStr;return!1}verifyStr(t){for(let e=0;e<this.tx.txIns.length;e++)if(!this.verifyNIn(e,t))return this.errStr="input "+e+" failed script verify",this.errStr;return!1}async asyncVerifyStr(t){for(let e=0;e<this.tx.txIns.length;e++){if(!await this.asyncVerifyNIn(e,t))return this.errStr="input "+e+" failed script verify",this.errStr}return!1}verifyNIn(t,e){const r=this.tx.txIns[t],i=r.script,s=this.txOutMap.get(r.txHashBuf,r.txOutNum);if(!s)return console.log("output "+r.txOutNum+" not found"),!1;const n=s.script,o=s.valueBn;this.interp=new at;return this.interp.verify(i,n,this.tx,t,e,o)}async asyncVerifyNIn(t,e){const r=this.tx.txIns[t],i=r.script,s=this.txOutMap.get(r.txHashBuf,r.txOutNum);if(!s)return console.log("output "+r.txOutNum+" not found"),!1;const n=s.script,o=s.valueBn;this.interp=new at;const h=await A.asyncObjectMethod(this.interp,"verify",[i,n,this.tx,t,e,o]);return JSON.parse(h.resbuf.toString())}getDebugObject(){return{errStr:this.errStr,interpFailure:this.interp?this.interp.getDebugObject():void 0}}getDebugString(){return JSON.stringify(this.getDebugObject(),null,2)}}class dt{}dt.encrypt=function(t,e){const r=dt.buf2Words(e),i=dt.buf2Words(t),s=new n.a(r).encrypt(i);return dt.words2Buf(s)},dt.decrypt=function(t,e){const r=dt.buf2Words(t),i=dt.buf2Words(e),s=new n.a(i).decrypt(r);return dt.words2Buf(s)},dt.buf2Words=function(t){if(t.length%4)throw new Error("buf length must be a multiple of 4");const e=[];for(let r=0;r<t.length/4;r++)e.push(t.readUInt32BE(4*r));return e},dt.words2Buf=function(e){const r=t.alloc(4*e.length);for(let t=0;t<e.length;t++)r.writeUInt32BE(e[t],4*t);return r};class gt{}gt.buf2BlocksBuf=function(t,e){const r=e/8,i=[];for(let s=0;s<=t.length/r;s++){let n=t.slice(s*r,s*r+r);n.length<e&&(n=gt.pkcs7Pad(n,e)),i.push(n)}return i},gt.blockBufs2Buf=function(e){let r=e[e.length-1];r=gt.pkcs7Unpad(r),e[e.length-1]=r;return t.concat(e)},gt.encrypt=function(e,r,i,s){const n=8*r.length,o=gt.buf2BlocksBuf(e,n),h=gt.encryptBlocks(o,r,i,s);return t.concat(h)},gt.decrypt=function(t,e,r,i){const s=e.length,n=[];for(let e=0;e<t.length/s;e++)n.push(t.slice(e*s,e*s+s));const o=gt.decryptBlocks(n,e,r,i);return gt.blockBufs2Buf(o)},gt.encryptBlock=function(t,e,r,i){const s=gt.xorBufs(t,e);return r.encrypt(s,i)},gt.decryptBlock=function(t,e,r,i){const s=r.decrypt(t,i);return gt.xorBufs(s,e)},gt.encryptBlocks=function(t,e,r,i){const s=[];for(let n=0;n<t.length;n++){const o=t[n],h=gt.encryptBlock(o,e,r,i);s.push(h),e=h}return s},gt.decryptBlocks=function(t,e,r,i){const s=[];for(let n=0;n<t.length;n++){const o=t[n],h=gt.decryptBlock(o,e,r,i);s.push(h),e=o}return s},gt.pkcs7Pad=function(e,r){const i=r/8-e.length,s=t.alloc(i);s.fill(i);return t.concat([e,s])},gt.pkcs7Unpad=function(e){const r=e[e.length-1],i=e.slice(e.length-r,e.length),s=t.alloc(r);if(s.fill(r),!k(i,s))throw new Error("invalid padding");return e.slice(0,e.length-r)},gt.xorBufs=function(e,r){if(e.length!==r.length)throw new Error("bufs must have the same length");const i=t.alloc(e.length);for(let t=0;t<e.length;t++)i[t]=e[t]^r[t];return i};class yt{}yt.encrypt=function(e,r,i,s=!0){i=i||j.getRandomBuffer(16);const n=gt.encrypt(e,i,dt,r);return s?t.concat([i,n]):n},yt.decrypt=function(t,e,r=!1){if(r){const i=t;return gt.decrypt(i,r,dt,e)}{const r=t.slice(0,16),i=t.slice(16);return gt.decrypt(i,r,dt,e)}};class wt{}wt.encrypt=function(e,r,i){const s=yt.encrypt(e,r,i),n=M.sha256Hmac(s,r);return t.concat([n,s])},wt.asyncEncrypt=async function(t,e,r){r||(r=j.getRandomBuffer(16));const i=[t,e,r];return(await A.asyncClassMethod(wt,"encrypt",i)).resbuf},wt.decrypt=function(t,e){if(t.length<64)throw new Error("The encrypted data must be at least 256+128+128 bits, which is the length of the Hmac plus the iv plus the smallest encrypted data size");const r=t.slice(0,32);t=t.slice(32,t.length);const i=M.sha256Hmac(t,e);if(!k(r,i))throw new Error("Message authentication failed - Hmacs are not equivalent");return yt.decrypt(t,e)},wt.asyncDecrypt=async function(t,e){const r=[t,e];return(await A.asyncClassMethod(wt,"decrypt",r)).resbuf};class St{}St.ivkEkM=function(t,e){const r=t.bn,i=e.point.mul(r),s=new V(i).toBuffer(),n=M.sha512(s);return{iv:n.slice(0,16),kE:n.slice(16,32),kM:n.slice(32,64)}},St.electrumEncrypt=function(e,r,i){if(!t.isBuffer(e))throw new Error("messageBuf must be a buffer");const{iv:s,kE:n,kM:o}=St.ivkEkM(i.privKey,r),h=i.pubKey.toDer(!0),u=yt.encrypt(e,n,s,!1),a=t.from("BIE1"),c=t.concat([a,h,u]),f=M.sha256Hmac(c,o);return t.concat([c,f])},St.electrumDecrypt=function(e,r){if(!t.isBuffer(e))throw new Error("encBuf must be a buffer");if(!e.slice(0,4).equals(t.from("BIE1")))throw new Error("Invalid Magic");const i=e.slice(4,37),s=V.fromDer(i),{iv:n,kE:o,kM:h}=St.ivkEkM(r,s),u=e.slice(37,e.length-32),a=e.slice(e.length-32,e.length),c=M.sha256Hmac(e.slice(0,e.length-32),h);if(!a.equals(c))throw new Error("Invalid checksum");return yt.decrypt(u,o,n)},St.bitcoreEncrypt=function(e,r,i,s){i||(i=Z.fromRandom());const n=i.privKey.bn,o=i.pubKey.toDer(!0),h=r.point.mul(n).getX().toBuffer({size:32}),u=M.sha512(h),a=u.slice(0,32),c=u.slice(32,64),f=yt.encrypt(e,a,s),l=M.sha256Hmac(f,c);return t.concat([o,f,l])},St.asyncBitcoreEncrypt=async function(t,e,r,i){r||(r=await Z.asyncFromRandom()),i||(i=j.getRandomBuffer(16));const s=[t,e,r,i];return(await A.asyncClassMethod(St,"bitcoreEncrypt",s)).resbuf},St.bitcoreDecrypt=function(t,e){const r=e.bn,i=V.fromDer(t.slice(0,33)).point.mul(r);if(i.eq(new D))throw new Error("P equals 0");const s=i.getX().toBuffer({size:32}),n=M.sha512(s),o=n.slice(0,32),h=n.slice(32,64),u=t.slice(33,t.length-32),a=t.slice(t.length-32,t.length),c=M.sha256Hmac(u,h);if(!k(a,c))throw new Error("Invalid checksum");return yt.decrypt(u,o)},St.asyncBitcoreDecrypt=async function(t,e){const r=[t,e];return(await A.asyncClassMethod(St,"bitcoreDecrypt",r)).resbuf};const bt={aes:n.a,bnjs:h.a,bs58:a(),elliptic:f(),hashjs:p(),pbkdf2compat:d.a}}.call(this,r(3).Buffer,r(4))},18:function(t,e,r){(function(t){function r(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===r(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===r(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===r(t)},e.isError=function(t){return"[object Error]"===r(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,r(3).Buffer)},3:function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var i=r(66),s=r(67),n=r(32);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function h(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return a(this,t,e,r)}function a(t,e,r,i){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,i){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(i||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===i?new Uint8Array(e):void 0===i?new Uint8Array(e,r):new Uint8Array(e,r,i);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,r,i):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var i=0|m(e,r),s=(t=h(t,i)).write(e,r);s!==i&&(t=t.slice(0,s));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|p(e.length);return 0===(t=h(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(i=e.length)!=i?h(t,0):l(t,e);if("Buffer"===e.type&&n(e.data))return l(t,e.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(c(e),t=h(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function l(t,e){var r=e.length<0?0:0|p(e.length);t=h(t,r);for(var i=0;i<r;i+=1)t[i]=255&e[i];return t}function p(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function m(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return D(t).length;default:if(i)return U(t).length;e=(""+e).toLowerCase(),i=!0}}function d(t,e,r){var i=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return R(this,e,r);case"utf8":case"utf-8":return B(this,e,r);case"ascii":return P(this,e,r);case"latin1":case"binary":return k(this,e,r);case"base64":return I(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,e,r);default:if(i)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),i=!0}}function g(t,e,r){var i=t[e];t[e]=t[r],t[r]=i}function y(t,e,r,i,s){if(0===t.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=s?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(s)return-1;r=t.length-1}else if(r<0){if(!s)return-1;r=0}if("string"==typeof e&&(e=u.from(e,i)),u.isBuffer(e))return 0===e.length?-1:w(t,e,r,i,s);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):w(t,[e],r,i,s);throw new TypeError("val must be string, number or Buffer")}function w(t,e,r,i,s){var n,o=1,h=t.length,u=e.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(t.length<2||e.length<2)return-1;o=2,h/=2,u/=2,r/=2}function a(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(s){var c=-1;for(n=r;n<h;n++)if(a(t,n)===a(e,-1===c?0:n-c)){if(-1===c&&(c=n),n-c+1===u)return c*o}else-1!==c&&(n-=n-c),c=-1}else for(r+u>h&&(r=h-u),n=r;n>=0;n--){for(var f=!0,l=0;l<u;l++)if(a(t,n+l)!==a(e,l)){f=!1;break}if(f)return n}return-1}function S(t,e,r,i){r=Number(r)||0;var s=t.length-r;i?(i=Number(i))>s&&(i=s):i=s;var n=e.length;if(n%2!=0)throw new TypeError("Invalid hex string");i>n/2&&(i=n/2);for(var o=0;o<i;++o){var h=parseInt(e.substr(2*o,2),16);if(isNaN(h))return o;t[r+o]=h}return o}function b(t,e,r,i){return V(U(e,t.length-r),t,r,i)}function v(t,e,r,i){return V(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,i)}function _(t,e,r,i){return v(t,e,r,i)}function O(t,e,r,i){return V(D(e),t,r,i)}function E(t,e,r,i){return V(function(t,e){for(var r,i,s,n=[],o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),i=r>>8,s=r%256,n.push(s),n.push(i);return n}(e,t.length-r),t,r,i)}function I(t,e,r){return 0===e&&r===t.length?i.fromByteArray(t):i.fromByteArray(t.slice(e,r))}function B(t,e,r){r=Math.min(t.length,r);for(var i=[],s=e;s<r;){var n,o,h,u,a=t[s],c=null,f=a>239?4:a>223?3:a>191?2:1;if(s+f<=r)switch(f){case 1:a<128&&(c=a);break;case 2:128==(192&(n=t[s+1]))&&(u=(31&a)<<6|63&n)>127&&(c=u);break;case 3:n=t[s+1],o=t[s+2],128==(192&n)&&128==(192&o)&&(u=(15&a)<<12|(63&n)<<6|63&o)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:n=t[s+1],o=t[s+2],h=t[s+3],128==(192&n)&&128==(192&o)&&128==(192&h)&&(u=(15&a)<<18|(63&n)<<12|(63&o)<<6|63&h)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,i.push(c>>>10&1023|55296),c=56320|1023&c),i.push(c),s+=f}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",i=0;for(;i<e;)r+=String.fromCharCode.apply(String,t.slice(i,i+=4096));return r}(i)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return a(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,i){return c(e),e<=0?h(t,e):void 0!==r?"string"==typeof i?h(t,e).fill(r,i):h(t,e).fill(r):h(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,i=e.length,s=0,n=Math.min(r,i);s<n;++s)if(t[s]!==e[s]){r=t[s],i=e[s];break}return r<i?-1:i<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!n(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var i=u.allocUnsafe(e),s=0;for(r=0;r<t.length;++r){var o=t[r];if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(i,s),s+=o.length}return i},u.byteLength=m,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?B(this,0,t):d.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,i,s){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===i&&(i=0),void 0===s&&(s=this.length),e<0||r>t.length||i<0||s>this.length)throw new RangeError("out of range index");if(i>=s&&e>=r)return 0;if(i>=s)return-1;if(e>=r)return 1;if(this===t)return 0;for(var n=(s>>>=0)-(i>>>=0),o=(r>>>=0)-(e>>>=0),h=Math.min(n,o),a=this.slice(i,s),c=t.slice(e,r),f=0;f<h;++f)if(a[f]!==c[f]){n=a[f],o=c[f];break}return n<o?-1:o<n?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},u.prototype.write=function(t,e,r,i){if(void 0===e)i="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)i=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===i&&(i="utf8")):(i=r,r=void 0)}var s=this.length-e;if((void 0===r||r>s)&&(r=s),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var n=!1;;)switch(i){case"hex":return S(this,t,e,r);case"utf8":case"utf-8":return b(this,t,e,r);case"ascii":return v(this,t,e,r);case"latin1":case"binary":return _(this,t,e,r);case"base64":return O(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,r);default:if(n)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),n=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function P(t,e,r){var i="";r=Math.min(t.length,r);for(var s=e;s<r;++s)i+=String.fromCharCode(127&t[s]);return i}function k(t,e,r){var i="";r=Math.min(t.length,r);for(var s=e;s<r;++s)i+=String.fromCharCode(t[s]);return i}function R(t,e,r){var i=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>i)&&(r=i);for(var s="",n=e;n<r;++n)s+=K(t[n]);return s}function N(t,e,r){for(var i=t.slice(e,r),s="",n=0;n<i.length;n+=2)s+=String.fromCharCode(i[n]+256*i[n+1]);return s}function A(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function M(t,e,r,i,s,n){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>s||e<n)throw new RangeError('"value" argument is out of bounds');if(r+i>t.length)throw new RangeError("Index out of range")}function x(t,e,r,i){e<0&&(e=65535+e+1);for(var s=0,n=Math.min(t.length-r,2);s<n;++s)t[r+s]=(e&255<<8*(i?s:1-s))>>>8*(i?s:1-s)}function T(t,e,r,i){e<0&&(e=4294967295+e+1);for(var s=0,n=Math.min(t.length-r,4);s<n;++s)t[r+s]=e>>>8*(i?s:3-s)&255}function C(t,e,r,i,s,n){if(r+i>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function H(t,e,r,i,n){return n||C(t,0,r,4),s.write(t,e,r,i,23,4),r+4}function L(t,e,r,i,n){return n||C(t,0,r,8),s.write(t,e,r,i,52,8),r+8}u.prototype.slice=function(t,e){var r,i=this.length;if((t=~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),(e=void 0===e?i:~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var s=e-t;r=new u(s,void 0);for(var n=0;n<s;++n)r[n]=this[n+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||A(t,e,this.length);for(var i=this[t],s=1,n=0;++n<e&&(s*=256);)i+=this[t+n]*s;return i},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||A(t,e,this.length);for(var i=this[t+--e],s=1;e>0&&(s*=256);)i+=this[t+--e]*s;return i},u.prototype.readUInt8=function(t,e){return e||A(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||A(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||A(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||A(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||A(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||A(t,e,this.length);for(var i=this[t],s=1,n=0;++n<e&&(s*=256);)i+=this[t+n]*s;return i>=(s*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||A(t,e,this.length);for(var i=e,s=1,n=this[t+--i];i>0&&(s*=256);)n+=this[t+--i]*s;return n>=(s*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readInt8=function(t,e){return e||A(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||A(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||A(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||A(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||A(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||A(t,4,this.length),s.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||A(t,4,this.length),s.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||A(t,8,this.length),s.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||A(t,8,this.length),s.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,i){(t=+t,e|=0,r|=0,i)||M(this,t,e,r,Math.pow(2,8*r)-1,0);var s=1,n=0;for(this[e]=255&t;++n<r&&(s*=256);)this[e+n]=t/s&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,i){(t=+t,e|=0,r|=0,i)||M(this,t,e,r,Math.pow(2,8*r)-1,0);var s=r-1,n=1;for(this[e+s]=255&t;--s>=0&&(n*=256);)this[e+s]=t/n&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):x(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):x(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):T(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):T(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,i){if(t=+t,e|=0,!i){var s=Math.pow(2,8*r-1);M(this,t,e,r,s-1,-s)}var n=0,o=1,h=0;for(this[e]=255&t;++n<r&&(o*=256);)t<0&&0===h&&0!==this[e+n-1]&&(h=1),this[e+n]=(t/o>>0)-h&255;return e+r},u.prototype.writeIntBE=function(t,e,r,i){if(t=+t,e|=0,!i){var s=Math.pow(2,8*r-1);M(this,t,e,r,s-1,-s)}var n=r-1,o=1,h=0;for(this[e+n]=255&t;--n>=0&&(o*=256);)t<0&&0===h&&0!==this[e+n+1]&&(h=1),this[e+n]=(t/o>>0)-h&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):x(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):x(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):T(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):T(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return H(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return H(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return L(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return L(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,i){if(r||(r=0),i||0===i||(i=this.length),e>=t.length&&(e=t.length),e||(e=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),t.length-e<i-r&&(i=t.length-e+r);var s,n=i-r;if(this===t&&r<e&&e<i)for(s=n-1;s>=0;--s)t[s+e]=this[s+r];else if(n<1e3||!u.TYPED_ARRAY_SUPPORT)for(s=0;s<n;++s)t[s+e]=this[s+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+n),e);return n},u.prototype.fill=function(t,e,r,i){if("string"==typeof t){if("string"==typeof e?(i=e,e=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),1===t.length){var s=t.charCodeAt(0);s<256&&(t=s)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!u.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var n;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(n=e;n<r;++n)this[n]=t;else{var o=u.isBuffer(t)?t:U(new u(t,i).toString()),h=o.length;for(n=0;n<r-e;++n)this[n+e]=o[n%h]}return this};var F=/[^+\/0-9A-Za-z-_]/g;function K(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,e){var r;e=e||1/0;for(var i=t.length,s=null,n=[],o=0;o<i;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!s){if(r>56319){(e-=3)>-1&&n.push(239,191,189);continue}if(o+1===i){(e-=3)>-1&&n.push(239,191,189);continue}s=r;continue}if(r<56320){(e-=3)>-1&&n.push(239,191,189),s=r;continue}r=65536+(s-55296<<10|r-56320)}else s&&(e-=3)>-1&&n.push(239,191,189);if(s=null,r<128){if((e-=1)<0)break;n.push(r)}else if(r<2048){if((e-=2)<0)break;n.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;n.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;n.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return n}function D(t){return i.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(F,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,e,r,i){for(var s=0;s<i&&!(s+r>=e.length||s>=t.length);++s)e[s+r]=t[s];return s}}).call(this,r(6))},42:function(t,e,r){var i=r(2).Buffer,s=r(87).Transform,n=r(19).StringDecoder;function o(t){s.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}r(0)(o,s),o.prototype.update=function(t,e,r){"string"==typeof t&&(t=i.from(t,e));var s=this._update(t);return this.hashMode?this:(r&&(s=this._toString(s,r)),s)},o.prototype.setAutoPadding=function(){},o.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},o.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},o.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},o.prototype._transform=function(t,e,r){var i;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){i=t}finally{r(i)}},o.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},o.prototype._finalOrDigest=function(t){var e=this.__final()||i.alloc(0);return t&&(e=this._toString(e,t,!0)),e},o.prototype._toString=function(t,e,r){if(this._decoder||(this._decoder=new n(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var i=this._decoder.write(t);return r&&(i+=this._decoder.end()),i},t.exports=o},7:function(t,e,r){"use strict";var i,s="object"==typeof Reflect?Reflect:null,n=s&&"function"==typeof s.apply?s.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};i=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var o=Number.isNaN||function(t){return t!=t};function h(){h.init.call(this)}t.exports=h,t.exports.once=function(t,e){return new Promise((function(r,i){function s(){void 0!==n&&t.removeListener("error",n),r([].slice.call(arguments))}var n;"error"!==e&&(n=function(r){t.removeListener(e,s),i(r)},t.once("error",n)),t.once(e,s)}))},h.EventEmitter=h,h.prototype._events=void 0,h.prototype._eventsCount=0,h.prototype._maxListeners=void 0;var u=10;function a(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function c(t){return void 0===t._maxListeners?h.defaultMaxListeners:t._maxListeners}function f(t,e,r,i){var s,n,o,h;if(a(r),void 0===(n=t._events)?(n=t._events=Object.create(null),t._eventsCount=0):(void 0!==n.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),n=t._events),o=n[e]),void 0===o)o=n[e]=r,++t._eventsCount;else if("function"==typeof o?o=n[e]=i?[r,o]:[o,r]:i?o.unshift(r):o.push(r),(s=c(t))>0&&o.length>s&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=o.length,h=u,console&&console.warn&&console.warn(h)}return t}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(t,e,r){var i={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},s=l.bind(i);return s.listener=r,i.wrapFn=s,s}function m(t,e,r){var i=t._events;if(void 0===i)return[];var s=i[e];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(s):g(s,s.length)}function d(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function g(t,e){for(var r=new Array(e),i=0;i<e;++i)r[i]=t[i];return r}Object.defineProperty(h,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||o(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),h.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},h.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||o(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},h.prototype.getMaxListeners=function(){return c(this)},h.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var i="error"===t,s=this._events;if(void 0!==s)i=i&&void 0===s.error;else if(!i)return!1;if(i){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var h=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw h.context=o,h}var u=s[t];if(void 0===u)return!1;if("function"==typeof u)n(u,this,e);else{var a=u.length,c=g(u,a);for(r=0;r<a;++r)n(c[r],this,e)}return!0},h.prototype.addListener=function(t,e){return f(this,t,e,!1)},h.prototype.on=h.prototype.addListener,h.prototype.prependListener=function(t,e){return f(this,t,e,!0)},h.prototype.once=function(t,e){return a(e),this.on(t,p(this,t,e)),this},h.prototype.prependOnceListener=function(t,e){return a(e),this.prependListener(t,p(this,t,e)),this},h.prototype.removeListener=function(t,e){var r,i,s,n,o;if(a(e),void 0===(i=this._events))return this;if(void 0===(r=i[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(s=-1,n=r.length-1;n>=0;n--)if(r[n]===e||r[n].listener===e){o=r[n].listener,s=n;break}if(s<0)return this;0===s?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,s),1===r.length&&(i[t]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",t,o||e)}return this},h.prototype.off=h.prototype.removeListener,h.prototype.removeAllListeners=function(t){var e,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var s,n=Object.keys(r);for(i=0;i<n.length;++i)"removeListener"!==(s=n[i])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this},h.prototype.listeners=function(t){return m(this,t,!0)},h.prototype.rawListeners=function(t){return m(this,t,!1)},h.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):d.call(t,e)},h.prototype.listenerCount=d,h.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},85:function(t,e,r){"use strict";var i=r(0),s=r(86),n=r(42),o=r(2).Buffer,h=r(98),u=r(109),a=r(110),c=o.alloc(128);function f(t,e){n.call(this,"digest"),"string"==typeof e&&(e=o.from(e));var r="sha512"===t||"sha384"===t?128:64;(this._alg=t,this._key=e,e.length>r)?e=("rmd160"===t?new u:a(t)).update(e).digest():e.length<r&&(e=o.concat([e,c],r));for(var i=this._ipad=o.allocUnsafe(r),s=this._opad=o.allocUnsafe(r),h=0;h<r;h++)i[h]=54^e[h],s[h]=92^e[h];this._hash="rmd160"===t?new u:a(t),this._hash.update(i)}i(f,n),f.prototype._update=function(t){this._hash.update(t)},f.prototype._final=function(){var t=this._hash.digest();return("rmd160"===this._alg?new u:a(this._alg)).update(this._opad).update(t).digest()},t.exports=function(t,e){return"rmd160"===(t=t.toLowerCase())||"ripemd160"===t?new f("rmd160",e):"md5"===t?new s(h,e):new f(t,e)}},86:function(t,e,r){"use strict";var i=r(0),s=r(2).Buffer,n=r(42),o=s.alloc(128);function h(t,e){n.call(this,"digest"),"string"==typeof e&&(e=s.from(e)),this._alg=t,this._key=e,e.length>64?e=t(e):e.length<64&&(e=s.concat([e,o],64));for(var r=this._ipad=s.allocUnsafe(64),i=this._opad=s.allocUnsafe(64),h=0;h<64;h++)r[h]=54^e[h],i[h]=92^e[h];this._hash=[r]}i(h,n),h.prototype._update=function(t){this._hash.push(t)},h.prototype._final=function(){var t=this._alg(s.concat(this._hash));return this._alg(s.concat([this._opad,t]))},t.exports=h},98:function(t,e,r){var i=r(99);t.exports=function(t){return(new i).update(t).digest()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,