<h1 id='getting-started'>Getting Started</h1><h2 id='getting-started-installation'>Installation</h2>
<blockquote>
<p>Load both <code>bsv</code> and Run in the browser</p>
</blockquote>
<pre class="highlight html tab-html"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"bsv.browser.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"run.browser.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre>
<blockquote>
<p>Load Run in Node.js</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">Run</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./dist/run.node.min'</span><span class="p">)</span>
</code></pre>
<p>If you&#39;re new to Run, let the <a href="https://run.network">tutorial series</a> guide your journey to get acquainted. You can write code without installing anything. The web browser Console will be your playground.</p>

<p>The details written here in the Docs have example code in the sidebar on the right-hand side. Anything you read in paragraphs, you can preview in-action over there. â‡¥</p>

<p>Run works everywhere including all major browsers, on desktop and mobile, as well as Node.js 10+ on <a href="#advanced-usage-using-run-on-a-server">servers</a>. Run is written in JavaScript ES6 and uses the <a href="https://github.com/moneybutton/bsv"><strong>bsv</strong> library</a> to build and sign transactions. To get started:</p>

<ul>
<li>For a webpage: Add <code>bsv.browser.min.js</code> and <code>run.browser.min.js</code> to the <code>&lt;head&gt;</code> tag.</li>
<li>For Node.js: Execute <code>npm install bsv</code> to install <strong>bsv</strong>, then import <code>run.node.min.js</code>.</li>
</ul>

<p>And that&#39;s it. All your code and jigs will be saved on-chain and Run will use public APIs to interact with the Bitcoin network. You don&#39;t need to deploy any servers with Run. All the logic works client-side.</p>
<h2 id='getting-started-setup'>Setup</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="na">network</span><span class="p">:</span> <span class="s1">'mock'</span> <span class="p">})</span>
</code></pre>
<p>The Run instance manages your communication with the Bitcoin network. The default network is <code>main</code> (Mainnet), but for development and testing, we recommend <code>mock</code>. Mock is an in-memory simulation blockchain that does not require funds to use. We like to call it the <em>mockchain</em>. For more configuration options, see <a href="#api-reference-run">API Reference: Run</a>.</p>
<h2 id='getting-started-creating-jigs'>Creating Jigs</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">SimpleStore</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">jig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SimpleStore</span><span class="p">()</span>

<span class="nx">jig</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'Satoshi Nakamoto'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jig</span><span class="p">.</span><span class="nx">owner</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jig</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jig</span><span class="p">.</span><span class="nx">origin</span><span class="p">)</span>
</code></pre>
<p>Let&#39;s begin with a basic jig that stores a value in a variable. Create a jig called <code>SimpleStore</code>. By extending from <code>Jig</code>, the instances of your class will automatically sync to the blockchain. Every jig has an <code>owner</code>. Any code may read jigs but only its <code>owner</code> can update it. The <code>owner</code> is typically a Bitcoin address, and the private key is required to update it.</p>

<p>In addition to <code>owner</code>, every jig has a <code>location</code>. A jig&#39;s <code>location</code> is the pairing of a Bitcoin transaction ID and an output index, and it represents a particular state in time of an object or class on Bitcoin. When you check the <code>location</code> property of a jig, you get its current location. If you wish to get the location where the jig was first deployed, that is called its <code>origin</code>. The <code>origin</code> is unique and will not change, however <code>location</code> changes with every update. After a method call, your jig will have a new <code>location</code> pointing to a Bitcoin transaction containing the last method call.</p>
<h2 id='getting-started-loading-jigs'>Loading Jigs</h2>
<blockquote>
<p>Loading all jigs</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>

<span class="kr">const</span> <span class="nx">simpleStore</span> <span class="o">=</span> <span class="nx">run</span><span class="p">.</span><span class="nx">inventory</span><span class="p">.</span><span class="nx">jigs</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="k">instanceof</span> <span class="nx">SimpleStore</span><span class="p">)</span>

<span class="nx">simpleStore</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</code></pre>
<blockquote>
<p>Loading a specific jig</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">specificJig</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">simpleStore</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span>

<span class="nx">specificJig</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'abc'</span><span class="p">)</span>
</code></pre>
<p>The simplest way to load your jigs is to call <code>run.sync()</code> and then access <code>run.inventory.jigs</code>. <code>run.sync()</code> will find and load all objects owned by <code>run.owner</code> and place them in the <code>jigs</code> array. Once loaded, you may call methods and use them normally. Alternatively, you may wish to load a particular jig or load a jig from a historical location or previous state. To do either, pass the <code>location</code> of the jig you wish to load into <code>run.load()</code>.</p>

<p>If you&#39;ve loaded a historical location so that your jig is in a previous state, you&#39;ll need to first catch up to the latest state before you&#39;ll be allowed to make a method call. <code>sync()</code> will handily fast-forward a jig to its latest state on the blockchain <em>without</em> triggering a Bitcoin transaction. In the example on the sidebar, if <code>specificJig</code> was in a historical state, you would call <code>specificJig.sync()</code> and then call <code>specificJig.set(&#39;abc&#39;)</code>. When you accidentally try to update a jig without the jig being in its latest state, Run will safely abort before publishing a Bitcoin transaction and inform you with an error. In that case, you&#39;ll just need to add the preceding <code>sync()</code> call and execute your code again. The best practice is to write code in such a way that jigs are always up-to-date in their latest state. Run manages the heavy lifting for you.</p>

<p><code>sync()</code> also acts as a debugging tool since it surfaces any errors your jigs have. If you notice your app acting funny, a well-placed preceding <code>specificJig.sync()</code> can help you uncover the error. You may also call <code>sync()</code> on the Run instance, like this: <code>run.sync()</code>. That&#39;ll help you search out any errors from your entire app in <em>all</em> of the jigs you own.</p>
